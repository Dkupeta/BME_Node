
BME_IoT_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a18  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002ad8  08002ad8  00012ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002afc  08002afc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002afc  08002afc  00012afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b04  08002b04  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b04  08002b04  00012b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b08  08002b08  00012b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000010  08002b18  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002b18  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c50  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ac5  00000000  00000000  00027c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000908  00000000  00000000  00029750  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000810  00000000  00000000  0002a058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002bb3  00000000  00000000  0002a868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008500  00000000  00000000  0002d41b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006e744  00000000  00000000  0003591b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a405f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e88  00000000  00000000  000a40dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ac0 	.word	0x08002ac0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08002ac0 	.word	0x08002ac0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8cf 	bl	8000420 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ca 	bl	8000420 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzsi2>:
 80003e4:	211c      	movs	r1, #28
 80003e6:	2301      	movs	r3, #1
 80003e8:	041b      	lsls	r3, r3, #16
 80003ea:	4298      	cmp	r0, r3
 80003ec:	d301      	bcc.n	80003f2 <__clzsi2+0xe>
 80003ee:	0c00      	lsrs	r0, r0, #16
 80003f0:	3910      	subs	r1, #16
 80003f2:	0a1b      	lsrs	r3, r3, #8
 80003f4:	4298      	cmp	r0, r3
 80003f6:	d301      	bcc.n	80003fc <__clzsi2+0x18>
 80003f8:	0a00      	lsrs	r0, r0, #8
 80003fa:	3908      	subs	r1, #8
 80003fc:	091b      	lsrs	r3, r3, #4
 80003fe:	4298      	cmp	r0, r3
 8000400:	d301      	bcc.n	8000406 <__clzsi2+0x22>
 8000402:	0900      	lsrs	r0, r0, #4
 8000404:	3904      	subs	r1, #4
 8000406:	a202      	add	r2, pc, #8	; (adr r2, 8000410 <__clzsi2+0x2c>)
 8000408:	5c10      	ldrb	r0, [r2, r0]
 800040a:	1840      	adds	r0, r0, r1
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	02020304 	.word	0x02020304
 8000414:	01010101 	.word	0x01010101
	...

08000420 <__clzdi2>:
 8000420:	b510      	push	{r4, lr}
 8000422:	2900      	cmp	r1, #0
 8000424:	d103      	bne.n	800042e <__clzdi2+0xe>
 8000426:	f7ff ffdd 	bl	80003e4 <__clzsi2>
 800042a:	3020      	adds	r0, #32
 800042c:	e002      	b.n	8000434 <__clzdi2+0x14>
 800042e:	1c08      	adds	r0, r1, #0
 8000430:	f7ff ffd8 	bl	80003e4 <__clzsi2>
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	0002      	movs	r2, r0
 8000440:	1dfb      	adds	r3, r7, #7
 8000442:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000444:	1dfb      	adds	r3, r7, #7
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	001a      	movs	r2, r3
 800044a:	231f      	movs	r3, #31
 800044c:	401a      	ands	r2, r3
 800044e:	4b04      	ldr	r3, [pc, #16]	; (8000460 <NVIC_EnableIRQ+0x28>)
 8000450:	2101      	movs	r1, #1
 8000452:	4091      	lsls	r1, r2
 8000454:	000a      	movs	r2, r1
 8000456:	601a      	str	r2, [r3, #0]
}
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	b002      	add	sp, #8
 800045e:	bd80      	pop	{r7, pc}
 8000460:	e000e100 	.word	0xe000e100

08000464 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000464:	b590      	push	{r4, r7, lr}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	0002      	movs	r2, r0
 800046c:	6039      	str	r1, [r7, #0]
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000472:	1dfb      	adds	r3, r7, #7
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b7f      	cmp	r3, #127	; 0x7f
 8000478:	d932      	bls.n	80004e0 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800047a:	4a2f      	ldr	r2, [pc, #188]	; (8000538 <NVIC_SetPriority+0xd4>)
 800047c:	1dfb      	adds	r3, r7, #7
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	0019      	movs	r1, r3
 8000482:	230f      	movs	r3, #15
 8000484:	400b      	ands	r3, r1
 8000486:	3b08      	subs	r3, #8
 8000488:	089b      	lsrs	r3, r3, #2
 800048a:	3306      	adds	r3, #6
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	18d3      	adds	r3, r2, r3
 8000490:	3304      	adds	r3, #4
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	1dfa      	adds	r2, r7, #7
 8000496:	7812      	ldrb	r2, [r2, #0]
 8000498:	0011      	movs	r1, r2
 800049a:	2203      	movs	r2, #3
 800049c:	400a      	ands	r2, r1
 800049e:	00d2      	lsls	r2, r2, #3
 80004a0:	21ff      	movs	r1, #255	; 0xff
 80004a2:	4091      	lsls	r1, r2
 80004a4:	000a      	movs	r2, r1
 80004a6:	43d2      	mvns	r2, r2
 80004a8:	401a      	ands	r2, r3
 80004aa:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	019b      	lsls	r3, r3, #6
 80004b0:	22ff      	movs	r2, #255	; 0xff
 80004b2:	401a      	ands	r2, r3
 80004b4:	1dfb      	adds	r3, r7, #7
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	0018      	movs	r0, r3
 80004ba:	2303      	movs	r3, #3
 80004bc:	4003      	ands	r3, r0
 80004be:	00db      	lsls	r3, r3, #3
 80004c0:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004c2:	481d      	ldr	r0, [pc, #116]	; (8000538 <NVIC_SetPriority+0xd4>)
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	001c      	movs	r4, r3
 80004ca:	230f      	movs	r3, #15
 80004cc:	4023      	ands	r3, r4
 80004ce:	3b08      	subs	r3, #8
 80004d0:	089b      	lsrs	r3, r3, #2
 80004d2:	430a      	orrs	r2, r1
 80004d4:	3306      	adds	r3, #6
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	18c3      	adds	r3, r0, r3
 80004da:	3304      	adds	r3, #4
 80004dc:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80004de:	e027      	b.n	8000530 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004e0:	4a16      	ldr	r2, [pc, #88]	; (800053c <NVIC_SetPriority+0xd8>)
 80004e2:	1dfb      	adds	r3, r7, #7
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	b25b      	sxtb	r3, r3
 80004e8:	089b      	lsrs	r3, r3, #2
 80004ea:	33c0      	adds	r3, #192	; 0xc0
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	589b      	ldr	r3, [r3, r2]
 80004f0:	1dfa      	adds	r2, r7, #7
 80004f2:	7812      	ldrb	r2, [r2, #0]
 80004f4:	0011      	movs	r1, r2
 80004f6:	2203      	movs	r2, #3
 80004f8:	400a      	ands	r2, r1
 80004fa:	00d2      	lsls	r2, r2, #3
 80004fc:	21ff      	movs	r1, #255	; 0xff
 80004fe:	4091      	lsls	r1, r2
 8000500:	000a      	movs	r2, r1
 8000502:	43d2      	mvns	r2, r2
 8000504:	401a      	ands	r2, r3
 8000506:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	019b      	lsls	r3, r3, #6
 800050c:	22ff      	movs	r2, #255	; 0xff
 800050e:	401a      	ands	r2, r3
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	0018      	movs	r0, r3
 8000516:	2303      	movs	r3, #3
 8000518:	4003      	ands	r3, r0
 800051a:	00db      	lsls	r3, r3, #3
 800051c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800051e:	4807      	ldr	r0, [pc, #28]	; (800053c <NVIC_SetPriority+0xd8>)
 8000520:	1dfb      	adds	r3, r7, #7
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	b25b      	sxtb	r3, r3
 8000526:	089b      	lsrs	r3, r3, #2
 8000528:	430a      	orrs	r2, r1
 800052a:	33c0      	adds	r3, #192	; 0xc0
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	501a      	str	r2, [r3, r0]
}
 8000530:	46c0      	nop			; (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	b003      	add	sp, #12
 8000536:	bd90      	pop	{r4, r7, pc}
 8000538:	e000ed00 	.word	0xe000ed00
 800053c:	e000e100 	.word	0xe000e100

08000540 <LL_ADC_SetCommonFrequencyMode>:
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_HIGH
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonFrequencyMode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Resolution)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, Resolution);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a05      	ldr	r2, [pc, #20]	; (8000564 <LL_ADC_SetCommonFrequencyMode+0x24>)
 8000550:	401a      	ands	r2, r3
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	431a      	orrs	r2, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	601a      	str	r2, [r3, #0]
}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	fdffffff 	.word	0xfdffffff

08000568 <LL_ADC_SetCommonPathInternalCh>:
  *         (1) value not defined in all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  *         (2) value not defined in all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx, STM32L04xxx, STM32L03xxx, STM32L02xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
#if defined (ADC_CCR_VLCDEN) && defined (ADC_CCR_TSEN)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VLCDEN, PathInternal);
#elif defined (ADC_CCR_TSEN)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a05      	ldr	r2, [pc, #20]	; (800058c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000578:	401a      	ands	r2, r3
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	431a      	orrs	r2, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	601a      	str	r2, [r3, #0]
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN, PathInternal);
#endif
}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	b002      	add	sp, #8
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	ff3fffff 	.word	0xff3fffff

08000590 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	2207      	movs	r2, #7
 80005a0:	4393      	bics	r3, r2
 80005a2:	001a      	movs	r2, r3
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	431a      	orrs	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	615a      	str	r2, [r3, #20]
}
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b002      	add	sp, #8
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	2204      	movs	r2, #4
 80005c4:	4393      	bics	r3, r2
 80005c6:	001a      	movs	r2, r3
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	431a      	orrs	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	60da      	str	r2, [r3, #12]
}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b002      	add	sp, #8
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <LL_ADC_REG_SetSequencerChAdd>:
  *         
  *         (1) On STM32L0, parameter not available on all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	035b      	lsls	r3, r3, #13
 80005ea:	0b5b      	lsrs	r3, r3, #13
 80005ec:	431a      	orrs	r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b002      	add	sp, #8
 80005f8:	bd80      	pop	{r7, pc}

080005fa <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
 8000602:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	691b      	ldr	r3, [r3, #16]
 8000608:	2201      	movs	r2, #1
 800060a:	4393      	bics	r3, r2
 800060c:	001a      	movs	r2, r3
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	431a      	orrs	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	611a      	str	r2, [r3, #16]
}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	b002      	add	sp, #8
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	4a05      	ldr	r2, [pc, #20]	; (8000644 <LL_ADC_EnableInternalRegulator+0x24>)
 800062e:	4013      	ands	r3, r2
 8000630:	2280      	movs	r2, #128	; 0x80
 8000632:	0552      	lsls	r2, r2, #21
 8000634:	431a      	orrs	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	b002      	add	sp, #8
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	6fffffe8 	.word	0x6fffffe8

08000648 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	2204      	movs	r2, #4
 8000656:	4393      	bics	r3, r2
 8000658:	001a      	movs	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	605a      	str	r2, [r3, #4]
}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b002      	add	sp, #8
 8000664:	bd80      	pop	{r7, pc}

08000666 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSEQIE        LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b082      	sub	sp, #8
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	2208      	movs	r2, #8
 8000674:	4393      	bics	r3, r2
 8000676:	001a      	movs	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	605a      	str	r2, [r3, #4]
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b002      	add	sp, #8
 8000682:	bd80      	pop	{r7, pc}

08000684 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	2210      	movs	r2, #16
 8000694:	4393      	bics	r3, r2
 8000696:	001a      	movs	r2, r3
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	431a      	orrs	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	605a      	str	r2, [r3, #4]
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b002      	add	sp, #8
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	683a      	ldr	r2, [r7, #0]
 80006b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b002      	add	sp, #8
 80006be:	bd80      	pop	{r7, pc}

080006c0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80006ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	430a      	orrs	r2, r1
 80006d2:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80006d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	4013      	ands	r3, r2
 80006dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006de:	68fb      	ldr	r3, [r7, #12]
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b004      	add	sp, #16
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40021000 	.word	0x40021000

080006ec <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <LL_APB2_GRP1_EnableClock+0x28>)
 80006f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <LL_APB2_GRP1_EnableClock+0x28>)
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	430a      	orrs	r2, r1
 80006fe:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <LL_APB2_GRP1_EnableClock+0x28>)
 8000702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	4013      	ands	r3, r2
 8000708:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800070a:	68fb      	ldr	r3, [r7, #12]
}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	b004      	add	sp, #16
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000

08000718 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <LL_IOP_GRP1_EnableClock+0x28>)
 8000722:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <LL_IOP_GRP1_EnableClock+0x28>)
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	430a      	orrs	r2, r1
 800072a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <LL_IOP_GRP1_EnableClock+0x28>)
 800072e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	4013      	ands	r3, r2
 8000734:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000736:	68fb      	ldr	r3, [r7, #12]
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	b004      	add	sp, #16
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40021000 	.word	0x40021000

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000748:	f000 fbc8 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074c:	f000 f80c 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000750:	f000 fa52 	bl	8000bf8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000754:	f000 f918 	bl	8000988 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8000758:	f000 f9b6 	bl	8000ac8 <MX_SPI1_Init>
  MX_ADC_Init();
 800075c:	f000 f876 	bl	800084c <MX_ADC_Init>
  MX_RTC_Init();
 8000760:	f000 f97e 	bl	8000a60 <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000764:	e7fe      	b.n	8000764 <main+0x20>
	...

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b099      	sub	sp, #100	; 0x64
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	242c      	movs	r4, #44	; 0x2c
 8000770:	193b      	adds	r3, r7, r4
 8000772:	0018      	movs	r0, r3
 8000774:	2334      	movs	r3, #52	; 0x34
 8000776:	001a      	movs	r2, r3
 8000778:	2100      	movs	r1, #0
 800077a:	f002 f999 	bl	8002ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077e:	2318      	movs	r3, #24
 8000780:	18fb      	adds	r3, r7, r3
 8000782:	0018      	movs	r0, r3
 8000784:	2314      	movs	r3, #20
 8000786:	001a      	movs	r2, r3
 8000788:	2100      	movs	r1, #0
 800078a:	f002 f991 	bl	8002ab0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800078e:	003b      	movs	r3, r7
 8000790:	0018      	movs	r0, r3
 8000792:	2318      	movs	r3, #24
 8000794:	001a      	movs	r2, r3
 8000796:	2100      	movs	r1, #0
 8000798:	f002 f98a 	bl	8002ab0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800079c:	4b29      	ldr	r3, [pc, #164]	; (8000844 <SystemClock_Config+0xdc>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a29      	ldr	r2, [pc, #164]	; (8000848 <SystemClock_Config+0xe0>)
 80007a2:	401a      	ands	r2, r3
 80007a4:	4b27      	ldr	r3, [pc, #156]	; (8000844 <SystemClock_Config+0xdc>)
 80007a6:	2180      	movs	r1, #128	; 0x80
 80007a8:	0109      	lsls	r1, r1, #4
 80007aa:	430a      	orrs	r2, r1
 80007ac:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80007ae:	0021      	movs	r1, r4
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2218      	movs	r2, #24
 80007b4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2201      	movs	r2, #1
 80007ba:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2201      	movs	r2, #1
 80007c0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2200      	movs	r2, #0
 80007c6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	22a0      	movs	r2, #160	; 0xa0
 80007cc:	0212      	lsls	r2, r2, #8
 80007ce:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2200      	movs	r2, #0
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	0018      	movs	r0, r3
 80007da:	f000 fcc9 	bl	8001170 <HAL_RCC_OscConfig>
 80007de:	1e03      	subs	r3, r0, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80007e2:	f000 fa95 	bl	8000d10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e6:	2118      	movs	r1, #24
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	220f      	movs	r2, #15
 80007ec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2200      	movs	r2, #0
 80007f2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2100      	movs	r1, #0
 800080a:	0018      	movs	r0, r3
 800080c:	f001 f82a 	bl	8001864 <HAL_RCC_ClockConfig>
 8000810:	1e03      	subs	r3, r0, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000814:	f000 fa7c 	bl	8000d10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_RTC;
 8000818:	003b      	movs	r3, r7
 800081a:	2224      	movs	r2, #36	; 0x24
 800081c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800081e:	003b      	movs	r3, r7
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000824:	003b      	movs	r3, r7
 8000826:	2280      	movs	r2, #128	; 0x80
 8000828:	0292      	lsls	r2, r2, #10
 800082a:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800082c:	003b      	movs	r3, r7
 800082e:	0018      	movs	r0, r3
 8000830:	f001 f9c6 	bl	8001bc0 <HAL_RCCEx_PeriphCLKConfig>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000838:	f000 fa6a 	bl	8000d10 <Error_Handler>
  }
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	b019      	add	sp, #100	; 0x64
 8000842:	bd90      	pop	{r4, r7, pc}
 8000844:	40007000 	.word	0x40007000
 8000848:	ffffe7ff 	.word	0xffffe7ff

0800084c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b08b      	sub	sp, #44	; 0x2c
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000852:	2410      	movs	r4, #16
 8000854:	193b      	adds	r3, r7, r4
 8000856:	0018      	movs	r0, r3
 8000858:	2314      	movs	r3, #20
 800085a:	001a      	movs	r2, r3
 800085c:	2100      	movs	r1, #0
 800085e:	f002 f927 	bl	8002ab0 <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000862:	003b      	movs	r3, r7
 8000864:	0018      	movs	r0, r3
 8000866:	2310      	movs	r3, #16
 8000868:	001a      	movs	r2, r3
 800086a:	2100      	movs	r1, #0
 800086c:	f002 f920 	bl	8002ab0 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	0018      	movs	r0, r3
 8000876:	f7ff ff39 	bl	80006ec <LL_APB2_GRP1_EnableClock>

  /* ADC interrupt Init */
  NVIC_SetPriority(ADC1_COMP_IRQn, 0);
 800087a:	2100      	movs	r1, #0
 800087c:	200c      	movs	r0, #12
 800087e:	f7ff fdf1 	bl	8000464 <NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000882:	200c      	movs	r0, #12
 8000884:	f7ff fdd8 	bl	8000438 <NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_VREFINT);
 8000888:	4a3a      	ldr	r2, [pc, #232]	; (8000974 <MX_ADC_Init+0x128>)
 800088a:	4b3b      	ldr	r3, [pc, #236]	; (8000978 <MX_ADC_Init+0x12c>)
 800088c:	0011      	movs	r1, r2
 800088e:	0018      	movs	r0, r3
 8000890:	f7ff fea2 	bl	80005d8 <LL_ADC_REG_SetSequencerChAdd>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
 8000894:	2380      	movs	r3, #128	; 0x80
 8000896:	03db      	lsls	r3, r3, #15
 8000898:	4a38      	ldr	r2, [pc, #224]	; (800097c <MX_ADC_Init+0x130>)
 800089a:	0019      	movs	r1, r3
 800089c:	0010      	movs	r0, r2
 800089e:	f7ff fe63 	bl	8000568 <LL_ADC_SetCommonPathInternalCh>
  /** Common config
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80008a2:	0021      	movs	r1, r4
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	4a2c      	ldr	r2, [pc, #176]	; (8000978 <MX_ADC_Init+0x12c>)
 80008c6:	0019      	movs	r1, r3
 80008c8:	0010      	movs	r0, r2
 80008ca:	f001 fccf 	bl	800226c <LL_ADC_REG_Init>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80008ce:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <MX_ADC_Init+0x12c>)
 80008d0:	2100      	movs	r1, #0
 80008d2:	0018      	movs	r0, r3
 80008d4:	f7ff fe5c 	bl	8000590 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 80008d8:	4b27      	ldr	r3, [pc, #156]	; (8000978 <MX_ADC_Init+0x12c>)
 80008da:	2100      	movs	r1, #0
 80008dc:	0018      	movs	r0, r3
 80008de:	f7ff fe8c 	bl	80005fa <LL_ADC_SetOverSamplingScope>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 80008e2:	4b25      	ldr	r3, [pc, #148]	; (8000978 <MX_ADC_Init+0x12c>)
 80008e4:	2100      	movs	r1, #0
 80008e6:	0018      	movs	r0, r3
 80008e8:	f7ff fe64 	bl	80005b4 <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_LOW);
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	049b      	lsls	r3, r3, #18
 80008f0:	4a22      	ldr	r2, [pc, #136]	; (800097c <MX_ADC_Init+0x130>)
 80008f2:	0019      	movs	r1, r3
 80008f4:	0010      	movs	r0, r2
 80008f6:	f7ff fe23 	bl	8000540 <LL_ADC_SetCommonFrequencyMode>
  LL_ADC_DisableIT_EOC(ADC1);
 80008fa:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <MX_ADC_Init+0x12c>)
 80008fc:	0018      	movs	r0, r3
 80008fe:	f7ff fea3 	bl	8000648 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_ADC_Init+0x12c>)
 8000904:	0018      	movs	r0, r3
 8000906:	f7ff feae 	bl	8000666 <LL_ADC_DisableIT_EOS>

   /* Enable ADC internal voltage regulator */
   LL_ADC_EnableInternalRegulator(ADC1);
 800090a:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_ADC_Init+0x12c>)
 800090c:	0018      	movs	r0, r3
 800090e:	f7ff fe87 	bl	8000620 <LL_ADC_EnableInternalRegulator>
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000912:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <MX_ADC_Init+0x134>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	491b      	ldr	r1, [pc, #108]	; (8000984 <MX_ADC_Init+0x138>)
 8000918:	0018      	movs	r0, r3
 800091a:	f7ff fbf5 	bl	8000108 <__udivsi3>
 800091e:	0003      	movs	r3, r0
 8000920:	001a      	movs	r2, r3
 8000922:	0013      	movs	r3, r2
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	189b      	adds	r3, r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	210a      	movs	r1, #10
 800092c:	0018      	movs	r0, r3
 800092e:	f7ff fbeb 	bl	8000108 <__udivsi3>
 8000932:	0003      	movs	r3, r0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
   while(wait_loop_index != 0)
 8000936:	e002      	b.n	800093e <MX_ADC_Init+0xf2>
     {
   wait_loop_index--;
 8000938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093a:	3b01      	subs	r3, #1
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
   while(wait_loop_index != 0)
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	2b00      	cmp	r3, #0
 8000942:	d1f9      	bne.n	8000938 <MX_ADC_Init+0xec>
     }
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV1;
 8000944:	003b      	movs	r3, r7
 8000946:	22c0      	movs	r2, #192	; 0xc0
 8000948:	0612      	lsls	r2, r2, #24
 800094a:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800094c:	003b      	movs	r3, r7
 800094e:	2200      	movs	r2, #0
 8000950:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000952:	003b      	movs	r3, r7
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000958:	003b      	movs	r3, r7
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800095e:	003b      	movs	r3, r7
 8000960:	4a05      	ldr	r2, [pc, #20]	; (8000978 <MX_ADC_Init+0x12c>)
 8000962:	0019      	movs	r1, r3
 8000964:	0010      	movs	r0, r2
 8000966:	f001 fc4b 	bl	8002200 <LL_ADC_Init>
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b00b      	add	sp, #44	; 0x2c
 8000970:	bd90      	pop	{r4, r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	c4020000 	.word	0xc4020000
 8000978:	40012400 	.word	0x40012400
 800097c:	40012708 	.word	0x40012708
 8000980:	20000000 	.word	0x20000000
 8000984:	00030d40 	.word	0x00030d40

08000988 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b08d      	sub	sp, #52	; 0x34
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 800098e:	2418      	movs	r4, #24
 8000990:	193b      	adds	r3, r7, r4
 8000992:	0018      	movs	r0, r3
 8000994:	2318      	movs	r3, #24
 8000996:	001a      	movs	r2, r3
 8000998:	2100      	movs	r1, #0
 800099a:	f002 f889 	bl	8002ab0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	003b      	movs	r3, r7
 80009a0:	0018      	movs	r0, r3
 80009a2:	2318      	movs	r3, #24
 80009a4:	001a      	movs	r2, r3
 80009a6:	2100      	movs	r1, #0
 80009a8:	f002 f882 	bl	8002ab0 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_LPUART1);
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	02db      	lsls	r3, r3, #11
 80009b0:	0018      	movs	r0, r3
 80009b2:	f7ff fe85 	bl	80006c0 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80009b6:	2001      	movs	r0, #1
 80009b8:	f7ff feae 	bl	8000718 <LL_IOP_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PA0-CK_IN   ------> LPUART1_RX
  PA1   ------> LPUART1_TX
  */
  GPIO_InitStruct.Pin = TX_READY_Pin;
 80009bc:	003b      	movs	r3, r7
 80009be:	2201      	movs	r2, #1
 80009c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009c2:	003b      	movs	r3, r7
 80009c4:	2202      	movs	r2, #2
 80009c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80009c8:	003b      	movs	r3, r7
 80009ca:	2203      	movs	r2, #3
 80009cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009ce:	003b      	movs	r3, r7
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009d4:	003b      	movs	r3, r7
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80009da:	003b      	movs	r3, r7
 80009dc:	2206      	movs	r2, #6
 80009de:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(TX_READY_GPIO_Port, &GPIO_InitStruct);
 80009e0:	003a      	movs	r2, r7
 80009e2:	23a0      	movs	r3, #160	; 0xa0
 80009e4:	05db      	lsls	r3, r3, #23
 80009e6:	0011      	movs	r1, r2
 80009e8:	0018      	movs	r0, r3
 80009ea:	f001 fd2f 	bl	800244c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = TX_Pin;
 80009ee:	003b      	movs	r3, r7
 80009f0:	2202      	movs	r2, #2
 80009f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009f4:	003b      	movs	r3, r7
 80009f6:	2202      	movs	r2, #2
 80009f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	003b      	movs	r3, r7
 80009fc:	2203      	movs	r2, #3
 80009fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a00:	003b      	movs	r3, r7
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a06:	003b      	movs	r3, r7
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000a0c:	003b      	movs	r3, r7
 8000a0e:	2206      	movs	r2, #6
 8000a10:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8000a12:	003a      	movs	r2, r7
 8000a14:	23a0      	movs	r3, #160	; 0xa0
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	0011      	movs	r1, r2
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f001 fd16 	bl	800244c <LL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.BaudRate = 115200;
 8000a20:	193b      	adds	r3, r7, r4
 8000a22:	22e1      	movs	r2, #225	; 0xe1
 8000a24:	0252      	lsls	r2, r2, #9
 8000a26:	601a      	str	r2, [r3, #0]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 8000a28:	0021      	movs	r1, r4
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	605a      	str	r2, [r3, #4]
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2208      	movs	r2, #8
 8000a40:	611a      	str	r2, [r3, #16]
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	615a      	str	r2, [r3, #20]
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <MX_LPUART1_UART_Init+0xd4>)
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	0010      	movs	r0, r2
 8000a50:	f001 fdbc 	bl	80025cc <LL_LPUART_Init>
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b00d      	add	sp, #52	; 0x34
 8000a5a:	bd90      	pop	{r4, r7, pc}
 8000a5c:	40004800 	.word	0x40004800

08000a60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a64:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <MX_RTC_Init+0x60>)
 8000a66:	4a17      	ldr	r2, [pc, #92]	; (8000ac4 <MX_RTC_Init+0x64>)
 8000a68:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <MX_RTC_Init+0x60>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MX_RTC_Init+0x60>)
 8000a72:	227f      	movs	r2, #127	; 0x7f
 8000a74:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <MX_RTC_Init+0x60>)
 8000a78:	22ff      	movs	r2, #255	; 0xff
 8000a7a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a7c:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <MX_RTC_Init+0x60>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_RTC_Init+0x60>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a88:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <MX_RTC_Init+0x60>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_RTC_Init+0x60>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <MX_RTC_Init+0x60>)
 8000a96:	0018      	movs	r0, r3
 8000a98:	f001 f9ba 	bl	8001e10 <HAL_RTC_Init>
 8000a9c:	1e03      	subs	r3, r0, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000aa0:	f000 f936 	bl	8000d10 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_RTC_Init+0x60>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f001 faa0 	bl	8001ff0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000ab0:	1e03      	subs	r3, r0, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000ab4:	f000 f92c 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	20000074 	.word	0x20000074
 8000ac4:	40002800 	.word	0x40002800

08000ac8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b091      	sub	sp, #68	; 0x44
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000ace:	2418      	movs	r4, #24
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	2328      	movs	r3, #40	; 0x28
 8000ad6:	001a      	movs	r2, r3
 8000ad8:	2100      	movs	r1, #0
 8000ada:	f001 ffe9 	bl	8002ab0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	003b      	movs	r3, r7
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	2318      	movs	r3, #24
 8000ae4:	001a      	movs	r2, r3
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	f001 ffe2 	bl	8002ab0 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	015b      	lsls	r3, r3, #5
 8000af0:	0018      	movs	r0, r3
 8000af2:	f7ff fdfb 	bl	80006ec <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000af6:	2001      	movs	r0, #1
 8000af8:	f7ff fe0e 	bl	8000718 <LL_IOP_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000afc:	003b      	movs	r3, r7
 8000afe:	2220      	movs	r2, #32
 8000b00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b02:	003b      	movs	r3, r7
 8000b04:	2202      	movs	r2, #2
 8000b06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	003b      	movs	r3, r7
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b0e:	003b      	movs	r3, r7
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b14:	003b      	movs	r3, r7
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000b1a:	003b      	movs	r3, r7
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	003a      	movs	r2, r7
 8000b22:	23a0      	movs	r3, #160	; 0xa0
 8000b24:	05db      	lsls	r3, r3, #23
 8000b26:	0011      	movs	r1, r2
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f001 fc8f 	bl	800244c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000b2e:	003b      	movs	r3, r7
 8000b30:	2240      	movs	r2, #64	; 0x40
 8000b32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b34:	003b      	movs	r3, r7
 8000b36:	2202      	movs	r2, #2
 8000b38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3a:	003b      	movs	r3, r7
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b40:	003b      	movs	r3, r7
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b46:	003b      	movs	r3, r7
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000b4c:	003b      	movs	r3, r7
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	003a      	movs	r2, r7
 8000b54:	23a0      	movs	r3, #160	; 0xa0
 8000b56:	05db      	lsls	r3, r3, #23
 8000b58:	0011      	movs	r1, r2
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f001 fc76 	bl	800244c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000b60:	003b      	movs	r3, r7
 8000b62:	2280      	movs	r2, #128	; 0x80
 8000b64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b66:	003b      	movs	r3, r7
 8000b68:	2202      	movs	r2, #2
 8000b6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	003b      	movs	r3, r7
 8000b6e:	2203      	movs	r2, #3
 8000b70:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b72:	003b      	movs	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b78:	003b      	movs	r3, r7
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000b7e:	003b      	movs	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	003a      	movs	r2, r7
 8000b86:	23a0      	movs	r3, #160	; 0xa0
 8000b88:	05db      	lsls	r3, r3, #23
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f001 fc5d 	bl	800244c <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	2282      	movs	r2, #130	; 0x82
 8000b9c:	0052      	lsls	r2, r2, #1
 8000b9e:	605a      	str	r2, [r3, #4]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000ba0:	0021      	movs	r1, r4
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	2280      	movs	r2, #128	; 0x80
 8000bb8:	0092      	lsls	r2, r2, #2
 8000bba:	615a      	str	r2, [r3, #20]
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	61da      	str	r2, [r3, #28]
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2200      	movs	r2, #0
 8000bcc:	621a      	str	r2, [r3, #32]
  SPI_InitStruct.CRCPoly = 7;
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	625a      	str	r2, [r3, #36]	; 0x24
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <MX_SPI1_Init+0x12c>)
 8000bd8:	0019      	movs	r1, r3
 8000bda:	0010      	movs	r0, r2
 8000bdc:	f001 feee 	bl	80029bc <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <MX_SPI1_Init+0x12c>)
 8000be2:	2100      	movs	r1, #0
 8000be4:	0018      	movs	r0, r3
 8000be6:	f7ff fd4d 	bl	8000684 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b011      	add	sp, #68	; 0x44
 8000bf0:	bd90      	pop	{r4, r7, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	40013000 	.word	0x40013000

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	003b      	movs	r3, r7
 8000c00:	0018      	movs	r0, r3
 8000c02:	2318      	movs	r3, #24
 8000c04:	001a      	movs	r2, r3
 8000c06:	2100      	movs	r1, #0
 8000c08:	f001 ff52 	bl	8002ab0 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f7ff fd83 	bl	8000718 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000c12:	2002      	movs	r0, #2
 8000c14:	f7ff fd80 	bl	8000718 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(BME_CS_GPIO_Port, BME_CS_Pin);
 8000c18:	23a0      	movs	r3, #160	; 0xa0
 8000c1a:	05db      	lsls	r3, r3, #23
 8000c1c:	2108      	movs	r1, #8
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f7ff fd42 	bl	80006a8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RFM_CS_GPIO_Port, RFM_CS_Pin);
 8000c24:	23a0      	movs	r3, #160	; 0xa0
 8000c26:	05db      	lsls	r3, r3, #23
 8000c28:	2110      	movs	r1, #16
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff fd3c 	bl	80006a8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	005a      	lsls	r2, r3, #1
 8000c34:	23a0      	movs	r3, #160	; 0xa0
 8000c36:	05db      	lsls	r3, r3, #23
 8000c38:	0011      	movs	r1, r2
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f7ff fd34 	bl	80006a8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = BME_CS_Pin;
 8000c40:	003b      	movs	r3, r7
 8000c42:	2208      	movs	r2, #8
 8000c44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c46:	003b      	movs	r3, r7
 8000c48:	2201      	movs	r2, #1
 8000c4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c4c:	003b      	movs	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c52:	003b      	movs	r3, r7
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c58:	003b      	movs	r3, r7
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BME_CS_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	003a      	movs	r2, r7
 8000c60:	23a0      	movs	r3, #160	; 0xa0
 8000c62:	05db      	lsls	r3, r3, #23
 8000c64:	0011      	movs	r1, r2
 8000c66:	0018      	movs	r0, r3
 8000c68:	f001 fbf0 	bl	800244c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RFM_CS_Pin;
 8000c6c:	003b      	movs	r3, r7
 8000c6e:	2210      	movs	r2, #16
 8000c70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c72:	003b      	movs	r3, r7
 8000c74:	2201      	movs	r2, #1
 8000c76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c78:	003b      	movs	r3, r7
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c7e:	003b      	movs	r3, r7
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c84:	003b      	movs	r3, r7
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(RFM_CS_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	003a      	movs	r2, r7
 8000c8c:	23a0      	movs	r3, #160	; 0xa0
 8000c8e:	05db      	lsls	r3, r3, #23
 8000c90:	0011      	movs	r1, r2
 8000c92:	0018      	movs	r0, r3
 8000c94:	f001 fbda 	bl	800244c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 8000c98:	003b      	movs	r3, r7
 8000c9a:	2280      	movs	r2, #128	; 0x80
 8000c9c:	0052      	lsls	r2, r2, #1
 8000c9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ca0:	003b      	movs	r3, r7
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ca6:	003b      	movs	r3, r7
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cac:	003b      	movs	r3, r7
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cb2:	003b      	movs	r3, r7
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	003a      	movs	r2, r7
 8000cba:	23a0      	movs	r3, #160	; 0xa0
 8000cbc:	05db      	lsls	r3, r3, #23
 8000cbe:	0011      	movs	r1, r2
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f001 fbc3 	bl	800244c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RFM_D0_Pin;
 8000cc6:	003b      	movs	r3, r7
 8000cc8:	2220      	movs	r2, #32
 8000cca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ccc:	003b      	movs	r3, r7
 8000cce:	2200      	movs	r2, #0
 8000cd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cd2:	003b      	movs	r3, r7
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(RFM_D0_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	003b      	movs	r3, r7
 8000cda:	4a0c      	ldr	r2, [pc, #48]	; (8000d0c <MX_GPIO_Init+0x114>)
 8000cdc:	0019      	movs	r1, r3
 8000cde:	0010      	movs	r0, r2
 8000ce0:	f001 fbb4 	bl	800244c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RFM_D5_Pin;
 8000ce4:	003b      	movs	r3, r7
 8000ce6:	2240      	movs	r2, #64	; 0x40
 8000ce8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000cea:	003b      	movs	r3, r7
 8000cec:	2200      	movs	r2, #0
 8000cee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cf0:	003b      	movs	r3, r7
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(RFM_D5_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	003b      	movs	r3, r7
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <MX_GPIO_Init+0x114>)
 8000cfa:	0019      	movs	r1, r3
 8000cfc:	0010      	movs	r0, r2
 8000cfe:	f001 fba5 	bl	800244c <LL_GPIO_Init>

}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b006      	add	sp, #24
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	50000400 	.word	0x50000400

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <HAL_MspInit+0x24>)
 8000d22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_MspInit+0x24>)
 8000d26:	2101      	movs	r1, #1
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <HAL_MspInit+0x24>)
 8000d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_MspInit+0x24>)
 8000d32:	2180      	movs	r1, #128	; 0x80
 8000d34:	0549      	lsls	r1, r1, #21
 8000d36:	430a      	orrs	r2, r1
 8000d38:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40021000 	.word	0x40021000

08000d44 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <HAL_RTC_MspInit+0x38>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d10e      	bne.n	8000d74 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <HAL_RTC_MspInit+0x3c>)
 8000d58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_RTC_MspInit+0x3c>)
 8000d5c:	2180      	movs	r1, #128	; 0x80
 8000d5e:	02c9      	lsls	r1, r1, #11
 8000d60:	430a      	orrs	r2, r1
 8000d62:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2100      	movs	r1, #0
 8000d68:	2002      	movs	r0, #2
 8000d6a:	f000 f9cf 	bl	800110c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000d6e:	2002      	movs	r0, #2
 8000d70:	f000 f9e1 	bl	8001136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b002      	add	sp, #8
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40002800 	.word	0x40002800
 8000d80:	40021000 	.word	0x40021000

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d88:	46c0      	nop			; (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <HardFault_Handler+0x4>

08000d94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dac:	f000 f8ea 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <RTC_IRQHandler+0x14>)
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f001 f9dc 	bl	800217c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	20000074 	.word	0x20000074

08000dd0 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END ADC1_COMP_IRQn 0 */

  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000de0:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <SystemInit+0x64>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <SystemInit+0x64>)
 8000de6:	2180      	movs	r1, #128	; 0x80
 8000de8:	0049      	lsls	r1, r1, #1
 8000dea:	430a      	orrs	r2, r1
 8000dec:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <SystemInit+0x64>)
 8000df0:	68da      	ldr	r2, [r3, #12]
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <SystemInit+0x64>)
 8000df4:	4913      	ldr	r1, [pc, #76]	; (8000e44 <SystemInit+0x68>)
 8000df6:	400a      	ands	r2, r1
 8000df8:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <SystemInit+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <SystemInit+0x64>)
 8000e00:	4911      	ldr	r1, [pc, #68]	; (8000e48 <SystemInit+0x6c>)
 8000e02:	400a      	ands	r2, r1
 8000e04:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <SystemInit+0x64>)
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <SystemInit+0x64>)
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	438a      	bics	r2, r1
 8000e10:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <SystemInit+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <SystemInit+0x64>)
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <SystemInit+0x70>)
 8000e1a:	400a      	ands	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <SystemInit+0x64>)
 8000e20:	68da      	ldr	r2, [r3, #12]
 8000e22:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <SystemInit+0x64>)
 8000e24:	490a      	ldr	r1, [pc, #40]	; (8000e50 <SystemInit+0x74>)
 8000e26:	400a      	ands	r2, r1
 8000e28:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e2a:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <SystemInit+0x64>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <SystemInit+0x78>)
 8000e32:	2280      	movs	r2, #128	; 0x80
 8000e34:	0512      	lsls	r2, r2, #20
 8000e36:	609a      	str	r2, [r3, #8]
#endif
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	40021000 	.word	0x40021000
 8000e44:	88ff400c 	.word	0x88ff400c
 8000e48:	fef6fff6 	.word	0xfef6fff6
 8000e4c:	fffbffff 	.word	0xfffbffff
 8000e50:	ff02ffff 	.word	0xff02ffff
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000e58:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000e5a:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000e5c:	4813      	ldr	r0, [pc, #76]	; (8000eac <LoopForever+0x6>)
    LDR R1, [R0]
 8000e5e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000e60:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000e62:	4a13      	ldr	r2, [pc, #76]	; (8000eb0 <LoopForever+0xa>)
    CMP R1, R2
 8000e64:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000e66:	d105      	bne.n	8000e74 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000e68:	4812      	ldr	r0, [pc, #72]	; (8000eb4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000e6a:	4913      	ldr	r1, [pc, #76]	; (8000eb8 <LoopForever+0x12>)
    STR R1, [R0]
 8000e6c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000e6e:	4813      	ldr	r0, [pc, #76]	; (8000ebc <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000e70:	4913      	ldr	r1, [pc, #76]	; (8000ec0 <LoopForever+0x1a>)
    STR R1, [R0]
 8000e72:	6001      	str	r1, [r0, #0]

08000e74 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000e74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e76:	e003      	b.n	8000e80 <LoopCopyDataInit>

08000e78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <LoopForever+0x1e>)
  ldr  r3, [r3, r1]
 8000e7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e7e:	3104      	adds	r1, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e80:	4811      	ldr	r0, [pc, #68]	; (8000ec8 <LoopForever+0x22>)
  ldr  r3, =_edata
 8000e82:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <LoopForever+0x26>)
  adds  r2, r0, r1
 8000e84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e88:	d3f6      	bcc.n	8000e78 <CopyDataInit>
  ldr  r2, =_sbss
 8000e8a:	4a11      	ldr	r2, [pc, #68]	; (8000ed0 <LoopForever+0x2a>)
  b  LoopFillZerobss
 8000e8c:	e002      	b.n	8000e94 <LoopFillZerobss>

08000e8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000e8e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000e90:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e92:	3204      	adds	r2, #4

08000e94 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <LoopForever+0x2e>)
  cmp  r2, r3
 8000e96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e98:	d3f9      	bcc.n	8000e8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e9a:	f7ff ff9f 	bl	8000ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f001 fde3 	bl	8002a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea2:	f7ff fc4f 	bl	8000744 <main>

08000ea6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ea6:	e7fe      	b.n	8000ea6 <LoopForever>
   ldr   r0, =_estack
 8000ea8:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000eac:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000eb0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000eb4:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000eb8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000ebc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000ec0:	00000000 	.word	0x00000000
  ldr  r3, =_sidata
 8000ec4:	08002b0c 	.word	0x08002b0c
  ldr  r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ecc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000ed0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000ed4:	200000dc 	.word	0x200000dc

08000ed8 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <DMA1_Channel1_IRQHandler>
	...

08000edc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <HAL_Init+0x3c>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <HAL_Init+0x3c>)
 8000eee:	2140      	movs	r1, #64	; 0x40
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f000 f811 	bl	8000f1c <HAL_InitTick>
 8000efa:	1e03      	subs	r3, r0, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	2201      	movs	r2, #1
 8000f02:	701a      	strb	r2, [r3, #0]
 8000f04:	e001      	b.n	8000f0a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f06:	f7ff ff09 	bl	8000d1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	781b      	ldrb	r3, [r3, #0]
}
 8000f0e:	0018      	movs	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b002      	add	sp, #8
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	40022000 	.word	0x40022000

08000f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <HAL_InitTick+0x5c>)
 8000f26:	681c      	ldr	r4, [r3, #0]
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <HAL_InitTick+0x60>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	0019      	movs	r1, r3
 8000f2e:	23fa      	movs	r3, #250	; 0xfa
 8000f30:	0098      	lsls	r0, r3, #2
 8000f32:	f7ff f8e9 	bl	8000108 <__udivsi3>
 8000f36:	0003      	movs	r3, r0
 8000f38:	0019      	movs	r1, r3
 8000f3a:	0020      	movs	r0, r4
 8000f3c:	f7ff f8e4 	bl	8000108 <__udivsi3>
 8000f40:	0003      	movs	r3, r0
 8000f42:	0018      	movs	r0, r3
 8000f44:	f000 f907 	bl	8001156 <HAL_SYSTICK_Config>
 8000f48:	1e03      	subs	r3, r0, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e00f      	b.n	8000f70 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d80b      	bhi.n	8000f6e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	425b      	negs	r3, r3
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f000 f8d4 	bl	800110c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_InitTick+0x64>)
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	0018      	movs	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b003      	add	sp, #12
 8000f76:	bd90      	pop	{r4, r7, pc}
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	20000004 	.word	0x20000004

08000f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HAL_IncTick+0x1c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	18d2      	adds	r2, r2, r3
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f96:	601a      	str	r2, [r3, #0]
}
 8000f98:	46c0      	nop			; (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	200000d8 	.word	0x200000d8

08000fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b02      	ldr	r3, [pc, #8]	; (8000fb8 <HAL_GetTick+0x10>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	200000d8 	.word	0x200000d8

08000fbc <NVIC_EnableIRQ>:
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	1dfb      	adds	r3, r7, #7
 8000fc6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000fc8:	1dfb      	adds	r3, r7, #7
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	001a      	movs	r2, r3
 8000fce:	231f      	movs	r3, #31
 8000fd0:	401a      	ands	r2, r3
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <NVIC_EnableIRQ+0x28>)
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4091      	lsls	r1, r2
 8000fd8:	000a      	movs	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]
}
 8000fdc:	46c0      	nop			; (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b002      	add	sp, #8
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	e000e100 	.word	0xe000e100

08000fe8 <NVIC_SetPriority>:
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	0002      	movs	r2, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8000ffc:	d932      	bls.n	8001064 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ffe:	4a2f      	ldr	r2, [pc, #188]	; (80010bc <NVIC_SetPriority+0xd4>)
 8001000:	1dfb      	adds	r3, r7, #7
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	0019      	movs	r1, r3
 8001006:	230f      	movs	r3, #15
 8001008:	400b      	ands	r3, r1
 800100a:	3b08      	subs	r3, #8
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3306      	adds	r3, #6
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	18d3      	adds	r3, r2, r3
 8001014:	3304      	adds	r3, #4
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	1dfa      	adds	r2, r7, #7
 800101a:	7812      	ldrb	r2, [r2, #0]
 800101c:	0011      	movs	r1, r2
 800101e:	2203      	movs	r2, #3
 8001020:	400a      	ands	r2, r1
 8001022:	00d2      	lsls	r2, r2, #3
 8001024:	21ff      	movs	r1, #255	; 0xff
 8001026:	4091      	lsls	r1, r2
 8001028:	000a      	movs	r2, r1
 800102a:	43d2      	mvns	r2, r2
 800102c:	401a      	ands	r2, r3
 800102e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	019b      	lsls	r3, r3, #6
 8001034:	22ff      	movs	r2, #255	; 0xff
 8001036:	401a      	ands	r2, r3
 8001038:	1dfb      	adds	r3, r7, #7
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	0018      	movs	r0, r3
 800103e:	2303      	movs	r3, #3
 8001040:	4003      	ands	r3, r0
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001046:	481d      	ldr	r0, [pc, #116]	; (80010bc <NVIC_SetPriority+0xd4>)
 8001048:	1dfb      	adds	r3, r7, #7
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	001c      	movs	r4, r3
 800104e:	230f      	movs	r3, #15
 8001050:	4023      	ands	r3, r4
 8001052:	3b08      	subs	r3, #8
 8001054:	089b      	lsrs	r3, r3, #2
 8001056:	430a      	orrs	r2, r1
 8001058:	3306      	adds	r3, #6
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	18c3      	adds	r3, r0, r3
 800105e:	3304      	adds	r3, #4
 8001060:	601a      	str	r2, [r3, #0]
}
 8001062:	e027      	b.n	80010b4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001064:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <NVIC_SetPriority+0xd8>)
 8001066:	1dfb      	adds	r3, r7, #7
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b25b      	sxtb	r3, r3
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	33c0      	adds	r3, #192	; 0xc0
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	589b      	ldr	r3, [r3, r2]
 8001074:	1dfa      	adds	r2, r7, #7
 8001076:	7812      	ldrb	r2, [r2, #0]
 8001078:	0011      	movs	r1, r2
 800107a:	2203      	movs	r2, #3
 800107c:	400a      	ands	r2, r1
 800107e:	00d2      	lsls	r2, r2, #3
 8001080:	21ff      	movs	r1, #255	; 0xff
 8001082:	4091      	lsls	r1, r2
 8001084:	000a      	movs	r2, r1
 8001086:	43d2      	mvns	r2, r2
 8001088:	401a      	ands	r2, r3
 800108a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	019b      	lsls	r3, r3, #6
 8001090:	22ff      	movs	r2, #255	; 0xff
 8001092:	401a      	ands	r2, r3
 8001094:	1dfb      	adds	r3, r7, #7
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	0018      	movs	r0, r3
 800109a:	2303      	movs	r3, #3
 800109c:	4003      	ands	r3, r0
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010a2:	4807      	ldr	r0, [pc, #28]	; (80010c0 <NVIC_SetPriority+0xd8>)
 80010a4:	1dfb      	adds	r3, r7, #7
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	430a      	orrs	r2, r1
 80010ae:	33c0      	adds	r3, #192	; 0xc0
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	501a      	str	r2, [r3, r0]
}
 80010b4:	46c0      	nop			; (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b003      	add	sp, #12
 80010ba:	bd90      	pop	{r4, r7, pc}
 80010bc:	e000ed00 	.word	0xe000ed00
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	4a0c      	ldr	r2, [pc, #48]	; (8001104 <SysTick_Config+0x40>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d901      	bls.n	80010da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d6:	2301      	movs	r3, #1
 80010d8:	e010      	b.n	80010fc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <SysTick_Config+0x44>)
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	3a01      	subs	r2, #1
 80010e0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e2:	2301      	movs	r3, #1
 80010e4:	425b      	negs	r3, r3
 80010e6:	2103      	movs	r1, #3
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff ff7d 	bl	8000fe8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <SysTick_Config+0x44>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <SysTick_Config+0x44>)
 80010f6:	2207      	movs	r2, #7
 80010f8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	0018      	movs	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	b002      	add	sp, #8
 8001102:	bd80      	pop	{r7, pc}
 8001104:	00ffffff 	.word	0x00ffffff
 8001108:	e000e010 	.word	0xe000e010

0800110c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	210f      	movs	r1, #15
 8001118:	187b      	adds	r3, r7, r1
 800111a:	1c02      	adds	r2, r0, #0
 800111c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	187b      	adds	r3, r7, r1
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b25b      	sxtb	r3, r3
 8001126:	0011      	movs	r1, r2
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff ff5d 	bl	8000fe8 <NVIC_SetPriority>
}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b004      	add	sp, #16
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	0002      	movs	r2, r0
 800113e:	1dfb      	adds	r3, r7, #7
 8001140:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b25b      	sxtb	r3, r3
 8001148:	0018      	movs	r0, r3
 800114a:	f7ff ff37 	bl	8000fbc <NVIC_EnableIRQ>
}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	46bd      	mov	sp, r7
 8001152:	b002      	add	sp, #8
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	0018      	movs	r0, r3
 8001162:	f7ff ffaf 	bl	80010c4 <SysTick_Config>
 8001166:	0003      	movs	r3, r0
}
 8001168:	0018      	movs	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	b002      	add	sp, #8
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001170:	b5b0      	push	{r4, r5, r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d102      	bne.n	8001184 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	f000 fb6a 	bl	8001858 <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001184:	4bc7      	ldr	r3, [pc, #796]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	220c      	movs	r2, #12
 800118a:	4013      	ands	r3, r2
 800118c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800118e:	4bc5      	ldr	r3, [pc, #788]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	025b      	lsls	r3, r3, #9
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2201      	movs	r2, #1
 80011a0:	4013      	ands	r3, r2
 80011a2:	d100      	bne.n	80011a6 <HAL_RCC_OscConfig+0x36>
 80011a4:	e07d      	b.n	80012a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	2b08      	cmp	r3, #8
 80011aa:	d007      	beq.n	80011bc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	2b0c      	cmp	r3, #12
 80011b0:	d112      	bne.n	80011d8 <HAL_RCC_OscConfig+0x68>
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d10d      	bne.n	80011d8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011bc:	4bb9      	ldr	r3, [pc, #740]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	029b      	lsls	r3, r3, #10
 80011c4:	4013      	ands	r3, r2
 80011c6:	d100      	bne.n	80011ca <HAL_RCC_OscConfig+0x5a>
 80011c8:	e06a      	b.n	80012a0 <HAL_RCC_OscConfig+0x130>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d166      	bne.n	80012a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f000 fb40 	bl	8001858 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	025b      	lsls	r3, r3, #9
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d107      	bne.n	80011f4 <HAL_RCC_OscConfig+0x84>
 80011e4:	4baf      	ldr	r3, [pc, #700]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4bae      	ldr	r3, [pc, #696]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 80011ea:	2180      	movs	r1, #128	; 0x80
 80011ec:	0249      	lsls	r1, r1, #9
 80011ee:	430a      	orrs	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	e027      	b.n	8001244 <HAL_RCC_OscConfig+0xd4>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	23a0      	movs	r3, #160	; 0xa0
 80011fa:	02db      	lsls	r3, r3, #11
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d10e      	bne.n	800121e <HAL_RCC_OscConfig+0xae>
 8001200:	4ba8      	ldr	r3, [pc, #672]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4ba7      	ldr	r3, [pc, #668]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 8001206:	2180      	movs	r1, #128	; 0x80
 8001208:	02c9      	lsls	r1, r1, #11
 800120a:	430a      	orrs	r2, r1
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	4ba5      	ldr	r3, [pc, #660]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4ba4      	ldr	r3, [pc, #656]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 8001214:	2180      	movs	r1, #128	; 0x80
 8001216:	0249      	lsls	r1, r1, #9
 8001218:	430a      	orrs	r2, r1
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	e012      	b.n	8001244 <HAL_RCC_OscConfig+0xd4>
 800121e:	4ba1      	ldr	r3, [pc, #644]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4ba0      	ldr	r3, [pc, #640]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 8001224:	49a0      	ldr	r1, [pc, #640]	; (80014a8 <HAL_RCC_OscConfig+0x338>)
 8001226:	400a      	ands	r2, r1
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	4b9e      	ldr	r3, [pc, #632]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	025b      	lsls	r3, r3, #9
 8001232:	4013      	ands	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4b9a      	ldr	r3, [pc, #616]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b99      	ldr	r3, [pc, #612]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 800123e:	499b      	ldr	r1, [pc, #620]	; (80014ac <HAL_RCC_OscConfig+0x33c>)
 8001240:	400a      	ands	r2, r1
 8001242:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d014      	beq.n	8001276 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff feac 	bl	8000fa8 <HAL_GetTick>
 8001250:	0003      	movs	r3, r0
 8001252:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001256:	f7ff fea7 	bl	8000fa8 <HAL_GetTick>
 800125a:	0002      	movs	r2, r0
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b64      	cmp	r3, #100	; 0x64
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e2f7      	b.n	8001858 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001268:	4b8e      	ldr	r3, [pc, #568]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	029b      	lsls	r3, r3, #10
 8001270:	4013      	ands	r3, r2
 8001272:	d0f0      	beq.n	8001256 <HAL_RCC_OscConfig+0xe6>
 8001274:	e015      	b.n	80012a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7ff fe97 	bl	8000fa8 <HAL_GetTick>
 800127a:	0003      	movs	r3, r0
 800127c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001280:	f7ff fe92 	bl	8000fa8 <HAL_GetTick>
 8001284:	0002      	movs	r2, r0
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b64      	cmp	r3, #100	; 0x64
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e2e2      	b.n	8001858 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001292:	4b84      	ldr	r3, [pc, #528]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	029b      	lsls	r3, r3, #10
 800129a:	4013      	ands	r3, r2
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x110>
 800129e:	e000      	b.n	80012a2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2202      	movs	r2, #2
 80012a8:	4013      	ands	r3, r2
 80012aa:	d100      	bne.n	80012ae <HAL_RCC_OscConfig+0x13e>
 80012ac:	e098      	b.n	80013e0 <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80012b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b6:	2220      	movs	r2, #32
 80012b8:	4013      	ands	r3, r2
 80012ba:	d009      	beq.n	80012d0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80012bc:	4b79      	ldr	r3, [pc, #484]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b78      	ldr	r3, [pc, #480]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 80012c2:	2120      	movs	r1, #32
 80012c4:	430a      	orrs	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	2220      	movs	r2, #32
 80012cc:	4393      	bics	r3, r2
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d005      	beq.n	80012e2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	2b0c      	cmp	r3, #12
 80012da:	d13d      	bne.n	8001358 <HAL_RCC_OscConfig+0x1e8>
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d13a      	bne.n	8001358 <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80012e2:	4b70      	ldr	r3, [pc, #448]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2204      	movs	r2, #4
 80012e8:	4013      	ands	r3, r2
 80012ea:	d004      	beq.n	80012f6 <HAL_RCC_OscConfig+0x186>
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e2b0      	b.n	8001858 <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f6:	4b6b      	ldr	r3, [pc, #428]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	4a6d      	ldr	r2, [pc, #436]	; (80014b0 <HAL_RCC_OscConfig+0x340>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	0019      	movs	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	021a      	lsls	r2, r3, #8
 8001306:	4b67      	ldr	r3, [pc, #412]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 8001308:	430a      	orrs	r2, r1
 800130a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800130c:	4b65      	ldr	r3, [pc, #404]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2209      	movs	r2, #9
 8001312:	4393      	bics	r3, r2
 8001314:	0019      	movs	r1, r3
 8001316:	4b63      	ldr	r3, [pc, #396]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 8001318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800131a:	430a      	orrs	r2, r1
 800131c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800131e:	f000 fbcb 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 8001322:	0001      	movs	r1, r0
 8001324:	4b5f      	ldr	r3, [pc, #380]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	091b      	lsrs	r3, r3, #4
 800132a:	220f      	movs	r2, #15
 800132c:	4013      	ands	r3, r2
 800132e:	4a61      	ldr	r2, [pc, #388]	; (80014b4 <HAL_RCC_OscConfig+0x344>)
 8001330:	5cd3      	ldrb	r3, [r2, r3]
 8001332:	000a      	movs	r2, r1
 8001334:	40da      	lsrs	r2, r3
 8001336:	4b60      	ldr	r3, [pc, #384]	; (80014b8 <HAL_RCC_OscConfig+0x348>)
 8001338:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800133a:	2513      	movs	r5, #19
 800133c:	197c      	adds	r4, r7, r5
 800133e:	2000      	movs	r0, #0
 8001340:	f7ff fdec 	bl	8000f1c <HAL_InitTick>
 8001344:	0003      	movs	r3, r0
 8001346:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001348:	197b      	adds	r3, r7, r5
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d047      	beq.n	80013e0 <HAL_RCC_OscConfig+0x270>
      {
        return status;
 8001350:	2313      	movs	r3, #19
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	e27f      	b.n	8001858 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	2b00      	cmp	r3, #0
 800135c:	d027      	beq.n	80013ae <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800135e:	4b51      	ldr	r3, [pc, #324]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2209      	movs	r2, #9
 8001364:	4393      	bics	r3, r2
 8001366:	0019      	movs	r1, r3
 8001368:	4b4e      	ldr	r3, [pc, #312]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 800136a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800136c:	430a      	orrs	r2, r1
 800136e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fe1a 	bl	8000fa8 <HAL_GetTick>
 8001374:	0003      	movs	r3, r0
 8001376:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800137a:	f7ff fe15 	bl	8000fa8 <HAL_GetTick>
 800137e:	0002      	movs	r2, r0
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e265      	b.n	8001858 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800138c:	4b45      	ldr	r3, [pc, #276]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2204      	movs	r2, #4
 8001392:	4013      	ands	r3, r2
 8001394:	d0f1      	beq.n	800137a <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	4b43      	ldr	r3, [pc, #268]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	4a45      	ldr	r2, [pc, #276]	; (80014b0 <HAL_RCC_OscConfig+0x340>)
 800139c:	4013      	ands	r3, r2
 800139e:	0019      	movs	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	021a      	lsls	r2, r3, #8
 80013a6:	4b3f      	ldr	r3, [pc, #252]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 80013a8:	430a      	orrs	r2, r1
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	e018      	b.n	80013e0 <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ae:	4b3d      	ldr	r3, [pc, #244]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 80013b4:	2101      	movs	r1, #1
 80013b6:	438a      	bics	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ba:	f7ff fdf5 	bl	8000fa8 <HAL_GetTick>
 80013be:	0003      	movs	r3, r0
 80013c0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c4:	f7ff fdf0 	bl	8000fa8 <HAL_GetTick>
 80013c8:	0002      	movs	r2, r0
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e240      	b.n	8001858 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013d6:	4b33      	ldr	r3, [pc, #204]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2204      	movs	r2, #4
 80013dc:	4013      	ands	r3, r2
 80013de:	d1f1      	bne.n	80013c4 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2210      	movs	r2, #16
 80013e6:	4013      	ands	r3, r2
 80013e8:	d100      	bne.n	80013ec <HAL_RCC_OscConfig+0x27c>
 80013ea:	e09e      	b.n	800152a <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d13f      	bne.n	8001472 <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013f2:	4b2c      	ldr	r3, [pc, #176]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4013      	ands	r3, r2
 80013fc:	d005      	beq.n	800140a <HAL_RCC_OscConfig+0x29a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e226      	b.n	8001858 <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800140a:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	4a2b      	ldr	r2, [pc, #172]	; (80014bc <HAL_RCC_OscConfig+0x34c>)
 8001410:	4013      	ands	r3, r2
 8001412:	0019      	movs	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1a      	ldr	r2, [r3, #32]
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 800141a:	430a      	orrs	r2, r1
 800141c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	0a19      	lsrs	r1, r3, #8
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	061a      	lsls	r2, r3, #24
 800142c:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 800142e:	430a      	orrs	r2, r1
 8001430:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	0b5b      	lsrs	r3, r3, #13
 8001438:	3301      	adds	r3, #1
 800143a:	2280      	movs	r2, #128	; 0x80
 800143c:	0212      	lsls	r2, r2, #8
 800143e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001440:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	091b      	lsrs	r3, r3, #4
 8001446:	210f      	movs	r1, #15
 8001448:	400b      	ands	r3, r1
 800144a:	491a      	ldr	r1, [pc, #104]	; (80014b4 <HAL_RCC_OscConfig+0x344>)
 800144c:	5ccb      	ldrb	r3, [r1, r3]
 800144e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_RCC_OscConfig+0x348>)
 8001452:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001454:	2513      	movs	r5, #19
 8001456:	197c      	adds	r4, r7, r5
 8001458:	2000      	movs	r0, #0
 800145a:	f7ff fd5f 	bl	8000f1c <HAL_InitTick>
 800145e:	0003      	movs	r3, r0
 8001460:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001462:	197b      	adds	r3, r7, r5
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d05f      	beq.n	800152a <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 800146a:	2313      	movs	r3, #19
 800146c:	18fb      	adds	r3, r7, r3
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	e1f2      	b.n	8001858 <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d03d      	beq.n	80014f6 <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <HAL_RCC_OscConfig+0x334>)
 8001480:	2180      	movs	r1, #128	; 0x80
 8001482:	0049      	lsls	r1, r1, #1
 8001484:	430a      	orrs	r2, r1
 8001486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fd8e 	bl	8000fa8 <HAL_GetTick>
 800148c:	0003      	movs	r3, r0
 800148e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001490:	e016      	b.n	80014c0 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001492:	f7ff fd89 	bl	8000fa8 <HAL_GetTick>
 8001496:	0002      	movs	r2, r0
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d90f      	bls.n	80014c0 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e1d9      	b.n	8001858 <HAL_RCC_OscConfig+0x6e8>
 80014a4:	40021000 	.word	0x40021000
 80014a8:	fffeffff 	.word	0xfffeffff
 80014ac:	fffbffff 	.word	0xfffbffff
 80014b0:	ffffe0ff 	.word	0xffffe0ff
 80014b4:	08002ad8 	.word	0x08002ad8
 80014b8:	20000000 	.word	0x20000000
 80014bc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014c0:	4bca      	ldr	r3, [pc, #808]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4013      	ands	r3, r2
 80014ca:	d0e2      	beq.n	8001492 <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014cc:	4bc7      	ldr	r3, [pc, #796]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	4ac7      	ldr	r2, [pc, #796]	; (80017f0 <HAL_RCC_OscConfig+0x680>)
 80014d2:	4013      	ands	r3, r2
 80014d4:	0019      	movs	r1, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a1a      	ldr	r2, [r3, #32]
 80014da:	4bc4      	ldr	r3, [pc, #784]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 80014dc:	430a      	orrs	r2, r1
 80014de:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014e0:	4bc2      	ldr	r3, [pc, #776]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	0a19      	lsrs	r1, r3, #8
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	061a      	lsls	r2, r3, #24
 80014ee:	4bbf      	ldr	r3, [pc, #764]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 80014f0:	430a      	orrs	r2, r1
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	e019      	b.n	800152a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014f6:	4bbd      	ldr	r3, [pc, #756]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4bbc      	ldr	r3, [pc, #752]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 80014fc:	49bd      	ldr	r1, [pc, #756]	; (80017f4 <HAL_RCC_OscConfig+0x684>)
 80014fe:	400a      	ands	r2, r1
 8001500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001502:	f7ff fd51 	bl	8000fa8 <HAL_GetTick>
 8001506:	0003      	movs	r3, r0
 8001508:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800150c:	f7ff fd4c 	bl	8000fa8 <HAL_GetTick>
 8001510:	0002      	movs	r2, r0
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e19c      	b.n	8001858 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800151e:	4bb3      	ldr	r3, [pc, #716]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	2380      	movs	r3, #128	; 0x80
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4013      	ands	r3, r2
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2208      	movs	r2, #8
 8001530:	4013      	ands	r3, r2
 8001532:	d036      	beq.n	80015a2 <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d019      	beq.n	8001570 <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800153c:	4bab      	ldr	r3, [pc, #684]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 800153e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001540:	4baa      	ldr	r3, [pc, #680]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 8001542:	2101      	movs	r1, #1
 8001544:	430a      	orrs	r2, r1
 8001546:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001548:	f7ff fd2e 	bl	8000fa8 <HAL_GetTick>
 800154c:	0003      	movs	r3, r0
 800154e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001552:	f7ff fd29 	bl	8000fa8 <HAL_GetTick>
 8001556:	0002      	movs	r2, r0
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e179      	b.n	8001858 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001564:	4ba1      	ldr	r3, [pc, #644]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 8001566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001568:	2202      	movs	r2, #2
 800156a:	4013      	ands	r3, r2
 800156c:	d0f1      	beq.n	8001552 <HAL_RCC_OscConfig+0x3e2>
 800156e:	e018      	b.n	80015a2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001570:	4b9e      	ldr	r3, [pc, #632]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 8001572:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001574:	4b9d      	ldr	r3, [pc, #628]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 8001576:	2101      	movs	r1, #1
 8001578:	438a      	bics	r2, r1
 800157a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157c:	f7ff fd14 	bl	8000fa8 <HAL_GetTick>
 8001580:	0003      	movs	r3, r0
 8001582:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001586:	f7ff fd0f 	bl	8000fa8 <HAL_GetTick>
 800158a:	0002      	movs	r2, r0
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e15f      	b.n	8001858 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001598:	4b94      	ldr	r3, [pc, #592]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 800159a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800159c:	2202      	movs	r2, #2
 800159e:	4013      	ands	r3, r2
 80015a0:	d1f1      	bne.n	8001586 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2204      	movs	r2, #4
 80015a8:	4013      	ands	r3, r2
 80015aa:	d100      	bne.n	80015ae <HAL_RCC_OscConfig+0x43e>
 80015ac:	e0af      	b.n	800170e <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ae:	2323      	movs	r3, #35	; 0x23
 80015b0:	18fb      	adds	r3, r7, r3
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015b6:	4b8d      	ldr	r3, [pc, #564]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 80015b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	055b      	lsls	r3, r3, #21
 80015be:	4013      	ands	r3, r2
 80015c0:	d10a      	bne.n	80015d8 <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	4b8a      	ldr	r3, [pc, #552]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 80015c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015c6:	4b89      	ldr	r3, [pc, #548]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	0549      	lsls	r1, r1, #21
 80015cc:	430a      	orrs	r2, r1
 80015ce:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80015d0:	2323      	movs	r3, #35	; 0x23
 80015d2:	18fb      	adds	r3, r7, r3
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d8:	4b87      	ldr	r3, [pc, #540]	; (80017f8 <HAL_RCC_OscConfig+0x688>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4013      	ands	r3, r2
 80015e2:	d11a      	bne.n	800161a <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015e4:	4b84      	ldr	r3, [pc, #528]	; (80017f8 <HAL_RCC_OscConfig+0x688>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b83      	ldr	r3, [pc, #524]	; (80017f8 <HAL_RCC_OscConfig+0x688>)
 80015ea:	2180      	movs	r1, #128	; 0x80
 80015ec:	0049      	lsls	r1, r1, #1
 80015ee:	430a      	orrs	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015f2:	f7ff fcd9 	bl	8000fa8 <HAL_GetTick>
 80015f6:	0003      	movs	r3, r0
 80015f8:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015fc:	f7ff fcd4 	bl	8000fa8 <HAL_GetTick>
 8001600:	0002      	movs	r2, r0
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b64      	cmp	r3, #100	; 0x64
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e124      	b.n	8001858 <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160e:	4b7a      	ldr	r3, [pc, #488]	; (80017f8 <HAL_RCC_OscConfig+0x688>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	2380      	movs	r3, #128	; 0x80
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4013      	ands	r3, r2
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	429a      	cmp	r2, r3
 8001624:	d107      	bne.n	8001636 <HAL_RCC_OscConfig+0x4c6>
 8001626:	4b71      	ldr	r3, [pc, #452]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 8001628:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800162a:	4b70      	ldr	r3, [pc, #448]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 800162c:	2180      	movs	r1, #128	; 0x80
 800162e:	0049      	lsls	r1, r1, #1
 8001630:	430a      	orrs	r2, r1
 8001632:	651a      	str	r2, [r3, #80]	; 0x50
 8001634:	e031      	b.n	800169a <HAL_RCC_OscConfig+0x52a>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x4e8>
 800163e:	4b6b      	ldr	r3, [pc, #428]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 8001640:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001642:	4b6a      	ldr	r3, [pc, #424]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 8001644:	496b      	ldr	r1, [pc, #428]	; (80017f4 <HAL_RCC_OscConfig+0x684>)
 8001646:	400a      	ands	r2, r1
 8001648:	651a      	str	r2, [r3, #80]	; 0x50
 800164a:	4b68      	ldr	r3, [pc, #416]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 800164c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800164e:	4b67      	ldr	r3, [pc, #412]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 8001650:	496a      	ldr	r1, [pc, #424]	; (80017fc <HAL_RCC_OscConfig+0x68c>)
 8001652:	400a      	ands	r2, r1
 8001654:	651a      	str	r2, [r3, #80]	; 0x50
 8001656:	e020      	b.n	800169a <HAL_RCC_OscConfig+0x52a>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	23a0      	movs	r3, #160	; 0xa0
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	429a      	cmp	r2, r3
 8001662:	d10e      	bne.n	8001682 <HAL_RCC_OscConfig+0x512>
 8001664:	4b61      	ldr	r3, [pc, #388]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 8001666:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001668:	4b60      	ldr	r3, [pc, #384]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 800166a:	2180      	movs	r1, #128	; 0x80
 800166c:	00c9      	lsls	r1, r1, #3
 800166e:	430a      	orrs	r2, r1
 8001670:	651a      	str	r2, [r3, #80]	; 0x50
 8001672:	4b5e      	ldr	r3, [pc, #376]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 8001674:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001676:	4b5d      	ldr	r3, [pc, #372]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 8001678:	2180      	movs	r1, #128	; 0x80
 800167a:	0049      	lsls	r1, r1, #1
 800167c:	430a      	orrs	r2, r1
 800167e:	651a      	str	r2, [r3, #80]	; 0x50
 8001680:	e00b      	b.n	800169a <HAL_RCC_OscConfig+0x52a>
 8001682:	4b5a      	ldr	r3, [pc, #360]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 8001684:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001686:	4b59      	ldr	r3, [pc, #356]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 8001688:	495a      	ldr	r1, [pc, #360]	; (80017f4 <HAL_RCC_OscConfig+0x684>)
 800168a:	400a      	ands	r2, r1
 800168c:	651a      	str	r2, [r3, #80]	; 0x50
 800168e:	4b57      	ldr	r3, [pc, #348]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 8001690:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001692:	4b56      	ldr	r3, [pc, #344]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 8001694:	4959      	ldr	r1, [pc, #356]	; (80017fc <HAL_RCC_OscConfig+0x68c>)
 8001696:	400a      	ands	r2, r1
 8001698:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d015      	beq.n	80016ce <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a2:	f7ff fc81 	bl	8000fa8 <HAL_GetTick>
 80016a6:	0003      	movs	r3, r0
 80016a8:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016aa:	e009      	b.n	80016c0 <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ac:	f7ff fc7c 	bl	8000fa8 <HAL_GetTick>
 80016b0:	0002      	movs	r2, r0
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	4a52      	ldr	r2, [pc, #328]	; (8001800 <HAL_RCC_OscConfig+0x690>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e0cb      	b.n	8001858 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016c0:	4b4a      	ldr	r3, [pc, #296]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 80016c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4013      	ands	r3, r2
 80016ca:	d0ef      	beq.n	80016ac <HAL_RCC_OscConfig+0x53c>
 80016cc:	e014      	b.n	80016f8 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ce:	f7ff fc6b 	bl	8000fa8 <HAL_GetTick>
 80016d2:	0003      	movs	r3, r0
 80016d4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016d6:	e009      	b.n	80016ec <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d8:	f7ff fc66 	bl	8000fa8 <HAL_GetTick>
 80016dc:	0002      	movs	r2, r0
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	4a47      	ldr	r2, [pc, #284]	; (8001800 <HAL_RCC_OscConfig+0x690>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e0b5      	b.n	8001858 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016ec:	4b3f      	ldr	r3, [pc, #252]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 80016ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4013      	ands	r3, r2
 80016f6:	d1ef      	bne.n	80016d8 <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016f8:	2323      	movs	r3, #35	; 0x23
 80016fa:	18fb      	adds	r3, r7, r3
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d105      	bne.n	800170e <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001702:	4b3a      	ldr	r3, [pc, #232]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 8001704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001706:	4b39      	ldr	r3, [pc, #228]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 8001708:	493e      	ldr	r1, [pc, #248]	; (8001804 <HAL_RCC_OscConfig+0x694>)
 800170a:	400a      	ands	r2, r1
 800170c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	2b00      	cmp	r3, #0
 8001714:	d100      	bne.n	8001718 <HAL_RCC_OscConfig+0x5a8>
 8001716:	e09e      	b.n	8001856 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	2b0c      	cmp	r3, #12
 800171c:	d100      	bne.n	8001720 <HAL_RCC_OscConfig+0x5b0>
 800171e:	e077      	b.n	8001810 <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	2b02      	cmp	r3, #2
 8001726:	d145      	bne.n	80017b4 <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001728:	4b30      	ldr	r3, [pc, #192]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b2f      	ldr	r3, [pc, #188]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 800172e:	4936      	ldr	r1, [pc, #216]	; (8001808 <HAL_RCC_OscConfig+0x698>)
 8001730:	400a      	ands	r2, r1
 8001732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff fc38 	bl	8000fa8 <HAL_GetTick>
 8001738:	0003      	movs	r3, r0
 800173a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800173e:	f7ff fc33 	bl	8000fa8 <HAL_GetTick>
 8001742:	0002      	movs	r2, r0
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e083      	b.n	8001858 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001750:	4b26      	ldr	r3, [pc, #152]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	049b      	lsls	r3, r3, #18
 8001758:	4013      	ands	r3, r2
 800175a:	d1f0      	bne.n	800173e <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800175c:	4b23      	ldr	r3, [pc, #140]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	4a2a      	ldr	r2, [pc, #168]	; (800180c <HAL_RCC_OscConfig+0x69c>)
 8001762:	4013      	ands	r3, r2
 8001764:	0019      	movs	r1, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001774:	431a      	orrs	r2, r3
 8001776:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 8001778:	430a      	orrs	r2, r1
 800177a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 8001782:	2180      	movs	r1, #128	; 0x80
 8001784:	0449      	lsls	r1, r1, #17
 8001786:	430a      	orrs	r2, r1
 8001788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178a:	f7ff fc0d 	bl	8000fa8 <HAL_GetTick>
 800178e:	0003      	movs	r3, r0
 8001790:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001794:	f7ff fc08 	bl	8000fa8 <HAL_GetTick>
 8001798:	0002      	movs	r2, r0
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e058      	b.n	8001858 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	049b      	lsls	r3, r3, #18
 80017ae:	4013      	ands	r3, r2
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x624>
 80017b2:	e050      	b.n	8001856 <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b4:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 80017ba:	4913      	ldr	r1, [pc, #76]	; (8001808 <HAL_RCC_OscConfig+0x698>)
 80017bc:	400a      	ands	r2, r1
 80017be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fbf2 	bl	8000fa8 <HAL_GetTick>
 80017c4:	0003      	movs	r3, r0
 80017c6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ca:	f7ff fbed 	bl	8000fa8 <HAL_GetTick>
 80017ce:	0002      	movs	r2, r0
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e03d      	b.n	8001858 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <HAL_RCC_OscConfig+0x67c>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	049b      	lsls	r3, r3, #18
 80017e4:	4013      	ands	r3, r2
 80017e6:	d1f0      	bne.n	80017ca <HAL_RCC_OscConfig+0x65a>
 80017e8:	e035      	b.n	8001856 <HAL_RCC_OscConfig+0x6e6>
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	40021000 	.word	0x40021000
 80017f0:	ffff1fff 	.word	0xffff1fff
 80017f4:	fffffeff 	.word	0xfffffeff
 80017f8:	40007000 	.word	0x40007000
 80017fc:	fffffbff 	.word	0xfffffbff
 8001800:	00001388 	.word	0x00001388
 8001804:	efffffff 	.word	0xefffffff
 8001808:	feffffff 	.word	0xfeffffff
 800180c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e01d      	b.n	8001858 <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_RCC_OscConfig+0x6f0>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	025b      	lsls	r3, r3, #9
 8001828:	401a      	ands	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182e:	429a      	cmp	r2, r3
 8001830:	d10f      	bne.n	8001852 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	23f0      	movs	r3, #240	; 0xf0
 8001836:	039b      	lsls	r3, r3, #14
 8001838:	401a      	ands	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183e:	429a      	cmp	r2, r3
 8001840:	d107      	bne.n	8001852 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	23c0      	movs	r3, #192	; 0xc0
 8001846:	041b      	lsls	r3, r3, #16
 8001848:	401a      	ands	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	0018      	movs	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	b00a      	add	sp, #40	; 0x28
 800185e:	bdb0      	pop	{r4, r5, r7, pc}
 8001860:	40021000 	.word	0x40021000

08001864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001864:	b5b0      	push	{r4, r5, r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e10d      	b.n	8001a94 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001878:	4b88      	ldr	r3, [pc, #544]	; (8001a9c <HAL_RCC_ClockConfig+0x238>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2201      	movs	r2, #1
 800187e:	4013      	ands	r3, r2
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d911      	bls.n	80018aa <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b85      	ldr	r3, [pc, #532]	; (8001a9c <HAL_RCC_ClockConfig+0x238>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2201      	movs	r2, #1
 800188c:	4393      	bics	r3, r2
 800188e:	0019      	movs	r1, r3
 8001890:	4b82      	ldr	r3, [pc, #520]	; (8001a9c <HAL_RCC_ClockConfig+0x238>)
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001898:	4b80      	ldr	r3, [pc, #512]	; (8001a9c <HAL_RCC_ClockConfig+0x238>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2201      	movs	r2, #1
 800189e:	4013      	ands	r3, r2
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d001      	beq.n	80018aa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e0f4      	b.n	8001a94 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2202      	movs	r2, #2
 80018b0:	4013      	ands	r3, r2
 80018b2:	d009      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b4:	4b7a      	ldr	r3, [pc, #488]	; (8001aa0 <HAL_RCC_ClockConfig+0x23c>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	22f0      	movs	r2, #240	; 0xf0
 80018ba:	4393      	bics	r3, r2
 80018bc:	0019      	movs	r1, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	4b77      	ldr	r3, [pc, #476]	; (8001aa0 <HAL_RCC_ClockConfig+0x23c>)
 80018c4:	430a      	orrs	r2, r1
 80018c6:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2201      	movs	r2, #1
 80018ce:	4013      	ands	r3, r2
 80018d0:	d100      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x70>
 80018d2:	e089      	b.n	80019e8 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d107      	bne.n	80018ec <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018dc:	4b70      	ldr	r3, [pc, #448]	; (8001aa0 <HAL_RCC_ClockConfig+0x23c>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	029b      	lsls	r3, r3, #10
 80018e4:	4013      	ands	r3, r2
 80018e6:	d120      	bne.n	800192a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0d3      	b.n	8001a94 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d107      	bne.n	8001904 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018f4:	4b6a      	ldr	r3, [pc, #424]	; (8001aa0 <HAL_RCC_ClockConfig+0x23c>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	049b      	lsls	r3, r3, #18
 80018fc:	4013      	ands	r3, r2
 80018fe:	d114      	bne.n	800192a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0c7      	b.n	8001a94 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d106      	bne.n	800191a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800190c:	4b64      	ldr	r3, [pc, #400]	; (8001aa0 <HAL_RCC_ClockConfig+0x23c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2204      	movs	r2, #4
 8001912:	4013      	ands	r3, r2
 8001914:	d109      	bne.n	800192a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e0bc      	b.n	8001a94 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800191a:	4b61      	ldr	r3, [pc, #388]	; (8001aa0 <HAL_RCC_ClockConfig+0x23c>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4013      	ands	r3, r2
 8001924:	d101      	bne.n	800192a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e0b4      	b.n	8001a94 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800192a:	4b5d      	ldr	r3, [pc, #372]	; (8001aa0 <HAL_RCC_ClockConfig+0x23c>)
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	2203      	movs	r2, #3
 8001930:	4393      	bics	r3, r2
 8001932:	0019      	movs	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	4b59      	ldr	r3, [pc, #356]	; (8001aa0 <HAL_RCC_ClockConfig+0x23c>)
 800193a:	430a      	orrs	r2, r1
 800193c:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800193e:	f7ff fb33 	bl	8000fa8 <HAL_GetTick>
 8001942:	0003      	movs	r3, r0
 8001944:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d111      	bne.n	8001972 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800194e:	e009      	b.n	8001964 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001950:	f7ff fb2a 	bl	8000fa8 <HAL_GetTick>
 8001954:	0002      	movs	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	4a52      	ldr	r2, [pc, #328]	; (8001aa4 <HAL_RCC_ClockConfig+0x240>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e097      	b.n	8001a94 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001964:	4b4e      	ldr	r3, [pc, #312]	; (8001aa0 <HAL_RCC_ClockConfig+0x23c>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	220c      	movs	r2, #12
 800196a:	4013      	ands	r3, r2
 800196c:	2b08      	cmp	r3, #8
 800196e:	d1ef      	bne.n	8001950 <HAL_RCC_ClockConfig+0xec>
 8001970:	e03a      	b.n	80019e8 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d111      	bne.n	800199e <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800197a:	e009      	b.n	8001990 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800197c:	f7ff fb14 	bl	8000fa8 <HAL_GetTick>
 8001980:	0002      	movs	r2, r0
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	4a47      	ldr	r2, [pc, #284]	; (8001aa4 <HAL_RCC_ClockConfig+0x240>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e081      	b.n	8001a94 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001990:	4b43      	ldr	r3, [pc, #268]	; (8001aa0 <HAL_RCC_ClockConfig+0x23c>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	220c      	movs	r2, #12
 8001996:	4013      	ands	r3, r2
 8001998:	2b0c      	cmp	r3, #12
 800199a:	d1ef      	bne.n	800197c <HAL_RCC_ClockConfig+0x118>
 800199c:	e024      	b.n	80019e8 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d11b      	bne.n	80019de <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019a6:	e009      	b.n	80019bc <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a8:	f7ff fafe 	bl	8000fa8 <HAL_GetTick>
 80019ac:	0002      	movs	r2, r0
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	4a3c      	ldr	r2, [pc, #240]	; (8001aa4 <HAL_RCC_ClockConfig+0x240>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e06b      	b.n	8001a94 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019bc:	4b38      	ldr	r3, [pc, #224]	; (8001aa0 <HAL_RCC_ClockConfig+0x23c>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	220c      	movs	r2, #12
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d1ef      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x144>
 80019c8:	e00e      	b.n	80019e8 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ca:	f7ff faed 	bl	8000fa8 <HAL_GetTick>
 80019ce:	0002      	movs	r2, r0
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	4a33      	ldr	r2, [pc, #204]	; (8001aa4 <HAL_RCC_ClockConfig+0x240>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e05a      	b.n	8001a94 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80019de:	4b30      	ldr	r3, [pc, #192]	; (8001aa0 <HAL_RCC_ClockConfig+0x23c>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	220c      	movs	r2, #12
 80019e4:	4013      	ands	r3, r2
 80019e6:	d1f0      	bne.n	80019ca <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019e8:	4b2c      	ldr	r3, [pc, #176]	; (8001a9c <HAL_RCC_ClockConfig+0x238>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2201      	movs	r2, #1
 80019ee:	4013      	ands	r3, r2
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d211      	bcs.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	4b29      	ldr	r3, [pc, #164]	; (8001a9c <HAL_RCC_ClockConfig+0x238>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2201      	movs	r2, #1
 80019fc:	4393      	bics	r3, r2
 80019fe:	0019      	movs	r1, r3
 8001a00:	4b26      	ldr	r3, [pc, #152]	; (8001a9c <HAL_RCC_ClockConfig+0x238>)
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a08:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <HAL_RCC_ClockConfig+0x238>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	4013      	ands	r3, r2
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d001      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e03c      	b.n	8001a94 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2204      	movs	r2, #4
 8001a20:	4013      	ands	r3, r2
 8001a22:	d009      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a24:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <HAL_RCC_ClockConfig+0x23c>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	4a1f      	ldr	r2, [pc, #124]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <HAL_RCC_ClockConfig+0x23c>)
 8001a34:	430a      	orrs	r2, r1
 8001a36:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2208      	movs	r2, #8
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d00a      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <HAL_RCC_ClockConfig+0x23c>)
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	4a19      	ldr	r2, [pc, #100]	; (8001aac <HAL_RCC_ClockConfig+0x248>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	0019      	movs	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	00da      	lsls	r2, r3, #3
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <HAL_RCC_ClockConfig+0x23c>)
 8001a54:	430a      	orrs	r2, r1
 8001a56:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a58:	f000 f82e 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 8001a5c:	0001      	movs	r1, r0
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HAL_RCC_ClockConfig+0x23c>)
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	091b      	lsrs	r3, r3, #4
 8001a64:	220f      	movs	r2, #15
 8001a66:	4013      	ands	r3, r2
 8001a68:	4a11      	ldr	r2, [pc, #68]	; (8001ab0 <HAL_RCC_ClockConfig+0x24c>)
 8001a6a:	5cd3      	ldrb	r3, [r2, r3]
 8001a6c:	000a      	movs	r2, r1
 8001a6e:	40da      	lsrs	r2, r3
 8001a70:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <HAL_RCC_ClockConfig+0x250>)
 8001a72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001a74:	250b      	movs	r5, #11
 8001a76:	197c      	adds	r4, r7, r5
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7ff fa4f 	bl	8000f1c <HAL_InitTick>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001a82:	197b      	adds	r3, r7, r5
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8001a8a:	230b      	movs	r3, #11
 8001a8c:	18fb      	adds	r3, r7, r3
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	e000      	b.n	8001a94 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	0018      	movs	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b004      	add	sp, #16
 8001a9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a9c:	40022000 	.word	0x40022000
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	00001388 	.word	0x00001388
 8001aa8:	fffff8ff 	.word	0xfffff8ff
 8001aac:	ffffc7ff 	.word	0xffffc7ff
 8001ab0:	08002ad8 	.word	0x08002ad8
 8001ab4:	20000000 	.word	0x20000000

08001ab8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001abe:	4b3b      	ldr	r3, [pc, #236]	; (8001bac <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d00e      	beq.n	8001aec <HAL_RCC_GetSysClockFreq+0x34>
 8001ace:	2b0c      	cmp	r3, #12
 8001ad0:	d00f      	beq.n	8001af2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d157      	bne.n	8001b86 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ad6:	4b35      	ldr	r3, [pc, #212]	; (8001bac <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2210      	movs	r2, #16
 8001adc:	4013      	ands	r3, r2
 8001ade:	d002      	beq.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001ae0:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ae2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001ae4:	e05d      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8001ae6:	4b33      	ldr	r3, [pc, #204]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ae8:	613b      	str	r3, [r7, #16]
      break;
 8001aea:	e05a      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001aec:	4b32      	ldr	r3, [pc, #200]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001aee:	613b      	str	r3, [r7, #16]
      break;
 8001af0:	e057      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	0c9b      	lsrs	r3, r3, #18
 8001af6:	220f      	movs	r2, #15
 8001af8:	4013      	ands	r3, r2
 8001afa:	4a30      	ldr	r2, [pc, #192]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x104>)
 8001afc:	5cd3      	ldrb	r3, [r2, r3]
 8001afe:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	0d9b      	lsrs	r3, r3, #22
 8001b04:	2203      	movs	r2, #3
 8001b06:	4013      	ands	r3, r2
 8001b08:	3301      	adds	r3, #1
 8001b0a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b0c:	4b27      	ldr	r3, [pc, #156]	; (8001bac <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	025b      	lsls	r3, r3, #9
 8001b14:	4013      	ands	r3, r2
 8001b16:	d00f      	beq.n	8001b38 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	000a      	movs	r2, r1
 8001b1c:	0152      	lsls	r2, r2, #5
 8001b1e:	1a52      	subs	r2, r2, r1
 8001b20:	0193      	lsls	r3, r2, #6
 8001b22:	1a9b      	subs	r3, r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	185b      	adds	r3, r3, r1
 8001b28:	025b      	lsls	r3, r3, #9
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f7fe faeb 	bl	8000108 <__udivsi3>
 8001b32:	0003      	movs	r3, r0
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	e023      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b38:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2210      	movs	r2, #16
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d00f      	beq.n	8001b62 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001b42:	68b9      	ldr	r1, [r7, #8]
 8001b44:	000a      	movs	r2, r1
 8001b46:	0152      	lsls	r2, r2, #5
 8001b48:	1a52      	subs	r2, r2, r1
 8001b4a:	0193      	lsls	r3, r2, #6
 8001b4c:	1a9b      	subs	r3, r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	185b      	adds	r3, r3, r1
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	0018      	movs	r0, r3
 8001b58:	f7fe fad6 	bl	8000108 <__udivsi3>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	e00e      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8001b62:	68b9      	ldr	r1, [r7, #8]
 8001b64:	000a      	movs	r2, r1
 8001b66:	0152      	lsls	r2, r2, #5
 8001b68:	1a52      	subs	r2, r2, r1
 8001b6a:	0193      	lsls	r3, r2, #6
 8001b6c:	1a9b      	subs	r3, r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	185b      	adds	r3, r3, r1
 8001b72:	029b      	lsls	r3, r3, #10
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	0018      	movs	r0, r3
 8001b78:	f7fe fac6 	bl	8000108 <__udivsi3>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	613b      	str	r3, [r7, #16]
      break;
 8001b84:	e00d      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	0b5b      	lsrs	r3, r3, #13
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	4013      	ands	r3, r2
 8001b90:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	3301      	adds	r3, #1
 8001b96:	2280      	movs	r2, #128	; 0x80
 8001b98:	0212      	lsls	r2, r2, #8
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	0013      	movs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
      break;
 8001ba0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ba2:	693b      	ldr	r3, [r7, #16]
}
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b006      	add	sp, #24
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	003d0900 	.word	0x003d0900
 8001bb4:	00f42400 	.word	0x00f42400
 8001bb8:	007a1200 	.word	0x007a1200
 8001bbc:	08002af0 	.word	0x08002af0

08001bc0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2220      	movs	r2, #32
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d100      	bne.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8001bd2:	e0c7      	b.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8001bd4:	2317      	movs	r3, #23
 8001bd6:	18fb      	adds	r3, r7, r3
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bdc:	4b82      	ldr	r3, [pc, #520]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	055b      	lsls	r3, r3, #21
 8001be4:	4013      	ands	r3, r2
 8001be6:	d10a      	bne.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be8:	4b7f      	ldr	r3, [pc, #508]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001bea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bec:	4b7e      	ldr	r3, [pc, #504]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001bee:	2180      	movs	r1, #128	; 0x80
 8001bf0:	0549      	lsls	r1, r1, #21
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001bf6:	2317      	movs	r3, #23
 8001bf8:	18fb      	adds	r3, r7, r3
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfe:	4b7b      	ldr	r3, [pc, #492]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4013      	ands	r3, r2
 8001c08:	d11a      	bne.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c0a:	4b78      	ldr	r3, [pc, #480]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	4b77      	ldr	r3, [pc, #476]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001c10:	2180      	movs	r1, #128	; 0x80
 8001c12:	0049      	lsls	r1, r1, #1
 8001c14:	430a      	orrs	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c18:	f7ff f9c6 	bl	8000fa8 <HAL_GetTick>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c20:	e008      	b.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c22:	f7ff f9c1 	bl	8000fa8 <HAL_GetTick>
 8001c26:	0002      	movs	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b64      	cmp	r3, #100	; 0x64
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e0d4      	b.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c34:	4b6d      	ldr	r3, [pc, #436]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001c40:	4b69      	ldr	r3, [pc, #420]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	23c0      	movs	r3, #192	; 0xc0
 8001c46:	039b      	lsls	r3, r3, #14
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	23c0      	movs	r3, #192	; 0xc0
 8001c52:	039b      	lsls	r3, r3, #14
 8001c54:	4013      	ands	r3, r2
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d013      	beq.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	23c0      	movs	r3, #192	; 0xc0
 8001c62:	029b      	lsls	r3, r3, #10
 8001c64:	401a      	ands	r2, r3
 8001c66:	23c0      	movs	r3, #192	; 0xc0
 8001c68:	029b      	lsls	r3, r3, #10
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d10a      	bne.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001c6e:	4b5e      	ldr	r3, [pc, #376]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	029b      	lsls	r3, r3, #10
 8001c76:	401a      	ands	r2, r3
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	029b      	lsls	r3, r3, #10
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0ac      	b.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001c84:	4b58      	ldr	r3, [pc, #352]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001c86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c88:	23c0      	movs	r3, #192	; 0xc0
 8001c8a:	029b      	lsls	r3, r3, #10
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d03b      	beq.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	23c0      	movs	r3, #192	; 0xc0
 8001c9c:	029b      	lsls	r3, r3, #10
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d033      	beq.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2220      	movs	r2, #32
 8001cac:	4013      	ands	r3, r2
 8001cae:	d02e      	beq.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001cb0:	4b4d      	ldr	r3, [pc, #308]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cb4:	4a4e      	ldr	r2, [pc, #312]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cba:	4b4b      	ldr	r3, [pc, #300]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001cbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cbe:	4b4a      	ldr	r3, [pc, #296]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001cc0:	2180      	movs	r1, #128	; 0x80
 8001cc2:	0309      	lsls	r1, r1, #12
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cc8:	4b47      	ldr	r3, [pc, #284]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001cca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ccc:	4b46      	ldr	r3, [pc, #280]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001cce:	4949      	ldr	r1, [pc, #292]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001cd0:	400a      	ands	r2, r1
 8001cd2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001cd4:	4b44      	ldr	r3, [pc, #272]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d014      	beq.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff f960 	bl	8000fa8 <HAL_GetTick>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cec:	e009      	b.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cee:	f7ff f95b 	bl	8000fa8 <HAL_GetTick>
 8001cf2:	0002      	movs	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	4a3f      	ldr	r2, [pc, #252]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e06d      	b.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d02:	4b39      	ldr	r3, [pc, #228]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d0ef      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	23c0      	movs	r3, #192	; 0xc0
 8001d14:	029b      	lsls	r3, r3, #10
 8001d16:	401a      	ands	r2, r3
 8001d18:	23c0      	movs	r3, #192	; 0xc0
 8001d1a:	029b      	lsls	r3, r3, #10
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d10c      	bne.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8001d20:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a35      	ldr	r2, [pc, #212]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	0019      	movs	r1, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	23c0      	movs	r3, #192	; 0xc0
 8001d30:	039b      	lsls	r3, r3, #14
 8001d32:	401a      	ands	r2, r3
 8001d34:	4b2c      	ldr	r3, [pc, #176]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d36:	430a      	orrs	r2, r1
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	4b2b      	ldr	r3, [pc, #172]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d3c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	23c0      	movs	r3, #192	; 0xc0
 8001d44:	029b      	lsls	r3, r3, #10
 8001d46:	401a      	ands	r2, r3
 8001d48:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d4e:	2317      	movs	r3, #23
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d105      	bne.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d58:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d5c:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d5e:	4928      	ldr	r1, [pc, #160]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d60:	400a      	ands	r2, r1
 8001d62:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2202      	movs	r2, #2
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d009      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d72:	220c      	movs	r2, #12
 8001d74:	4393      	bics	r3, r2
 8001d76:	0019      	movs	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2204      	movs	r2, #4
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d009      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d8c:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d90:	4a1c      	ldr	r2, [pc, #112]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	0019      	movs	r1, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2208      	movs	r2, #8
 8001da6:	4013      	ands	r3, r2
 8001da8:	d009      	beq.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001daa:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dae:	4a16      	ldr	r2, [pc, #88]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	0019      	movs	r1, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2280      	movs	r2, #128	; 0x80
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d009      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dcc:	4a0f      	ldr	r2, [pc, #60]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695a      	ldr	r2, [r3, #20]
 8001dd6:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	0018      	movs	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	b006      	add	sp, #24
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40007000 	.word	0x40007000
 8001df0:	fffcffff 	.word	0xfffcffff
 8001df4:	fff7ffff 	.word	0xfff7ffff
 8001df8:	00001388 	.word	0x00001388
 8001dfc:	ffcfffff 	.word	0xffcfffff
 8001e00:	efffffff 	.word	0xefffffff
 8001e04:	fffff3ff 	.word	0xfffff3ff
 8001e08:	ffffcfff 	.word	0xffffcfff
 8001e0c:	fff3ffff 	.word	0xfff3ffff

08001e10 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e08e      	b.n	8001f40 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2221      	movs	r2, #33	; 0x21
 8001e26:	5c9b      	ldrb	r3, [r3, r2]
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d107      	bne.n	8001e3e <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2220      	movs	r2, #32
 8001e32:	2100      	movs	r1, #0
 8001e34:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f7fe ff83 	bl	8000d44 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2221      	movs	r2, #33	; 0x21
 8001e42:	2102      	movs	r1, #2
 8001e44:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	22ca      	movs	r2, #202	; 0xca
 8001e4c:	625a      	str	r2, [r3, #36]	; 0x24
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2253      	movs	r2, #83	; 0x53
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f000 f89e 	bl	8001f9a <RTC_EnterInitMode>
 8001e5e:	1e03      	subs	r3, r0, #0
 8001e60:	d009      	beq.n	8001e76 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	22ff      	movs	r2, #255	; 0xff
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2221      	movs	r2, #33	; 0x21
 8001e6e:	2104      	movs	r1, #4
 8001e70:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e064      	b.n	8001f40 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4931      	ldr	r1, [pc, #196]	; (8001f48 <HAL_RTC_Init+0x138>)
 8001e82:	400a      	ands	r2, r1
 8001e84:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6899      	ldr	r1, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	68d2      	ldr	r2, [r2, #12]
 8001eac:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6919      	ldr	r1, [r3, #16]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	041a      	lsls	r2, r3, #16
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2180      	movs	r1, #128	; 0x80
 8001ece:	438a      	bics	r2, r1
 8001ed0:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2103      	movs	r1, #3
 8001ede:	438a      	bics	r2, r1
 8001ee0:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69da      	ldr	r2, [r3, #28]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2220      	movs	r2, #32
 8001f02:	4013      	ands	r3, r2
 8001f04:	d113      	bne.n	8001f2e <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f000 f81f 	bl	8001f4c <HAL_RTC_WaitForSynchro>
 8001f0e:	1e03      	subs	r3, r0, #0
 8001f10:	d00d      	beq.n	8001f2e <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	22ff      	movs	r2, #255	; 0xff
 8001f18:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2221      	movs	r2, #33	; 0x21
 8001f1e:	2104      	movs	r1, #4
 8001f20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2220      	movs	r2, #32
 8001f26:	2100      	movs	r1, #0
 8001f28:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e008      	b.n	8001f40 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	22ff      	movs	r2, #255	; 0xff
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2221      	movs	r2, #33	; 0x21
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
  }
}
 8001f40:	0018      	movs	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	b002      	add	sp, #8
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	ff8fffbf 	.word	0xff8fffbf

08001f4c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	21a0      	movs	r1, #160	; 0xa0
 8001f60:	438a      	bics	r2, r1
 8001f62:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8001f64:	f7ff f820 	bl	8000fa8 <HAL_GetTick>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001f6c:	e00a      	b.n	8001f84 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001f6e:	f7ff f81b 	bl	8000fa8 <HAL_GetTick>
 8001f72:	0002      	movs	r2, r0
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1ad2      	subs	r2, r2, r3
 8001f78:	23fa      	movs	r3, #250	; 0xfa
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d901      	bls.n	8001f84 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e006      	b.n	8001f92 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d0ee      	beq.n	8001f6e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	0018      	movs	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b004      	add	sp, #16
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2240      	movs	r2, #64	; 0x40
 8001faa:	4013      	ands	r3, r2
 8001fac:	d11a      	bne.n	8001fe4 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	4252      	negs	r2, r2
 8001fb6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8001fb8:	f7fe fff6 	bl	8000fa8 <HAL_GetTick>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001fc0:	e00a      	b.n	8001fd8 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001fc2:	f7fe fff1 	bl	8000fa8 <HAL_GetTick>
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1ad2      	subs	r2, r2, r3
 8001fcc:	23fa      	movs	r3, #250	; 0xfa
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d901      	bls.n	8001fd8 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e006      	b.n	8001fe6 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	2240      	movs	r2, #64	; 0x40
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d0ee      	beq.n	8001fc2 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b004      	add	sp, #16
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2220      	movs	r2, #32
 8002000:	5c9b      	ldrb	r3, [r3, r2]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8002006:	2302      	movs	r3, #2
 8002008:	e0ad      	b.n	8002166 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2220      	movs	r2, #32
 800200e:	2101      	movs	r1, #1
 8002010:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2221      	movs	r2, #33	; 0x21
 8002016:	2102      	movs	r1, #2
 8002018:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	22ca      	movs	r2, #202	; 0xca
 8002020:	625a      	str	r2, [r3, #36]	; 0x24
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2253      	movs	r2, #83	; 0x53
 8002028:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4013      	ands	r3, r2
 8002036:	d021      	beq.n	800207c <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 8002038:	f7fe ffb6 	bl	8000fa8 <HAL_GetTick>
 800203c:	0003      	movs	r3, r0
 800203e:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8002040:	e016      	b.n	8002070 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002042:	f7fe ffb1 	bl	8000fa8 <HAL_GetTick>
 8002046:	0002      	movs	r2, r0
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	1ad2      	subs	r2, r2, r3
 800204c:	23fa      	movs	r3, #250	; 0xfa
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	429a      	cmp	r2, r3
 8002052:	d90d      	bls.n	8002070 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	22ff      	movs	r2, #255	; 0xff
 800205a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2221      	movs	r2, #33	; 0x21
 8002060:	2103      	movs	r1, #3
 8002062:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2220      	movs	r2, #32
 8002068:	2100      	movs	r1, #0
 800206a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e07a      	b.n	8002166 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	2204      	movs	r2, #4
 8002078:	4013      	ands	r3, r2
 800207a:	d1e2      	bne.n	8002042 <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	493a      	ldr	r1, [pc, #232]	; (8002170 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8002088:	400a      	ands	r2, r1
 800208a:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	22ff      	movs	r2, #255	; 0xff
 8002094:	401a      	ands	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4936      	ldr	r1, [pc, #216]	; (8002174 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 800209c:	430a      	orrs	r2, r1
 800209e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80020a0:	f7fe ff82 	bl	8000fa8 <HAL_GetTick>
 80020a4:	0003      	movs	r3, r0
 80020a6:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80020a8:	e016      	b.n	80020d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80020aa:	f7fe ff7d 	bl	8000fa8 <HAL_GetTick>
 80020ae:	0002      	movs	r2, r0
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	1ad2      	subs	r2, r2, r3
 80020b4:	23fa      	movs	r3, #250	; 0xfa
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d90d      	bls.n	80020d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	22ff      	movs	r2, #255	; 0xff
 80020c2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2221      	movs	r2, #33	; 0x21
 80020c8:	2103      	movs	r1, #3
 80020ca:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2220      	movs	r2, #32
 80020d0:	2100      	movs	r1, #0
 80020d2:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e046      	b.n	8002166 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2204      	movs	r2, #4
 80020e0:	4013      	ands	r3, r2
 80020e2:	d0e2      	beq.n	80020aa <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2107      	movs	r1, #7
 80020f8:	438a      	bics	r2, r1
 80020fa:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6899      	ldr	r1, [r3, #8]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	430a      	orrs	r2, r1
 800210a:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800210c:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	0349      	lsls	r1, r1, #13
 8002116:	430a      	orrs	r2, r1
 8002118:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800211a:	4b17      	ldr	r3, [pc, #92]	; (8002178 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	4b16      	ldr	r3, [pc, #88]	; (8002178 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002120:	2180      	movs	r1, #128	; 0x80
 8002122:	0349      	lsls	r1, r1, #13
 8002124:	430a      	orrs	r2, r1
 8002126:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2180      	movs	r1, #128	; 0x80
 8002134:	01c9      	lsls	r1, r1, #7
 8002136:	430a      	orrs	r2, r1
 8002138:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2180      	movs	r1, #128	; 0x80
 8002146:	00c9      	lsls	r1, r1, #3
 8002148:	430a      	orrs	r2, r1
 800214a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	22ff      	movs	r2, #255	; 0xff
 8002152:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2221      	movs	r2, #33	; 0x21
 8002158:	2101      	movs	r1, #1
 800215a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2220      	movs	r2, #32
 8002160:	2100      	movs	r1, #0
 8002162:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	0018      	movs	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	b006      	add	sp, #24
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	fffffbff 	.word	0xfffffbff
 8002174:	fffffb7f 	.word	0xfffffb7f
 8002178:	40010400 	.word	0x40010400

0800217c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4013      	ands	r3, r2
 8002190:	d00d      	beq.n	80021ae <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	0018      	movs	r0, r3
 8002196:	f000 f81b 	bl	80021d0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	22ff      	movs	r2, #255	; 0xff
 80021a2:	401a      	ands	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4907      	ldr	r1, [pc, #28]	; (80021c8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 80021aa:	430a      	orrs	r2, r1
 80021ac:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80021ae:	4b07      	ldr	r3, [pc, #28]	; (80021cc <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 80021b0:	2280      	movs	r2, #128	; 0x80
 80021b2:	0352      	lsls	r2, r2, #13
 80021b4:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2221      	movs	r2, #33	; 0x21
 80021ba:	2101      	movs	r1, #1
 80021bc:	5499      	strb	r1, [r3, r2]
}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b002      	add	sp, #8
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	fffffb7f 	.word	0xfffffb7f
 80021cc:	40010400 	.word	0x40010400

080021d0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	b002      	add	sp, #8
 80021de:	bd80      	pop	{r7, pc}

080021e0 <LL_ADC_IsEnabled>:
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2201      	movs	r2, #1
 80021ee:	4013      	ands	r3, r2
 80021f0:	3b01      	subs	r3, #1
 80021f2:	425a      	negs	r2, r3
 80021f4:	4153      	adcs	r3, r2
 80021f6:	b2db      	uxtb	r3, r3
}
 80021f8:	0018      	movs	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b002      	add	sp, #8
 80021fe:	bd80      	pop	{r7, pc}

08002200 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800220a:	230f      	movs	r3, #15
 800220c:	18fb      	adds	r3, r7, r3
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	0018      	movs	r0, r3
 8002216:	f7ff ffe3 	bl	80021e0 <LL_ADC_IsEnabled>
 800221a:	1e03      	subs	r3, r0, #0
 800221c:	d118      	bne.n	8002250 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	4a11      	ldr	r2, [pc, #68]	; (8002268 <LL_ADC_Init+0x68>)
 8002224:	401a      	ands	r2, r3
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	6859      	ldr	r1, [r3, #4]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	4319      	orrs	r1, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	430b      	orrs	r3, r1
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	60da      	str	r2, [r3, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	089a      	lsrs	r2, r3, #2
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	611a      	str	r2, [r3, #16]
 800224e:	e003      	b.n	8002258 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002250:	230f      	movs	r3, #15
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002258:	230f      	movs	r3, #15
 800225a:	18fb      	adds	r3, r7, r3
 800225c:	781b      	ldrb	r3, [r3, #0]
}
 800225e:	0018      	movs	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	b004      	add	sp, #16
 8002264:	bd80      	pop	{r7, pc}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	ffff3fc7 	.word	0xffff3fc7

0800226c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002276:	230f      	movs	r3, #15
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	0018      	movs	r0, r3
 8002282:	f7ff ffad 	bl	80021e0 <LL_ADC_IsEnabled>
 8002286:	1e03      	subs	r3, r0, #0
 8002288:	d115      	bne.n	80022b6 <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	4a0f      	ldr	r2, [pc, #60]	; (80022cc <LL_ADC_REG_Init+0x60>)
 8002290:	401a      	ands	r2, r3
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6819      	ldr	r1, [r3, #0]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4319      	orrs	r1, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	4319      	orrs	r1, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	4319      	orrs	r1, r3
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	430b      	orrs	r3, r1
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	60da      	str	r2, [r3, #12]
 80022b4:	e003      	b.n	80022be <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80022b6:	230f      	movs	r3, #15
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80022be:	230f      	movs	r3, #15
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	781b      	ldrb	r3, [r3, #0]
}
 80022c4:	0018      	movs	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b004      	add	sp, #16
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	fffec23c 	.word	0xfffec23c

080022d0 <LL_GPIO_SetPinMode>:
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6819      	ldr	r1, [r3, #0]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	435a      	muls	r2, r3
 80022e6:	0013      	movs	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	189b      	adds	r3, r3, r2
 80022ec:	43db      	mvns	r3, r3
 80022ee:	400b      	ands	r3, r1
 80022f0:	001a      	movs	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	434b      	muls	r3, r1
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	434b      	muls	r3, r1
 80022fc:	431a      	orrs	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	601a      	str	r2, [r3, #0]
}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	46bd      	mov	sp, r7
 8002306:	b004      	add	sp, #16
 8002308:	bd80      	pop	{r7, pc}

0800230a <LL_GPIO_SetPinOutputType>:
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b084      	sub	sp, #16
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	43d2      	mvns	r2, r2
 800231e:	401a      	ands	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	434b      	muls	r3, r1
 8002326:	431a      	orrs	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	605a      	str	r2, [r3, #4]
}
 800232c:	46c0      	nop			; (mov r8, r8)
 800232e:	46bd      	mov	sp, r7
 8002330:	b004      	add	sp, #16
 8002332:	bd80      	pop	{r7, pc}

08002334 <LL_GPIO_SetPinSpeed>:
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6899      	ldr	r1, [r3, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	435a      	muls	r2, r3
 800234a:	0013      	movs	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	189b      	adds	r3, r3, r2
 8002350:	43db      	mvns	r3, r3
 8002352:	400b      	ands	r3, r1
 8002354:	001a      	movs	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	434b      	muls	r3, r1
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	434b      	muls	r3, r1
 8002360:	431a      	orrs	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	609a      	str	r2, [r3, #8]
}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	46bd      	mov	sp, r7
 800236a:	b004      	add	sp, #16
 800236c:	bd80      	pop	{r7, pc}

0800236e <LL_GPIO_SetPinPull>:
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	68d9      	ldr	r1, [r3, #12]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	435a      	muls	r2, r3
 8002384:	0013      	movs	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	189b      	adds	r3, r3, r2
 800238a:	43db      	mvns	r3, r3
 800238c:	400b      	ands	r3, r1
 800238e:	001a      	movs	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	68b9      	ldr	r1, [r7, #8]
 8002394:	434b      	muls	r3, r1
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	434b      	muls	r3, r1
 800239a:	431a      	orrs	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	60da      	str	r2, [r3, #12]
}
 80023a0:	46c0      	nop			; (mov r8, r8)
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b004      	add	sp, #16
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <LL_GPIO_SetAFPin_0_7>:
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a19      	ldr	r1, [r3, #32]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	4353      	muls	r3, r2
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	4353      	muls	r3, r2
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	435a      	muls	r2, r3
 80023c6:	0013      	movs	r3, r2
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	43db      	mvns	r3, r3
 80023ce:	400b      	ands	r3, r1
 80023d0:	001a      	movs	r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	434b      	muls	r3, r1
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	434b      	muls	r3, r1
 80023dc:	68b9      	ldr	r1, [r7, #8]
 80023de:	434b      	muls	r3, r1
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	434b      	muls	r3, r1
 80023e4:	431a      	orrs	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	621a      	str	r2, [r3, #32]
}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b004      	add	sp, #16
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <LL_GPIO_SetAFPin_8_15>:
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b084      	sub	sp, #16
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	0a1b      	lsrs	r3, r3, #8
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	0a12      	lsrs	r2, r2, #8
 800240a:	4353      	muls	r3, r2
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	0a12      	lsrs	r2, r2, #8
 8002410:	4353      	muls	r3, r2
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	0a12      	lsrs	r2, r2, #8
 8002416:	435a      	muls	r2, r3
 8002418:	0013      	movs	r3, r2
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	43db      	mvns	r3, r3
 8002420:	400b      	ands	r3, r1
 8002422:	001a      	movs	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	0a1b      	lsrs	r3, r3, #8
 8002428:	68b9      	ldr	r1, [r7, #8]
 800242a:	0a09      	lsrs	r1, r1, #8
 800242c:	434b      	muls	r3, r1
 800242e:	68b9      	ldr	r1, [r7, #8]
 8002430:	0a09      	lsrs	r1, r1, #8
 8002432:	434b      	muls	r3, r1
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	0a09      	lsrs	r1, r1, #8
 8002438:	434b      	muls	r3, r1
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	434b      	muls	r3, r1
 800243e:	431a      	orrs	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002444:	46c0      	nop			; (mov r8, r8)
 8002446:	46bd      	mov	sp, r7
 8002448:	b004      	add	sp, #16
 800244a:	bd80      	pop	{r7, pc}

0800244c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800245e:	e048      	b.n	80024f2 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2101      	movs	r1, #1
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4091      	lsls	r1, r2
 800246a:	000a      	movs	r2, r1
 800246c:	4013      	ands	r3, r2
 800246e:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d03a      	beq.n	80024ec <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d003      	beq.n	8002486 <LL_GPIO_Init+0x3a>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d10e      	bne.n	80024a4 <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	68b9      	ldr	r1, [r7, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	0018      	movs	r0, r3
 8002490:	f7ff ff50 	bl	8002334 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	6819      	ldr	r1, [r3, #0]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	0018      	movs	r0, r3
 80024a0:	f7ff ff33 	bl	800230a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	0018      	movs	r0, r3
 80024ae:	f7ff ff5e 	bl	800236e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d111      	bne.n	80024de <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2bff      	cmp	r3, #255	; 0xff
 80024be:	d807      	bhi.n	80024d0 <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	68b9      	ldr	r1, [r7, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7ff ff6d 	bl	80023a8 <LL_GPIO_SetAFPin_0_7>
 80024ce:	e006      	b.n	80024de <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	695a      	ldr	r2, [r3, #20]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	0018      	movs	r0, r3
 80024da:	f7ff ff8a 	bl	80023f2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	68b9      	ldr	r1, [r7, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	0018      	movs	r0, r3
 80024e8:	f7ff fef2 	bl	80022d0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	3301      	adds	r3, #1
 80024f0:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	40da      	lsrs	r2, r3
 80024fa:	1e13      	subs	r3, r2, #0
 80024fc:	d1b0      	bne.n	8002460 <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 80024fe:	2300      	movs	r3, #0
}
 8002500:	0018      	movs	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	b004      	add	sp, #16
 8002506:	bd80      	pop	{r7, pc}

08002508 <LL_LPUART_IsEnabled>:
  * @rmtoll CR1          UE            LL_LPUART_IsEnabled
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabled(USART_TypeDef *LPUARTx)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2201      	movs	r2, #1
 8002516:	4013      	ands	r3, r2
 8002518:	3b01      	subs	r3, #1
 800251a:	425a      	negs	r2, r3
 800251c:	4153      	adcs	r3, r2
 800251e:	b2db      	uxtb	r3, r3
}
 8002520:	0018      	movs	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	b002      	add	sp, #8
 8002526:	bd80      	pop	{r7, pc}

08002528 <LL_LPUART_SetStopBitsLength>:
  *         @arg @ref LL_LPUART_STOPBITS_1
  *         @arg @ref LL_LPUART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetStopBitsLength(USART_TypeDef *LPUARTx, uint32_t StopBits)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4a05      	ldr	r2, [pc, #20]	; (800254c <LL_LPUART_SetStopBitsLength+0x24>)
 8002538:	401a      	ands	r2, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	605a      	str	r2, [r3, #4]
}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	46bd      	mov	sp, r7
 8002546:	b002      	add	sp, #8
 8002548:	bd80      	pop	{r7, pc}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	ffffcfff 	.word	0xffffcfff

08002550 <LL_LPUART_SetHWFlowCtrl>:
  *         @arg @ref LL_LPUART_HWCONTROL_CTS
  *         @arg @ref LL_LPUART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetHWFlowCtrl(USART_TypeDef *LPUARTx, uint32_t HardwareFlowControl)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	4a05      	ldr	r2, [pc, #20]	; (8002574 <LL_LPUART_SetHWFlowCtrl+0x24>)
 8002560:	401a      	ands	r2, r3
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	609a      	str	r2, [r3, #8]
}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	46bd      	mov	sp, r7
 800256e:	b002      	add	sp, #8
 8002570:	bd80      	pop	{r7, pc}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	fffffcff 	.word	0xfffffcff

08002578 <LL_LPUART_SetBaudRate>:
  * @param  PeriphClk Peripheral Clock
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetBaudRate(USART_TypeDef *LPUARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8002578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800257a:	b089      	sub	sp, #36	; 0x24
 800257c:	af00      	add	r7, sp, #0
 800257e:	61f8      	str	r0, [r7, #28]
 8002580:	61b9      	str	r1, [r7, #24]
 8002582:	617a      	str	r2, [r7, #20]
  LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, BaudRate);
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	0015      	movs	r5, r2
 8002588:	2200      	movs	r2, #0
 800258a:	0016      	movs	r6, r2
 800258c:	0e2a      	lsrs	r2, r5, #24
 800258e:	0234      	lsls	r4, r6, #8
 8002590:	4314      	orrs	r4, r2
 8002592:	022b      	lsls	r3, r5, #8
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	0852      	lsrs	r2, r2, #1
 8002598:	60ba      	str	r2, [r7, #8]
 800259a:	2200      	movs	r2, #0
 800259c:	60fa      	str	r2, [r7, #12]
 800259e:	68b8      	ldr	r0, [r7, #8]
 80025a0:	68f9      	ldr	r1, [r7, #12]
 80025a2:	18c0      	adds	r0, r0, r3
 80025a4:	4161      	adcs	r1, r4
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	603b      	str	r3, [r7, #0]
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f7fd fe35 	bl	8000220 <__aeabi_uldivmod>
 80025b6:	0003      	movs	r3, r0
 80025b8:	000c      	movs	r4, r1
 80025ba:	031b      	lsls	r3, r3, #12
 80025bc:	0b1a      	lsrs	r2, r3, #12
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	60da      	str	r2, [r3, #12]
}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b009      	add	sp, #36	; 0x24
 80025c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080025cc <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80025d6:	230f      	movs	r3, #15
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	2201      	movs	r2, #1
 80025dc:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	0018      	movs	r0, r3
 80025e6:	f7ff ff8f 	bl	8002508 <LL_LPUART_IsEnabled>
 80025ea:	1e03      	subs	r3, r0, #0
 80025ec:	d135      	bne.n	800265a <LL_LPUART_Init+0x8e>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a1d      	ldr	r2, [pc, #116]	; (8002668 <LL_LPUART_Init+0x9c>)
 80025f4:	401a      	ands	r2, r3
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6859      	ldr	r1, [r3, #4]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	4319      	orrs	r1, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	430b      	orrs	r3, r1
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	0011      	movs	r1, r2
 8002614:	0018      	movs	r0, r3
 8002616:	f7ff ff87 	bl	8002528 <LL_LPUART_SetStopBitsLength>

    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	695a      	ldr	r2, [r3, #20]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	0011      	movs	r1, r2
 8002622:	0018      	movs	r0, r3
 8002624:	f7ff ff94 	bl	8002550 <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 8002628:	23c0      	movs	r3, #192	; 0xc0
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	0018      	movs	r0, r3
 800262e:	f000 f8b3 	bl	8002798 <LL_RCC_GetLPUARTClockFreq>
 8002632:	0003      	movs	r3, r0
 8002634:	60bb      	str	r3, [r7, #8]

    /* Configure the LPUART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00e      	beq.n	800265a <LL_LPUART_Init+0x8e>
        && (LPUART_InitStruct->BaudRate != 0U))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <LL_LPUART_Init+0x8e>
    {
      status = SUCCESS;
 8002644:	230f      	movs	r3, #15
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
      LL_LPUART_SetBaudRate(LPUARTx,
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	0018      	movs	r0, r3
 8002656:	f7ff ff8f 	bl	8002578 <LL_LPUART_SetBaudRate>
      assert_param(IS_LL_LPUART_BRR_MAX(LPUARTx->BRR));
    }

  }

  return (status);
 800265a:	230f      	movs	r3, #15
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	781b      	ldrb	r3, [r3, #0]
}
 8002660:	0018      	movs	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	b004      	add	sp, #16
 8002666:	bd80      	pop	{r7, pc}
 8002668:	efffe9f3 	.word	0xefffe9f3

0800266c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <LL_RCC_HSI_IsReady+0x1c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2204      	movs	r2, #4
 8002676:	4013      	ands	r3, r2
 8002678:	2b04      	cmp	r3, #4
 800267a:	d101      	bne.n	8002680 <LL_RCC_HSI_IsReady+0x14>
 800267c:	2301      	movs	r3, #1
 800267e:	e000      	b.n	8002682 <LL_RCC_HSI_IsReady+0x16>
 8002680:	2300      	movs	r3, #0
}
 8002682:	0018      	movs	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40021000 	.word	0x40021000

0800268c <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CSR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8002690:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <LL_RCC_LSE_IsReady+0x24>)
 8002692:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	401a      	ands	r2, r3
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	429a      	cmp	r2, r3
 80026a0:	d101      	bne.n	80026a6 <LL_RCC_LSE_IsReady+0x1a>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <LL_RCC_LSE_IsReady+0x1c>
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	0018      	movs	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	40021000 	.word	0x40021000

080026b4 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_4
  *         @arg @ref LL_RCC_MSIRANGE_5
  *         @arg @ref LL_RCC_MSIRANGE_6
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 80026b8:	4b03      	ldr	r3, [pc, #12]	; (80026c8 <LL_RCC_MSI_GetRange+0x14>)
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	23e0      	movs	r3, #224	; 0xe0
 80026be:	021b      	lsls	r3, r3, #8
 80026c0:	4013      	ands	r3, r2
}
 80026c2:	0018      	movs	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000

080026cc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <LL_RCC_GetSysClkSource+0x14>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	220c      	movs	r2, #12
 80026d6:	4013      	ands	r3, r2
}
 80026d8:	0018      	movs	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	40021000 	.word	0x40021000

080026e4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <LL_RCC_GetAHBPrescaler+0x14>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	22f0      	movs	r2, #240	; 0xf0
 80026ee:	4013      	ands	r3, r2
}
 80026f0:	0018      	movs	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	40021000 	.word	0x40021000

080026fc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002700:	4b03      	ldr	r3, [pc, #12]	; (8002710 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	23e0      	movs	r3, #224	; 0xe0
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4013      	ands	r3, r2
}
 800270a:	0018      	movs	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40021000 	.word	0x40021000

08002714 <LL_RCC_GetLPUARTClockSource>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetLPUARTClockSource(uint32_t LPUARTx)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <LL_RCC_GetLPUARTClockSource+0x18>)
 800271e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	4013      	ands	r3, r2
}
 8002724:	0018      	movs	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	b002      	add	sp, #8
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000

08002730 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <LL_RCC_PLL_GetMainSource+0x14>)
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	025b      	lsls	r3, r3, #9
 800273c:	4013      	ands	r3, r2
}
 800273e:	0018      	movs	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40021000 	.word	0x40021000

08002748 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <LL_RCC_PLL_GetMultiplicator+0x14>)
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	23f0      	movs	r3, #240	; 0xf0
 8002752:	039b      	lsls	r3, r3, #14
 8002754:	4013      	ands	r3, r2
}
 8002756:	0018      	movs	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000

08002760 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8002764:	4b03      	ldr	r3, [pc, #12]	; (8002774 <LL_RCC_PLL_GetDivider+0x14>)
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	23c0      	movs	r3, #192	; 0xc0
 800276a:	041b      	lsls	r3, r3, #16
 800276c:	4013      	ands	r3, r2
}
 800276e:	0018      	movs	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000

08002778 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2210      	movs	r2, #16
 8002782:	4013      	ands	r3, r2
 8002784:	2b10      	cmp	r3, #16
 8002786:	d101      	bne.n	800278c <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 800278c:	2300      	movs	r3, #0
}
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40021000 	.word	0x40021000

08002798 <LL_RCC_GetLPUARTClockFreq>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE
  * @retval LPUART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  /* LPUART1CLK clock frequency */
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	0018      	movs	r0, r3
 80027a8:	f7ff ffb4 	bl	8002714 <LL_RCC_GetLPUARTClockSource>
 80027ac:	0003      	movs	r3, r0
 80027ae:	2280      	movs	r2, #128	; 0x80
 80027b0:	0112      	lsls	r2, r2, #4
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00c      	beq.n	80027d0 <LL_RCC_GetLPUARTClockFreq+0x38>
 80027b6:	22c0      	movs	r2, #192	; 0xc0
 80027b8:	0112      	lsls	r2, r2, #4
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d016      	beq.n	80027ec <LL_RCC_GetLPUARTClockFreq+0x54>
 80027be:	2280      	movs	r2, #128	; 0x80
 80027c0:	00d2      	lsls	r2, r2, #3
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d11a      	bne.n	80027fc <LL_RCC_GetLPUARTClockFreq+0x64>
  {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      lpuart_frequency = RCC_GetSystemClockFreq();
 80027c6:	f000 f833 	bl	8002830 <RCC_GetSystemClockFreq>
 80027ca:	0003      	movs	r3, r0
 80027cc:	60fb      	str	r3, [r7, #12]
      break;
 80027ce:	e025      	b.n	800281c <LL_RCC_GetLPUARTClockFreq+0x84>

    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() != 0U)
 80027d0:	f7ff ff4c 	bl	800266c <LL_RCC_HSI_IsReady>
 80027d4:	1e03      	subs	r3, r0, #0
 80027d6:	d01e      	beq.n	8002816 <LL_RCC_GetLPUARTClockFreq+0x7e>
      {
        if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80027d8:	f7ff ffce 	bl	8002778 <LL_RCC_IsActiveFlag_HSIDIV>
 80027dc:	1e03      	subs	r3, r0, #0
 80027de:	d002      	beq.n	80027e6 <LL_RCC_GetLPUARTClockFreq+0x4e>
        {
          lpuart_frequency = (HSI_VALUE >> 2U);
 80027e0:	4b11      	ldr	r3, [pc, #68]	; (8002828 <LL_RCC_GetLPUARTClockFreq+0x90>)
 80027e2:	60fb      	str	r3, [r7, #12]
        else
        {
          lpuart_frequency = HSI_VALUE;
        }
      }
      break;
 80027e4:	e017      	b.n	8002816 <LL_RCC_GetLPUARTClockFreq+0x7e>
          lpuart_frequency = HSI_VALUE;
 80027e6:	4b11      	ldr	r3, [pc, #68]	; (800282c <LL_RCC_GetLPUARTClockFreq+0x94>)
 80027e8:	60fb      	str	r3, [r7, #12]
      break;
 80027ea:	e014      	b.n	8002816 <LL_RCC_GetLPUARTClockFreq+0x7e>

    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() != 0U)
 80027ec:	f7ff ff4e 	bl	800268c <LL_RCC_LSE_IsReady>
 80027f0:	1e03      	subs	r3, r0, #0
 80027f2:	d012      	beq.n	800281a <LL_RCC_GetLPUARTClockFreq+0x82>
      {
        lpuart_frequency = LSE_VALUE;
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	021b      	lsls	r3, r3, #8
 80027f8:	60fb      	str	r3, [r7, #12]
      }
      break;
 80027fa:	e00e      	b.n	800281a <LL_RCC_GetLPUARTClockFreq+0x82>

    case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
    default:
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80027fc:	f000 f818 	bl	8002830 <RCC_GetSystemClockFreq>
 8002800:	0003      	movs	r3, r0
 8002802:	0018      	movs	r0, r3
 8002804:	f000 f858 	bl	80028b8 <RCC_GetHCLKClockFreq>
 8002808:	0003      	movs	r3, r0
 800280a:	0018      	movs	r0, r3
 800280c:	f000 f86a 	bl	80028e4 <RCC_GetPCLK1ClockFreq>
 8002810:	0003      	movs	r3, r0
 8002812:	60fb      	str	r3, [r7, #12]
      break;
 8002814:	e002      	b.n	800281c <LL_RCC_GetLPUARTClockFreq+0x84>
      break;
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	e000      	b.n	800281c <LL_RCC_GetLPUARTClockFreq+0x84>
      break;
 800281a:	46c0      	nop			; (mov r8, r8)
  }

  return lpuart_frequency;
 800281c:	68fb      	ldr	r3, [r7, #12]
}
 800281e:	0018      	movs	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	b004      	add	sp, #16
 8002824:	bd80      	pop	{r7, pc}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	003d0900 	.word	0x003d0900
 800282c:	00f42400 	.word	0x00f42400

08002830 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002836:	f7ff ff49 	bl	80026cc <LL_RCC_GetSysClkSource>
 800283a:	0003      	movs	r3, r0
 800283c:	2b04      	cmp	r3, #4
 800283e:	d013      	beq.n	8002868 <RCC_GetSystemClockFreq+0x38>
 8002840:	d802      	bhi.n	8002848 <RCC_GetSystemClockFreq+0x18>
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <RCC_GetSystemClockFreq+0x22>
 8002846:	e021      	b.n	800288c <RCC_GetSystemClockFreq+0x5c>
 8002848:	2b08      	cmp	r3, #8
 800284a:	d017      	beq.n	800287c <RCC_GetSystemClockFreq+0x4c>
 800284c:	2b0c      	cmp	r3, #12
 800284e:	d018      	beq.n	8002882 <RCC_GetSystemClockFreq+0x52>
 8002850:	e01c      	b.n	800288c <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002852:	f7ff ff2f 	bl	80026b4 <LL_RCC_MSI_GetRange>
 8002856:	0003      	movs	r3, r0
 8002858:	0b5b      	lsrs	r3, r3, #13
 800285a:	3301      	adds	r3, #1
 800285c:	2280      	movs	r2, #128	; 0x80
 800285e:	0212      	lsls	r2, r2, #8
 8002860:	409a      	lsls	r2, r3
 8002862:	0013      	movs	r3, r2
 8002864:	607b      	str	r3, [r7, #4]
      break;
 8002866:	e01c      	b.n	80028a2 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8002868:	f7ff ff86 	bl	8002778 <LL_RCC_IsActiveFlag_HSIDIV>
 800286c:	1e03      	subs	r3, r0, #0
 800286e:	d002      	beq.n	8002876 <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 8002870:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <RCC_GetSystemClockFreq+0x7c>)
 8002872:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8002874:	e015      	b.n	80028a2 <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 8002876:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <RCC_GetSystemClockFreq+0x80>)
 8002878:	607b      	str	r3, [r7, #4]
      break;
 800287a:	e012      	b.n	80028a2 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 800287c:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <RCC_GetSystemClockFreq+0x84>)
 800287e:	607b      	str	r3, [r7, #4]
      break;
 8002880:	e00f      	b.n	80028a2 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002882:	f000 f843 	bl	800290c <RCC_PLL_GetFreqDomain_SYS>
 8002886:	0003      	movs	r3, r0
 8002888:	607b      	str	r3, [r7, #4]
      break;
 800288a:	e00a      	b.n	80028a2 <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800288c:	f7ff ff12 	bl	80026b4 <LL_RCC_MSI_GetRange>
 8002890:	0003      	movs	r3, r0
 8002892:	0b5b      	lsrs	r3, r3, #13
 8002894:	3301      	adds	r3, #1
 8002896:	2280      	movs	r2, #128	; 0x80
 8002898:	0212      	lsls	r2, r2, #8
 800289a:	409a      	lsls	r2, r3
 800289c:	0013      	movs	r3, r2
 800289e:	607b      	str	r3, [r7, #4]
      break;
 80028a0:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 80028a2:	687b      	ldr	r3, [r7, #4]
}
 80028a4:	0018      	movs	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b002      	add	sp, #8
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	003d0900 	.word	0x003d0900
 80028b0:	00f42400 	.word	0x00f42400
 80028b4:	007a1200 	.word	0x007a1200

080028b8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80028c0:	f7ff ff10 	bl	80026e4 <LL_RCC_GetAHBPrescaler>
 80028c4:	0003      	movs	r3, r0
 80028c6:	091b      	lsrs	r3, r3, #4
 80028c8:	220f      	movs	r2, #15
 80028ca:	4013      	ands	r3, r2
 80028cc:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <RCC_GetHCLKClockFreq+0x28>)
 80028ce:	5cd3      	ldrb	r3, [r2, r3]
 80028d0:	001a      	movs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	40d3      	lsrs	r3, r2
}
 80028d6:	0018      	movs	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	b002      	add	sp, #8
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	08002ad8 	.word	0x08002ad8

080028e4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80028ec:	f7ff ff06 	bl	80026fc <LL_RCC_GetAPB1Prescaler>
 80028f0:	0003      	movs	r3, r0
 80028f2:	0a1b      	lsrs	r3, r3, #8
 80028f4:	4a04      	ldr	r2, [pc, #16]	; (8002908 <RCC_GetPCLK1ClockFreq+0x24>)
 80028f6:	5cd3      	ldrb	r3, [r2, r3]
 80028f8:	001a      	movs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	40d3      	lsrs	r3, r2
}
 80028fe:	0018      	movs	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	b002      	add	sp, #8
 8002904:	bd80      	pop	{r7, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	08002ae8 	.word	0x08002ae8

0800290c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800290c:	b590      	push	{r4, r7, lr}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002912:	f7ff ff0d 	bl	8002730 <LL_RCC_PLL_GetMainSource>
 8002916:	0003      	movs	r3, r0
 8002918:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d109      	bne.n	8002934 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8002920:	f7ff ff2a 	bl	8002778 <LL_RCC_IsActiveFlag_HSIDIV>
 8002924:	1e03      	subs	r3, r0, #0
 8002926:	d002      	beq.n	800292e <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8002928:	4b10      	ldr	r3, [pc, #64]	; (800296c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800292a:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 800292c:	e005      	b.n	800293a <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 800292e:	4b10      	ldr	r3, [pc, #64]	; (8002970 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8002930:	607b      	str	r3, [r7, #4]
      break;
 8002932:	e002      	b.n	800293a <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002934:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8002936:	607b      	str	r3, [r7, #4]
      break;
 8002938:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 800293a:	f7ff ff05 	bl	8002748 <LL_RCC_PLL_GetMultiplicator>
 800293e:	0003      	movs	r3, r0
 8002940:	0c9b      	lsrs	r3, r3, #18
 8002942:	4a0d      	ldr	r2, [pc, #52]	; (8002978 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8002944:	5cd3      	ldrb	r3, [r2, r3]
 8002946:	001a      	movs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4353      	muls	r3, r2
 800294c:	001c      	movs	r4, r3
 800294e:	f7ff ff07 	bl	8002760 <LL_RCC_PLL_GetDivider>
 8002952:	0003      	movs	r3, r0
 8002954:	0d9b      	lsrs	r3, r3, #22
 8002956:	3301      	adds	r3, #1
 8002958:	0019      	movs	r1, r3
 800295a:	0020      	movs	r0, r4
 800295c:	f7fd fbd4 	bl	8000108 <__udivsi3>
 8002960:	0003      	movs	r3, r0
}
 8002962:	0018      	movs	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	b003      	add	sp, #12
 8002968:	bd90      	pop	{r4, r7, pc}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	003d0900 	.word	0x003d0900
 8002970:	00f42400 	.word	0x00f42400
 8002974:	007a1200 	.word	0x007a1200
 8002978:	08002af0 	.word	0x08002af0

0800297c <LL_SPI_IsEnabled>:
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2240      	movs	r2, #64	; 0x40
 800298a:	4013      	ands	r3, r2
 800298c:	2b40      	cmp	r3, #64	; 0x40
 800298e:	d101      	bne.n	8002994 <LL_SPI_IsEnabled+0x18>
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <LL_SPI_IsEnabled+0x1a>
 8002994:	2300      	movs	r3, #0
}
 8002996:	0018      	movs	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	b002      	add	sp, #8
 800299c:	bd80      	pop	{r7, pc}

0800299e <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	001a      	movs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	611a      	str	r2, [r3, #16]
}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	46bd      	mov	sp, r7
 80029b6:	b002      	add	sp, #8
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80029c6:	230f      	movs	r3, #15
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	2201      	movs	r2, #1
 80029cc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	0018      	movs	r0, r3
 80029d2:	f7ff ffd3 	bl	800297c <LL_SPI_IsEnabled>
 80029d6:	1e03      	subs	r3, r0, #0
 80029d8:	d13c      	bne.n	8002a54 <LL_SPI_Init+0x98>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a21      	ldr	r2, [pc, #132]	; (8002a64 <LL_SPI_Init+0xa8>)
 80029e0:	401a      	ands	r2, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6819      	ldr	r1, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4319      	orrs	r1, r3
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	4319      	orrs	r1, r3
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	4319      	orrs	r1, r3
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	4319      	orrs	r1, r3
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	4319      	orrs	r1, r3
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	4319      	orrs	r1, r3
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	4319      	orrs	r1, r3
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	430b      	orrs	r3, r1
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2204      	movs	r2, #4
 8002a22:	4393      	bics	r3, r2
 8002a24:	001a      	movs	r2, r3
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	0c1b      	lsrs	r3, r3, #16
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6a1a      	ldr	r2, [r3, #32]
 8002a36:	2380      	movs	r3, #128	; 0x80
 8002a38:	019b      	lsls	r3, r3, #6
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d106      	bne.n	8002a4c <LL_SPI_Init+0x90>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	0011      	movs	r1, r2
 8002a46:	0018      	movs	r0, r3
 8002a48:	f7ff ffa9 	bl	800299e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002a4c:	230f      	movs	r3, #15
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8002a54:	230f      	movs	r3, #15
 8002a56:	18fb      	adds	r3, r7, r3
 8002a58:	781b      	ldrb	r3, [r3, #0]
}
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b004      	add	sp, #16
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	ffff0040 	.word	0xffff0040

08002a68 <__libc_init_array>:
 8002a68:	b570      	push	{r4, r5, r6, lr}
 8002a6a:	2600      	movs	r6, #0
 8002a6c:	4d0c      	ldr	r5, [pc, #48]	; (8002aa0 <__libc_init_array+0x38>)
 8002a6e:	4c0d      	ldr	r4, [pc, #52]	; (8002aa4 <__libc_init_array+0x3c>)
 8002a70:	1b64      	subs	r4, r4, r5
 8002a72:	10a4      	asrs	r4, r4, #2
 8002a74:	42a6      	cmp	r6, r4
 8002a76:	d109      	bne.n	8002a8c <__libc_init_array+0x24>
 8002a78:	2600      	movs	r6, #0
 8002a7a:	f000 f821 	bl	8002ac0 <_init>
 8002a7e:	4d0a      	ldr	r5, [pc, #40]	; (8002aa8 <__libc_init_array+0x40>)
 8002a80:	4c0a      	ldr	r4, [pc, #40]	; (8002aac <__libc_init_array+0x44>)
 8002a82:	1b64      	subs	r4, r4, r5
 8002a84:	10a4      	asrs	r4, r4, #2
 8002a86:	42a6      	cmp	r6, r4
 8002a88:	d105      	bne.n	8002a96 <__libc_init_array+0x2e>
 8002a8a:	bd70      	pop	{r4, r5, r6, pc}
 8002a8c:	00b3      	lsls	r3, r6, #2
 8002a8e:	58eb      	ldr	r3, [r5, r3]
 8002a90:	4798      	blx	r3
 8002a92:	3601      	adds	r6, #1
 8002a94:	e7ee      	b.n	8002a74 <__libc_init_array+0xc>
 8002a96:	00b3      	lsls	r3, r6, #2
 8002a98:	58eb      	ldr	r3, [r5, r3]
 8002a9a:	4798      	blx	r3
 8002a9c:	3601      	adds	r6, #1
 8002a9e:	e7f2      	b.n	8002a86 <__libc_init_array+0x1e>
 8002aa0:	08002b04 	.word	0x08002b04
 8002aa4:	08002b04 	.word	0x08002b04
 8002aa8:	08002b04 	.word	0x08002b04
 8002aac:	08002b08 	.word	0x08002b08

08002ab0 <memset>:
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	1812      	adds	r2, r2, r0
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d100      	bne.n	8002aba <memset+0xa>
 8002ab8:	4770      	bx	lr
 8002aba:	7019      	strb	r1, [r3, #0]
 8002abc:	3301      	adds	r3, #1
 8002abe:	e7f9      	b.n	8002ab4 <memset+0x4>

08002ac0 <_init>:
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac6:	bc08      	pop	{r3}
 8002ac8:	469e      	mov	lr, r3
 8002aca:	4770      	bx	lr

08002acc <_fini>:
 8002acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad2:	bc08      	pop	{r3}
 8002ad4:	469e      	mov	lr, r3
 8002ad6:	4770      	bx	lr
