
BME_IoT_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000379c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800385c  0800385c  0001385c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003950  08003950  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  08003950  08003950  00013950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003958  08003958  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003958  08003958  00013958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08003960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000040  080039a0  00020040  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080039a0  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac2a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002140  00000000  00000000  0002ac92  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb8  00000000  00000000  0002cdd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba0  00000000  00000000  0002da90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013ed4  00000000  00000000  0002e630  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a1e2  00000000  00000000  00042504  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00073bc9  00000000  00000000  0004c6e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c02af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d20  00000000  00000000  000c032c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000040 	.word	0x20000040
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003844 	.word	0x08003844

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000044 	.word	0x20000044
 8000104:	08003844 	.word	0x08003844

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	464f      	mov	r7, r9
 8000438:	4646      	mov	r6, r8
 800043a:	46d6      	mov	lr, sl
 800043c:	b5c0      	push	{r6, r7, lr}
 800043e:	0004      	movs	r4, r0
 8000440:	b082      	sub	sp, #8
 8000442:	000d      	movs	r5, r1
 8000444:	4691      	mov	r9, r2
 8000446:	4698      	mov	r8, r3
 8000448:	428b      	cmp	r3, r1
 800044a:	d82f      	bhi.n	80004ac <__udivmoddi4+0x78>
 800044c:	d02c      	beq.n	80004a8 <__udivmoddi4+0x74>
 800044e:	4641      	mov	r1, r8
 8000450:	4648      	mov	r0, r9
 8000452:	f000 f8cf 	bl	80005f4 <__clzdi2>
 8000456:	0029      	movs	r1, r5
 8000458:	0006      	movs	r6, r0
 800045a:	0020      	movs	r0, r4
 800045c:	f000 f8ca 	bl	80005f4 <__clzdi2>
 8000460:	1a33      	subs	r3, r6, r0
 8000462:	469c      	mov	ip, r3
 8000464:	3b20      	subs	r3, #32
 8000466:	469a      	mov	sl, r3
 8000468:	d500      	bpl.n	800046c <__udivmoddi4+0x38>
 800046a:	e076      	b.n	800055a <__udivmoddi4+0x126>
 800046c:	464b      	mov	r3, r9
 800046e:	4652      	mov	r2, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	001f      	movs	r7, r3
 8000474:	464b      	mov	r3, r9
 8000476:	4662      	mov	r2, ip
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d828      	bhi.n	80004d2 <__udivmoddi4+0x9e>
 8000480:	d025      	beq.n	80004ce <__udivmoddi4+0x9a>
 8000482:	4653      	mov	r3, sl
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5a>
 800048c:	e07b      	b.n	8000586 <__udivmoddi4+0x152>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	4652      	mov	r2, sl
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4662      	mov	r2, ip
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e018      	b.n	80004da <__udivmoddi4+0xa6>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9d0      	bls.n	800044e <__udivmoddi4+0x1a>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8a>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b002      	add	sp, #8
 80004c4:	bc1c      	pop	{r2, r3, r4}
 80004c6:	4690      	mov	r8, r2
 80004c8:	4699      	mov	r9, r3
 80004ca:	46a2      	mov	sl, r4
 80004cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d9d7      	bls.n	8000482 <__udivmoddi4+0x4e>
 80004d2:	2200      	movs	r2, #0
 80004d4:	2300      	movs	r3, #0
 80004d6:	9200      	str	r2, [sp, #0]
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	4663      	mov	r3, ip
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d0e9      	beq.n	80004b4 <__udivmoddi4+0x80>
 80004e0:	07fb      	lsls	r3, r7, #31
 80004e2:	4698      	mov	r8, r3
 80004e4:	4641      	mov	r1, r8
 80004e6:	0872      	lsrs	r2, r6, #1
 80004e8:	430a      	orrs	r2, r1
 80004ea:	087b      	lsrs	r3, r7, #1
 80004ec:	4666      	mov	r6, ip
 80004ee:	e00e      	b.n	800050e <__udivmoddi4+0xda>
 80004f0:	42ab      	cmp	r3, r5
 80004f2:	d101      	bne.n	80004f8 <__udivmoddi4+0xc4>
 80004f4:	42a2      	cmp	r2, r4
 80004f6:	d80c      	bhi.n	8000512 <__udivmoddi4+0xde>
 80004f8:	1aa4      	subs	r4, r4, r2
 80004fa:	419d      	sbcs	r5, r3
 80004fc:	2001      	movs	r0, #1
 80004fe:	1924      	adds	r4, r4, r4
 8000500:	416d      	adcs	r5, r5
 8000502:	2100      	movs	r1, #0
 8000504:	3e01      	subs	r6, #1
 8000506:	1824      	adds	r4, r4, r0
 8000508:	414d      	adcs	r5, r1
 800050a:	2e00      	cmp	r6, #0
 800050c:	d006      	beq.n	800051c <__udivmoddi4+0xe8>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d9ee      	bls.n	80004f0 <__udivmoddi4+0xbc>
 8000512:	3e01      	subs	r6, #1
 8000514:	1924      	adds	r4, r4, r4
 8000516:	416d      	adcs	r5, r5
 8000518:	2e00      	cmp	r6, #0
 800051a:	d1f8      	bne.n	800050e <__udivmoddi4+0xda>
 800051c:	9800      	ldr	r0, [sp, #0]
 800051e:	9901      	ldr	r1, [sp, #4]
 8000520:	4653      	mov	r3, sl
 8000522:	1900      	adds	r0, r0, r4
 8000524:	4169      	adcs	r1, r5
 8000526:	2b00      	cmp	r3, #0
 8000528:	db23      	blt.n	8000572 <__udivmoddi4+0x13e>
 800052a:	002b      	movs	r3, r5
 800052c:	4652      	mov	r2, sl
 800052e:	40d3      	lsrs	r3, r2
 8000530:	002a      	movs	r2, r5
 8000532:	4664      	mov	r4, ip
 8000534:	40e2      	lsrs	r2, r4
 8000536:	001c      	movs	r4, r3
 8000538:	4653      	mov	r3, sl
 800053a:	0015      	movs	r5, r2
 800053c:	2b00      	cmp	r3, #0
 800053e:	db2d      	blt.n	800059c <__udivmoddi4+0x168>
 8000540:	0026      	movs	r6, r4
 8000542:	4657      	mov	r7, sl
 8000544:	40be      	lsls	r6, r7
 8000546:	0033      	movs	r3, r6
 8000548:	0026      	movs	r6, r4
 800054a:	4667      	mov	r7, ip
 800054c:	40be      	lsls	r6, r7
 800054e:	0032      	movs	r2, r6
 8000550:	1a80      	subs	r0, r0, r2
 8000552:	4199      	sbcs	r1, r3
 8000554:	9000      	str	r0, [sp, #0]
 8000556:	9101      	str	r1, [sp, #4]
 8000558:	e7ac      	b.n	80004b4 <__udivmoddi4+0x80>
 800055a:	4662      	mov	r2, ip
 800055c:	2320      	movs	r3, #32
 800055e:	1a9b      	subs	r3, r3, r2
 8000560:	464a      	mov	r2, r9
 8000562:	40da      	lsrs	r2, r3
 8000564:	4661      	mov	r1, ip
 8000566:	0013      	movs	r3, r2
 8000568:	4642      	mov	r2, r8
 800056a:	408a      	lsls	r2, r1
 800056c:	0017      	movs	r7, r2
 800056e:	431f      	orrs	r7, r3
 8000570:	e780      	b.n	8000474 <__udivmoddi4+0x40>
 8000572:	4662      	mov	r2, ip
 8000574:	2320      	movs	r3, #32
 8000576:	1a9b      	subs	r3, r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	4666      	mov	r6, ip
 800057c:	409a      	lsls	r2, r3
 800057e:	0023      	movs	r3, r4
 8000580:	40f3      	lsrs	r3, r6
 8000582:	4313      	orrs	r3, r2
 8000584:	e7d4      	b.n	8000530 <__udivmoddi4+0xfc>
 8000586:	4662      	mov	r2, ip
 8000588:	2320      	movs	r3, #32
 800058a:	2100      	movs	r1, #0
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	2200      	movs	r2, #0
 8000590:	9100      	str	r1, [sp, #0]
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	2201      	movs	r2, #1
 8000596:	40da      	lsrs	r2, r3
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	e780      	b.n	800049e <__udivmoddi4+0x6a>
 800059c:	2320      	movs	r3, #32
 800059e:	4662      	mov	r2, ip
 80005a0:	0026      	movs	r6, r4
 80005a2:	1a9b      	subs	r3, r3, r2
 80005a4:	40de      	lsrs	r6, r3
 80005a6:	002f      	movs	r7, r5
 80005a8:	46b0      	mov	r8, r6
 80005aa:	4666      	mov	r6, ip
 80005ac:	40b7      	lsls	r7, r6
 80005ae:	4646      	mov	r6, r8
 80005b0:	003b      	movs	r3, r7
 80005b2:	4333      	orrs	r3, r6
 80005b4:	e7c8      	b.n	8000548 <__udivmoddi4+0x114>
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__clzsi2>:
 80005b8:	211c      	movs	r1, #28
 80005ba:	2301      	movs	r3, #1
 80005bc:	041b      	lsls	r3, r3, #16
 80005be:	4298      	cmp	r0, r3
 80005c0:	d301      	bcc.n	80005c6 <__clzsi2+0xe>
 80005c2:	0c00      	lsrs	r0, r0, #16
 80005c4:	3910      	subs	r1, #16
 80005c6:	0a1b      	lsrs	r3, r3, #8
 80005c8:	4298      	cmp	r0, r3
 80005ca:	d301      	bcc.n	80005d0 <__clzsi2+0x18>
 80005cc:	0a00      	lsrs	r0, r0, #8
 80005ce:	3908      	subs	r1, #8
 80005d0:	091b      	lsrs	r3, r3, #4
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d301      	bcc.n	80005da <__clzsi2+0x22>
 80005d6:	0900      	lsrs	r0, r0, #4
 80005d8:	3904      	subs	r1, #4
 80005da:	a202      	add	r2, pc, #8	; (adr r2, 80005e4 <__clzsi2+0x2c>)
 80005dc:	5c10      	ldrb	r0, [r2, r0]
 80005de:	1840      	adds	r0, r0, r1
 80005e0:	4770      	bx	lr
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	02020304 	.word	0x02020304
 80005e8:	01010101 	.word	0x01010101
	...

080005f4 <__clzdi2>:
 80005f4:	b510      	push	{r4, lr}
 80005f6:	2900      	cmp	r1, #0
 80005f8:	d103      	bne.n	8000602 <__clzdi2+0xe>
 80005fa:	f7ff ffdd 	bl	80005b8 <__clzsi2>
 80005fe:	3020      	adds	r0, #32
 8000600:	e002      	b.n	8000608 <__clzdi2+0x14>
 8000602:	1c08      	adds	r0, r1, #0
 8000604:	f7ff ffd8 	bl	80005b8 <__clzsi2>
 8000608:	bd10      	pop	{r4, pc}
 800060a:	46c0      	nop			; (mov r8, r8)

0800060c <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 800060c:	b5b0      	push	{r4, r5, r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8000614:	230e      	movs	r3, #14
 8000616:	18fb      	adds	r3, r7, r3
 8000618:	2205      	movs	r2, #5
 800061a:	701a      	strb	r2, [r3, #0]
    uint8_t chip_id = 0;
 800061c:	230d      	movs	r3, #13
 800061e:	18fb      	adds	r3, r7, r3
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000624:	250f      	movs	r5, #15
 8000626:	197c      	adds	r4, r7, r5
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	0018      	movs	r0, r3
 800062c:	f000 fe73 	bl	8001316 <null_ptr_check>
 8000630:	0003      	movs	r3, r0
 8000632:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8000634:	197b      	adds	r3, r7, r5
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	b25b      	sxtb	r3, r3
 800063a:	2b00      	cmp	r3, #0
 800063c:	d14a      	bne.n	80006d4 <bme280_init+0xc8>
    {
        while (try_count)
 800063e:	e039      	b.n	80006b4 <bme280_init+0xa8>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000640:	250f      	movs	r5, #15
 8000642:	197c      	adds	r4, r7, r5
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	220d      	movs	r2, #13
 8000648:	18b9      	adds	r1, r7, r2
 800064a:	2201      	movs	r2, #1
 800064c:	20d0      	movs	r0, #208	; 0xd0
 800064e:	f000 f849 	bl	80006e4 <bme280_get_regs>
 8000652:	0003      	movs	r3, r0
 8000654:	7023      	strb	r3, [r4, #0]

            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8000656:	197b      	adds	r3, r7, r5
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	b25b      	sxtb	r3, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	d11f      	bne.n	80006a0 <bme280_init+0x94>
 8000660:	230d      	movs	r3, #13
 8000662:	18fb      	adds	r3, r7, r3
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b60      	cmp	r3, #96	; 0x60
 8000668:	d11a      	bne.n	80006a0 <bme280_init+0x94>
            {
                dev->chip_id = chip_id;
 800066a:	230d      	movs	r3, #13
 800066c:	18fb      	adds	r3, r7, r3
 800066e:	781a      	ldrb	r2, [r3, #0]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8000674:	250f      	movs	r5, #15
 8000676:	197c      	adds	r4, r7, r5
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	0018      	movs	r0, r3
 800067c:	f000 f9ac 	bl	80009d8 <bme280_soft_reset>
 8000680:	0003      	movs	r3, r0
 8000682:	7023      	strb	r3, [r4, #0]
                if (rslt == BME280_OK)
 8000684:	197b      	adds	r3, r7, r5
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b25b      	sxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d118      	bne.n	80006c0 <bme280_init+0xb4>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 800068e:	230f      	movs	r3, #15
 8000690:	18fc      	adds	r4, r7, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	0018      	movs	r0, r3
 8000696:	f000 fc90 	bl	8000fba <get_calib_data>
 800069a:	0003      	movs	r3, r0
 800069c:	7023      	strb	r3, [r4, #0]
                }
                break;
 800069e:	e00f      	b.n	80006c0 <bme280_init+0xb4>
            }

            /* Wait for 1 ms */
            dev->delay_ms(1);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	2001      	movs	r0, #1
 80006a6:	4798      	blx	r3
            --try_count;
 80006a8:	220e      	movs	r2, #14
 80006aa:	18bb      	adds	r3, r7, r2
 80006ac:	18ba      	adds	r2, r7, r2
 80006ae:	7812      	ldrb	r2, [r2, #0]
 80006b0:	3a01      	subs	r2, #1
 80006b2:	701a      	strb	r2, [r3, #0]
        while (try_count)
 80006b4:	230e      	movs	r3, #14
 80006b6:	18fb      	adds	r3, r7, r3
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d1c0      	bne.n	8000640 <bme280_init+0x34>
 80006be:	e000      	b.n	80006c2 <bme280_init+0xb6>
                break;
 80006c0:	46c0      	nop			; (mov r8, r8)
        }

        /* Chip id check failed */
        if (!try_count)
 80006c2:	230e      	movs	r3, #14
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d103      	bne.n	80006d4 <bme280_init+0xc8>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 80006cc:	230f      	movs	r3, #15
 80006ce:	18fb      	adds	r3, r7, r3
 80006d0:	22fe      	movs	r2, #254	; 0xfe
 80006d2:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 80006d4:	230f      	movs	r3, #15
 80006d6:	18fb      	adds	r3, r7, r3
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b25b      	sxtb	r3, r3
}
 80006dc:	0018      	movs	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	b004      	add	sp, #16
 80006e2:	bdb0      	pop	{r4, r5, r7, pc}

080006e4 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 80006e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006e6:	b087      	sub	sp, #28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60b9      	str	r1, [r7, #8]
 80006ec:	0011      	movs	r1, r2
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	230f      	movs	r3, #15
 80006f2:	18fb      	adds	r3, r7, r3
 80006f4:	1c02      	adds	r2, r0, #0
 80006f6:	701a      	strb	r2, [r3, #0]
 80006f8:	230c      	movs	r3, #12
 80006fa:	18fb      	adds	r3, r7, r3
 80006fc:	1c0a      	adds	r2, r1, #0
 80006fe:	801a      	strh	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000700:	2517      	movs	r5, #23
 8000702:	197c      	adds	r4, r7, r5
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	0018      	movs	r0, r3
 8000708:	f000 fe05 	bl	8001316 <null_ptr_check>
 800070c:	0003      	movs	r3, r0
 800070e:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8000710:	197b      	adds	r3, r7, r5
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	b25b      	sxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d126      	bne.n	8000768 <bme280_get_regs+0x84>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	789b      	ldrb	r3, [r3, #2]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d007      	beq.n	8000732 <bme280_get_regs+0x4e>
        {
            reg_addr = reg_addr | 0x80;
 8000722:	220f      	movs	r2, #15
 8000724:	18bb      	adds	r3, r7, r2
 8000726:	18ba      	adds	r2, r7, r2
 8000728:	7812      	ldrb	r2, [r2, #0]
 800072a:	2180      	movs	r1, #128	; 0x80
 800072c:	4249      	negs	r1, r1
 800072e:	430a      	orrs	r2, r1
 8000730:	701a      	strb	r2, [r3, #0]
        }

        /* Read the data  */
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	685d      	ldr	r5, [r3, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	7858      	ldrb	r0, [r3, #1]
 800073a:	2317      	movs	r3, #23
 800073c:	18fc      	adds	r4, r7, r3
 800073e:	220c      	movs	r2, #12
 8000740:	18bb      	adds	r3, r7, r2
 8000742:	881e      	ldrh	r6, [r3, #0]
 8000744:	68ba      	ldr	r2, [r7, #8]
 8000746:	210f      	movs	r1, #15
 8000748:	187b      	adds	r3, r7, r1
 800074a:	7819      	ldrb	r1, [r3, #0]
 800074c:	0033      	movs	r3, r6
 800074e:	47a8      	blx	r5
 8000750:	0003      	movs	r3, r0
 8000752:	7023      	strb	r3, [r4, #0]

        /* Check for communication error */
        if (rslt != BME280_OK)
 8000754:	2317      	movs	r3, #23
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	b25b      	sxtb	r3, r3
 800075c:	2b00      	cmp	r3, #0
 800075e:	d003      	beq.n	8000768 <bme280_get_regs+0x84>
        {
            rslt = BME280_E_COMM_FAIL;
 8000760:	2317      	movs	r3, #23
 8000762:	18fb      	adds	r3, r7, r3
 8000764:	22fc      	movs	r2, #252	; 0xfc
 8000766:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 8000768:	2317      	movs	r3, #23
 800076a:	18fb      	adds	r3, r7, r3
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	b25b      	sxtb	r3, r3
}
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	b007      	add	sp, #28
 8000776:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000778 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8000778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800077a:	b08d      	sub	sp, #52	; 0x34
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	1dfb      	adds	r3, r7, #7
 8000786:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8000788:	1dfb      	adds	r3, r7, #7
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b0a      	cmp	r3, #10
 800078e:	d902      	bls.n	8000796 <bme280_set_regs+0x1e>
    {
        len = 10;
 8000790:	1dfb      	adds	r3, r7, #7
 8000792:	220a      	movs	r2, #10
 8000794:	701a      	strb	r2, [r3, #0]
    }
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000796:	252f      	movs	r5, #47	; 0x2f
 8000798:	197c      	adds	r4, r7, r5
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	0018      	movs	r0, r3
 800079e:	f000 fdba 	bl	8001316 <null_ptr_check>
 80007a2:	0003      	movs	r3, r0
 80007a4:	7023      	strb	r3, [r4, #0]

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80007a6:	197b      	adds	r3, r7, r5
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	b25b      	sxtb	r3, r3
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d16b      	bne.n	8000888 <bme280_set_regs+0x110>
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d068      	beq.n	8000888 <bme280_set_regs+0x110>
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d065      	beq.n	8000888 <bme280_set_regs+0x110>
    {
        if (len != 0)
 80007bc:	1dfb      	adds	r3, r7, #7
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d05c      	beq.n	800087e <bme280_set_regs+0x106>
        {
            temp_buff[0] = reg_data[0];
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	781a      	ldrb	r2, [r3, #0]
 80007c8:	2314      	movs	r3, #20
 80007ca:	18fb      	adds	r3, r7, r3
 80007cc:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	789b      	ldrb	r3, [r3, #2]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d01e      	beq.n	8000814 <bme280_set_regs+0x9c>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80007d6:	232b      	movs	r3, #43	; 0x2b
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
 80007de:	e012      	b.n	8000806 <bme280_set_regs+0x8e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80007e0:	202b      	movs	r0, #43	; 0x2b
 80007e2:	183b      	adds	r3, r7, r0
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	18d3      	adds	r3, r2, r3
 80007ea:	781a      	ldrb	r2, [r3, #0]
 80007ec:	183b      	adds	r3, r7, r0
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	68f9      	ldr	r1, [r7, #12]
 80007f2:	18cb      	adds	r3, r1, r3
 80007f4:	217f      	movs	r1, #127	; 0x7f
 80007f6:	400a      	ands	r2, r1
 80007f8:	b2d2      	uxtb	r2, r2
 80007fa:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80007fc:	183b      	adds	r3, r7, r0
 80007fe:	781a      	ldrb	r2, [r3, #0]
 8000800:	183b      	adds	r3, r7, r0
 8000802:	3201      	adds	r2, #1
 8000804:	701a      	strb	r2, [r3, #0]
 8000806:	232b      	movs	r3, #43	; 0x2b
 8000808:	18fa      	adds	r2, r7, r3
 800080a:	1dfb      	adds	r3, r7, #7
 800080c:	7812      	ldrb	r2, [r2, #0]
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	429a      	cmp	r2, r3
 8000812:	d3e5      	bcc.n	80007e0 <bme280_set_regs+0x68>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8000814:	1dfb      	adds	r3, r7, #7
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d911      	bls.n	8000840 <bme280_set_regs+0xc8>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 800081c:	1dfb      	adds	r3, r7, #7
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	68ba      	ldr	r2, [r7, #8]
 8000822:	2114      	movs	r1, #20
 8000824:	1879      	adds	r1, r7, r1
 8000826:	68f8      	ldr	r0, [r7, #12]
 8000828:	f000 fc14 	bl	8001054 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 800082c:	1dfb      	adds	r3, r7, #7
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	b29b      	uxth	r3, r3
 8000832:	18db      	adds	r3, r3, r3
 8000834:	b29a      	uxth	r2, r3
 8000836:	232c      	movs	r3, #44	; 0x2c
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	3a01      	subs	r2, #1
 800083c:	801a      	strh	r2, [r3, #0]
 800083e:	e004      	b.n	800084a <bme280_set_regs+0xd2>
            }
            else
            {
                temp_len = len;
 8000840:	232c      	movs	r3, #44	; 0x2c
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	1dfa      	adds	r2, r7, #7
 8000846:	7812      	ldrb	r2, [r2, #0]
 8000848:	801a      	strh	r2, [r3, #0]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	689d      	ldr	r5, [r3, #8]
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	7858      	ldrb	r0, [r3, #1]
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	7819      	ldrb	r1, [r3, #0]
 8000856:	262f      	movs	r6, #47	; 0x2f
 8000858:	19bc      	adds	r4, r7, r6
 800085a:	232c      	movs	r3, #44	; 0x2c
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	2214      	movs	r2, #20
 8000862:	18ba      	adds	r2, r7, r2
 8000864:	47a8      	blx	r5
 8000866:	0003      	movs	r3, r0
 8000868:	7023      	strb	r3, [r4, #0]

            /* Check for communication error */
            if (rslt != BME280_OK)
 800086a:	19bb      	adds	r3, r7, r6
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b25b      	sxtb	r3, r3
 8000870:	2b00      	cmp	r3, #0
 8000872:	d00e      	beq.n	8000892 <bme280_set_regs+0x11a>
            {
                rslt = BME280_E_COMM_FAIL;
 8000874:	232f      	movs	r3, #47	; 0x2f
 8000876:	18fb      	adds	r3, r7, r3
 8000878:	22fc      	movs	r2, #252	; 0xfc
 800087a:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 800087c:	e009      	b.n	8000892 <bme280_set_regs+0x11a>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 800087e:	232f      	movs	r3, #47	; 0x2f
 8000880:	18fb      	adds	r3, r7, r3
 8000882:	22fd      	movs	r2, #253	; 0xfd
 8000884:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 8000886:	e004      	b.n	8000892 <bme280_set_regs+0x11a>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8000888:	232f      	movs	r3, #47	; 0x2f
 800088a:	18fb      	adds	r3, r7, r3
 800088c:	22ff      	movs	r2, #255	; 0xff
 800088e:	701a      	strb	r2, [r3, #0]
 8000890:	e000      	b.n	8000894 <bme280_set_regs+0x11c>
        if (len != 0)
 8000892:	46c0      	nop			; (mov r8, r8)
    }

    return rslt;
 8000894:	232f      	movs	r3, #47	; 0x2f
 8000896:	18fb      	adds	r3, r7, r3
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	b25b      	sxtb	r3, r3
}
 800089c:	0018      	movs	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	b00d      	add	sp, #52	; 0x34
 80008a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008a4 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 80008a4:	b5b0      	push	{r4, r5, r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	0002      	movs	r2, r0
 80008ac:	6039      	str	r1, [r7, #0]
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80008b2:	250f      	movs	r5, #15
 80008b4:	197c      	adds	r4, r7, r5
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	0018      	movs	r0, r3
 80008ba:	f000 fd2c 	bl	8001316 <null_ptr_check>
 80008be:	0003      	movs	r3, r0
 80008c0:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80008c2:	197b      	adds	r3, r7, r5
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	b25b      	sxtb	r3, r3
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d152      	bne.n	8000972 <bme280_set_sensor_settings+0xce>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 80008cc:	250f      	movs	r5, #15
 80008ce:	197c      	adds	r4, r7, r5
 80008d0:	683a      	ldr	r2, [r7, #0]
 80008d2:	230e      	movs	r3, #14
 80008d4:	18fb      	adds	r3, r7, r3
 80008d6:	0011      	movs	r1, r2
 80008d8:	0018      	movs	r0, r3
 80008da:	f000 f852 	bl	8000982 <bme280_get_sensor_mode>
 80008de:	0003      	movs	r3, r0
 80008e0:	7023      	strb	r3, [r4, #0]
        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 80008e2:	197b      	adds	r3, r7, r5
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	b25b      	sxtb	r3, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d10c      	bne.n	8000906 <bme280_set_sensor_settings+0x62>
 80008ec:	230e      	movs	r3, #14
 80008ee:	18fb      	adds	r3, r7, r3
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d007      	beq.n	8000906 <bme280_set_sensor_settings+0x62>
        {
            rslt = put_device_to_sleep(dev);
 80008f6:	230f      	movs	r3, #15
 80008f8:	18fc      	adds	r4, r7, r3
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 fafa 	bl	8000ef6 <put_device_to_sleep>
 8000902:	0003      	movs	r3, r0
 8000904:	7023      	strb	r3, [r4, #0]
        }
        if (rslt == BME280_OK)
 8000906:	230f      	movs	r3, #15
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	b25b      	sxtb	r3, r3
 800090e:	2b00      	cmp	r3, #0
 8000910:	d12f      	bne.n	8000972 <bme280_set_sensor_settings+0xce>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	0019      	movs	r1, r3
 8000918:	2007      	movs	r0, #7
 800091a:	f000 fcd7 	bl	80012cc <are_settings_changed>
 800091e:	1e03      	subs	r3, r0, #0
 8000920:	d00c      	beq.n	800093c <bme280_set_sensor_settings+0x98>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	3338      	adds	r3, #56	; 0x38
 8000926:	0019      	movs	r1, r3
 8000928:	230f      	movs	r3, #15
 800092a:	18fc      	adds	r4, r7, r3
 800092c:	683a      	ldr	r2, [r7, #0]
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	0018      	movs	r0, r3
 8000934:	f000 f930 	bl	8000b98 <set_osr_settings>
 8000938:	0003      	movs	r3, r0
 800093a:	7023      	strb	r3, [r4, #0]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 800093c:	230f      	movs	r3, #15
 800093e:	18fb      	adds	r3, r7, r3
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	b25b      	sxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d114      	bne.n	8000972 <bme280_set_sensor_settings+0xce>
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	0019      	movs	r1, r3
 800094e:	2018      	movs	r0, #24
 8000950:	f000 fcbc 	bl	80012cc <are_settings_changed>
 8000954:	1e03      	subs	r3, r0, #0
 8000956:	d00c      	beq.n	8000972 <bme280_set_sensor_settings+0xce>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	3338      	adds	r3, #56	; 0x38
 800095c:	0019      	movs	r1, r3
 800095e:	230f      	movs	r3, #15
 8000960:	18fc      	adds	r4, r7, r3
 8000962:	683a      	ldr	r2, [r7, #0]
 8000964:	1dfb      	adds	r3, r7, #7
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	0018      	movs	r0, r3
 800096a:	f000 f9e0 	bl	8000d2e <set_filter_standby_settings>
 800096e:	0003      	movs	r3, r0
 8000970:	7023      	strb	r3, [r4, #0]
            }
        }
    }

    return rslt;
 8000972:	230f      	movs	r3, #15
 8000974:	18fb      	adds	r3, r7, r3
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b25b      	sxtb	r3, r3
}
 800097a:	0018      	movs	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	b004      	add	sp, #16
 8000980:	bdb0      	pop	{r4, r5, r7, pc}

08000982 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8000982:	b5b0      	push	{r4, r5, r7, lr}
 8000984:	b084      	sub	sp, #16
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
 800098a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800098c:	250f      	movs	r5, #15
 800098e:	197c      	adds	r4, r7, r5
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	0018      	movs	r0, r3
 8000994:	f000 fcbf 	bl	8001316 <null_ptr_check>
 8000998:	0003      	movs	r3, r0
 800099a:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 800099c:	197b      	adds	r3, r7, r5
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b25b      	sxtb	r3, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d110      	bne.n	80009c8 <bme280_get_sensor_mode+0x46>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 80009a6:	230f      	movs	r3, #15
 80009a8:	18fc      	adds	r4, r7, r3
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	6879      	ldr	r1, [r7, #4]
 80009ae:	2201      	movs	r2, #1
 80009b0:	20f4      	movs	r0, #244	; 0xf4
 80009b2:	f7ff fe97 	bl	80006e4 <bme280_get_regs>
 80009b6:	0003      	movs	r3, r0
 80009b8:	7023      	strb	r3, [r4, #0]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2203      	movs	r2, #3
 80009c0:	4013      	ands	r3, r2
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80009c8:	230f      	movs	r3, #15
 80009ca:	18fb      	adds	r3, r7, r3
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b25b      	sxtb	r3, r3
}
 80009d0:	0018      	movs	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b004      	add	sp, #16
 80009d6:	bdb0      	pop	{r4, r5, r7, pc}

080009d8 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 80009d8:	b5b0      	push	{r4, r5, r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 80009e0:	230d      	movs	r3, #13
 80009e2:	18fb      	adds	r3, r7, r3
 80009e4:	22e0      	movs	r2, #224	; 0xe0
 80009e6:	701a      	strb	r2, [r3, #0]
    uint8_t status_reg = 0;
 80009e8:	230c      	movs	r3, #12
 80009ea:	18fb      	adds	r3, r7, r3
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
    uint8_t try_run = 5;
 80009f0:	230e      	movs	r3, #14
 80009f2:	18fb      	adds	r3, r7, r3
 80009f4:	2205      	movs	r2, #5
 80009f6:	701a      	strb	r2, [r3, #0]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 80009f8:	230b      	movs	r3, #11
 80009fa:	18fb      	adds	r3, r7, r3
 80009fc:	22b6      	movs	r2, #182	; 0xb6
 80009fe:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000a00:	250f      	movs	r5, #15
 8000a02:	197c      	adds	r4, r7, r5
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 fc85 	bl	8001316 <null_ptr_check>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8000a10:	197b      	adds	r3, r7, r5
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b25b      	sxtb	r3, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d13e      	bne.n	8000a98 <bme280_soft_reset+0xc0>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000a1a:	250f      	movs	r5, #15
 8000a1c:	197c      	adds	r4, r7, r5
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	220b      	movs	r2, #11
 8000a22:	18b9      	adds	r1, r7, r2
 8000a24:	220d      	movs	r2, #13
 8000a26:	18b8      	adds	r0, r7, r2
 8000a28:	2201      	movs	r2, #1
 8000a2a:	f7ff fea5 	bl	8000778 <bme280_set_regs>
 8000a2e:	0003      	movs	r3, r0
 8000a30:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 8000a32:	197b      	adds	r3, r7, r5
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b25b      	sxtb	r3, r3
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d12d      	bne.n	8000a98 <bme280_soft_reset+0xc0>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_ms(2);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	2002      	movs	r0, #2
 8000a42:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 8000a44:	250f      	movs	r5, #15
 8000a46:	197c      	adds	r4, r7, r5
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	18b9      	adds	r1, r7, r2
 8000a4e:	2201      	movs	r2, #1
 8000a50:	20f3      	movs	r0, #243	; 0xf3
 8000a52:	f7ff fe47 	bl	80006e4 <bme280_get_regs>
 8000a56:	0003      	movs	r3, r0
 8000a58:	7023      	strb	r3, [r4, #0]
            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8000a5a:	197b      	adds	r3, r7, r5
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b25b      	sxtb	r3, r3
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d10e      	bne.n	8000a82 <bme280_soft_reset+0xaa>
 8000a64:	220e      	movs	r2, #14
 8000a66:	18bb      	adds	r3, r7, r2
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	18ba      	adds	r2, r7, r2
 8000a6c:	1e59      	subs	r1, r3, #1
 8000a6e:	7011      	strb	r1, [r2, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d006      	beq.n	8000a82 <bme280_soft_reset+0xaa>
 8000a74:	230c      	movs	r3, #12
 8000a76:	18fb      	adds	r3, r7, r3
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	001a      	movs	r2, r3
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	4013      	ands	r3, r2
 8000a80:	d1dc      	bne.n	8000a3c <bme280_soft_reset+0x64>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8000a82:	230c      	movs	r3, #12
 8000a84:	18fb      	adds	r3, r7, r3
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	001a      	movs	r2, r3
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	d003      	beq.n	8000a98 <bme280_soft_reset+0xc0>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 8000a90:	230f      	movs	r3, #15
 8000a92:	18fb      	adds	r3, r7, r3
 8000a94:	22fa      	movs	r2, #250	; 0xfa
 8000a96:	701a      	strb	r2, [r3, #0]
            }

        }
    }

    return rslt;
 8000a98:	230f      	movs	r3, #15
 8000a9a:	18fb      	adds	r3, r7, r3
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	b25b      	sxtb	r3, r3
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b004      	add	sp, #16
 8000aa6:	bdb0      	pop	{r4, r5, r7, pc}

08000aa8 <bme280_cal_meas_delay>:
/*!
 * @brief This API is used to calculate the maximum delay in milliseconds required for the
 * temperature/pressure/humidity(which ever at enabled) measurement to complete.
 */
uint32_t bme280_cal_meas_delay(const struct bme280_settings *settings)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
    uint8_t temp_osr;
    uint8_t pres_osr;
    uint8_t hum_osr;

    /*Array to map OSR config register value to actual OSR */
    uint8_t osr_sett_to_act_osr[] = { 0, 1, 2, 4, 8, 16 };
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	18fb      	adds	r3, r7, r3
 8000ab4:	4a35      	ldr	r2, [pc, #212]	; (8000b8c <bme280_cal_meas_delay+0xe4>)
 8000ab6:	6811      	ldr	r1, [r2, #0]
 8000ab8:	6019      	str	r1, [r3, #0]
 8000aba:	8892      	ldrh	r2, [r2, #4]
 8000abc:	809a      	strh	r2, [r3, #4]

    /* Mapping osr settings to the actual osr values e.g. 0b101 -> osr X16  */
    if (settings->osr_t <= 5)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	785b      	ldrb	r3, [r3, #1]
 8000ac2:	2b05      	cmp	r3, #5
 8000ac4:	d809      	bhi.n	8000ada <bme280_cal_meas_delay+0x32>
    {
        temp_osr = osr_sett_to_act_osr[settings->osr_t];
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	785b      	ldrb	r3, [r3, #1]
 8000aca:	0019      	movs	r1, r3
 8000acc:	2317      	movs	r3, #23
 8000ace:	18fb      	adds	r3, r7, r3
 8000ad0:	2208      	movs	r2, #8
 8000ad2:	18ba      	adds	r2, r7, r2
 8000ad4:	5c52      	ldrb	r2, [r2, r1]
 8000ad6:	701a      	strb	r2, [r3, #0]
 8000ad8:	e003      	b.n	8000ae2 <bme280_cal_meas_delay+0x3a>
    }
    else
    {
        temp_osr = 16;
 8000ada:	2317      	movs	r3, #23
 8000adc:	18fb      	adds	r3, r7, r3
 8000ade:	2210      	movs	r2, #16
 8000ae0:	701a      	strb	r2, [r3, #0]
    }

    if (settings->osr_p <= 5)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b05      	cmp	r3, #5
 8000ae8:	d809      	bhi.n	8000afe <bme280_cal_meas_delay+0x56>
    {
        pres_osr = osr_sett_to_act_osr[settings->osr_p];
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	0019      	movs	r1, r3
 8000af0:	2316      	movs	r3, #22
 8000af2:	18fb      	adds	r3, r7, r3
 8000af4:	2208      	movs	r2, #8
 8000af6:	18ba      	adds	r2, r7, r2
 8000af8:	5c52      	ldrb	r2, [r2, r1]
 8000afa:	701a      	strb	r2, [r3, #0]
 8000afc:	e003      	b.n	8000b06 <bme280_cal_meas_delay+0x5e>
    }
    else
    {
        pres_osr = 16;
 8000afe:	2316      	movs	r3, #22
 8000b00:	18fb      	adds	r3, r7, r3
 8000b02:	2210      	movs	r2, #16
 8000b04:	701a      	strb	r2, [r3, #0]
    }

    if (settings->osr_h <= 5)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	789b      	ldrb	r3, [r3, #2]
 8000b0a:	2b05      	cmp	r3, #5
 8000b0c:	d809      	bhi.n	8000b22 <bme280_cal_meas_delay+0x7a>
    {
        hum_osr = osr_sett_to_act_osr[settings->osr_h];
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	789b      	ldrb	r3, [r3, #2]
 8000b12:	0019      	movs	r1, r3
 8000b14:	2315      	movs	r3, #21
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	2208      	movs	r2, #8
 8000b1a:	18ba      	adds	r2, r7, r2
 8000b1c:	5c52      	ldrb	r2, [r2, r1]
 8000b1e:	701a      	strb	r2, [r3, #0]
 8000b20:	e003      	b.n	8000b2a <bme280_cal_meas_delay+0x82>
    }
    else
    {
        hum_osr = 16;
 8000b22:	2315      	movs	r3, #21
 8000b24:	18fb      	adds	r3, r7, r3
 8000b26:	2210      	movs	r2, #16
 8000b28:	701a      	strb	r2, [r3, #0]
    }

    max_delay =
        (uint32_t)((BME280_MEAS_OFFSET + (BME280_MEAS_DUR * temp_osr) +
 8000b2a:	2317      	movs	r3, #23
 8000b2c:	18fb      	adds	r3, r7, r3
 8000b2e:	781a      	ldrb	r2, [r3, #0]
 8000b30:	0013      	movs	r3, r2
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	189b      	adds	r3, r3, r2
 8000b36:	019b      	lsls	r3, r3, #6
 8000b38:	1a9b      	subs	r3, r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <bme280_cal_meas_delay+0xe8>)
 8000b3e:	1899      	adds	r1, r3, r2
                    ((BME280_MEAS_DUR * pres_osr) + BME280_PRES_HUM_MEAS_OFFSET) +
 8000b40:	2316      	movs	r3, #22
 8000b42:	18fb      	adds	r3, r7, r3
 8000b44:	781a      	ldrb	r2, [r3, #0]
 8000b46:	0013      	movs	r3, r2
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	189b      	adds	r3, r3, r2
 8000b4c:	019b      	lsls	r3, r3, #6
 8000b4e:	1a9b      	subs	r3, r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <bme280_cal_meas_delay+0xec>)
 8000b54:	4694      	mov	ip, r2
 8000b56:	4463      	add	r3, ip
        (uint32_t)((BME280_MEAS_OFFSET + (BME280_MEAS_DUR * temp_osr) +
 8000b58:	18c9      	adds	r1, r1, r3
                    ((BME280_MEAS_DUR * hum_osr) + BME280_PRES_HUM_MEAS_OFFSET)) / BME280_MEAS_SCALING_FACTOR);
 8000b5a:	2315      	movs	r3, #21
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	0013      	movs	r3, r2
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	189b      	adds	r3, r3, r2
 8000b66:	019b      	lsls	r3, r3, #6
 8000b68:	1a9b      	subs	r3, r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	4a09      	ldr	r2, [pc, #36]	; (8000b94 <bme280_cal_meas_delay+0xec>)
 8000b6e:	4694      	mov	ip, r2
 8000b70:	4463      	add	r3, ip
                    ((BME280_MEAS_DUR * pres_osr) + BME280_PRES_HUM_MEAS_OFFSET) +
 8000b72:	18ca      	adds	r2, r1, r3
                    ((BME280_MEAS_DUR * hum_osr) + BME280_PRES_HUM_MEAS_OFFSET)) / BME280_MEAS_SCALING_FACTOR);
 8000b74:	23fa      	movs	r3, #250	; 0xfa
 8000b76:	0099      	lsls	r1, r3, #2
 8000b78:	0010      	movs	r0, r2
 8000b7a:	f7ff fb4f 	bl	800021c <__divsi3>
 8000b7e:	0003      	movs	r3, r0
    max_delay =
 8000b80:	613b      	str	r3, [r7, #16]

    return max_delay;
 8000b82:	693b      	ldr	r3, [r7, #16]
}
 8000b84:	0018      	movs	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b006      	add	sp, #24
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	0800385c 	.word	0x0800385c
 8000b90:	000004e2 	.word	0x000004e2
 8000b94:	0000023f 	.word	0x0000023f

08000b98 <set_osr_settings>:
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings,
                               const struct bme280_settings *settings,
                               const struct bme280_dev *dev)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
 8000ba2:	210f      	movs	r1, #15
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	1c02      	adds	r2, r0, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8000baa:	2317      	movs	r3, #23
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]

    if (desired_settings & BME280_OSR_HUM_SEL)
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	4013      	ands	r3, r2
 8000bba:	d009      	beq.n	8000bd0 <set_osr_settings+0x38>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 8000bbc:	2317      	movs	r3, #23
 8000bbe:	18fc      	adds	r4, r7, r3
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	0011      	movs	r1, r2
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f000 f81c 	bl	8000c04 <set_osr_humidity_settings>
 8000bcc:	0003      	movs	r3, r0
 8000bce:	7023      	strb	r3, [r4, #0]
    }
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	4013      	ands	r3, r2
 8000bda:	d00b      	beq.n	8000bf4 <set_osr_settings+0x5c>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8000bdc:	2317      	movs	r3, #23
 8000bde:	18fc      	adds	r4, r7, r3
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	68b9      	ldr	r1, [r7, #8]
 8000be4:	230f      	movs	r3, #15
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	0018      	movs	r0, r3
 8000bec:	f000 f853 	bl	8000c96 <set_osr_press_temp_settings>
 8000bf0:	0003      	movs	r3, r0
 8000bf2:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8000bf4:	2317      	movs	r3, #23
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b25b      	sxtb	r3, r3
}
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b007      	add	sp, #28
 8000c02:	bd90      	pop	{r4, r7, pc}

08000c04 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8000c04:	b5b0      	push	{r4, r5, r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8000c0e:	200c      	movs	r0, #12
 8000c10:	183b      	adds	r3, r7, r0
 8000c12:	22f2      	movs	r2, #242	; 0xf2
 8000c14:	701a      	strb	r2, [r3, #0]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	789b      	ldrb	r3, [r3, #2]
 8000c1a:	2207      	movs	r2, #7
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	210e      	movs	r1, #14
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	701a      	strb	r2, [r3, #0]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8000c26:	250f      	movs	r5, #15
 8000c28:	197c      	adds	r4, r7, r5
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	1879      	adds	r1, r7, r1
 8000c2e:	1838      	adds	r0, r7, r0
 8000c30:	2201      	movs	r2, #1
 8000c32:	f7ff fda1 	bl	8000778 <bme280_set_regs>
 8000c36:	0003      	movs	r3, r0
 8000c38:	7023      	strb	r3, [r4, #0]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 8000c3a:	197b      	adds	r3, r7, r5
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	b25b      	sxtb	r3, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d120      	bne.n	8000c86 <set_osr_humidity_settings+0x82>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 8000c44:	210c      	movs	r1, #12
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	22f4      	movs	r2, #244	; 0xf4
 8000c4a:	701a      	strb	r2, [r3, #0]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	7818      	ldrb	r0, [r3, #0]
 8000c50:	250f      	movs	r5, #15
 8000c52:	197c      	adds	r4, r7, r5
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	220d      	movs	r2, #13
 8000c58:	18b9      	adds	r1, r7, r2
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f7ff fd42 	bl	80006e4 <bme280_get_regs>
 8000c60:	0003      	movs	r3, r0
 8000c62:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 8000c64:	197b      	adds	r3, r7, r5
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	b25b      	sxtb	r3, r3
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d10b      	bne.n	8000c86 <set_osr_humidity_settings+0x82>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8000c6e:	230f      	movs	r3, #15
 8000c70:	18fc      	adds	r4, r7, r3
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	220d      	movs	r2, #13
 8000c76:	18b9      	adds	r1, r7, r2
 8000c78:	220c      	movs	r2, #12
 8000c7a:	18b8      	adds	r0, r7, r2
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f7ff fd7b 	bl	8000778 <bme280_set_regs>
 8000c82:	0003      	movs	r3, r0
 8000c84:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8000c86:	230f      	movs	r3, #15
 8000c88:	18fb      	adds	r3, r7, r3
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	b25b      	sxtb	r3, r3
}
 8000c8e:	0018      	movs	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b004      	add	sp, #16
 8000c94:	bdb0      	pop	{r4, r5, r7, pc}

08000c96 <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 8000c96:	b5b0      	push	{r4, r5, r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	1c02      	adds	r2, r0, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8000ca8:	2116      	movs	r1, #22
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	22f4      	movs	r2, #244	; 0xf4
 8000cae:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	7818      	ldrb	r0, [r3, #0]
 8000cb4:	2517      	movs	r5, #23
 8000cb6:	197c      	adds	r4, r7, r5
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2215      	movs	r2, #21
 8000cbc:	18b9      	adds	r1, r7, r2
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f7ff fd10 	bl	80006e4 <bme280_get_regs>
 8000cc4:	0003      	movs	r3, r0
 8000cc6:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 8000cc8:	197b      	adds	r3, r7, r5
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b25b      	sxtb	r3, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d125      	bne.n	8000d1e <set_osr_press_temp_settings+0x88>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4013      	ands	r3, r2
 8000cdc:	d006      	beq.n	8000cec <set_osr_press_temp_settings+0x56>
        {
            fill_osr_press_settings(&reg_data, settings);
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	2315      	movs	r3, #21
 8000ce2:	18fb      	adds	r3, r7, r3
 8000ce4:	0011      	movs	r1, r2
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f000 f8a0 	bl	8000e2c <fill_osr_press_settings>
        }
        if (desired_settings & BME280_OSR_TEMP_SEL)
 8000cec:	230f      	movs	r3, #15
 8000cee:	18fb      	adds	r3, r7, r3
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	d006      	beq.n	8000d06 <set_osr_press_temp_settings+0x70>
        {
            fill_osr_temp_settings(&reg_data, settings);
 8000cf8:	68ba      	ldr	r2, [r7, #8]
 8000cfa:	2315      	movs	r3, #21
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	0011      	movs	r1, r2
 8000d00:	0018      	movs	r0, r3
 8000d02:	f000 f8ae 	bl	8000e62 <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8000d06:	2317      	movs	r3, #23
 8000d08:	18fc      	adds	r4, r7, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2215      	movs	r2, #21
 8000d0e:	18b9      	adds	r1, r7, r2
 8000d10:	2216      	movs	r2, #22
 8000d12:	18b8      	adds	r0, r7, r2
 8000d14:	2201      	movs	r2, #1
 8000d16:	f7ff fd2f 	bl	8000778 <bme280_set_regs>
 8000d1a:	0003      	movs	r3, r0
 8000d1c:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8000d1e:	2317      	movs	r3, #23
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	b25b      	sxtb	r3, r3
}
 8000d26:	0018      	movs	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b006      	add	sp, #24
 8000d2c:	bdb0      	pop	{r4, r5, r7, pc}

08000d2e <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 8000d2e:	b5b0      	push	{r4, r5, r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
 8000d38:	230f      	movs	r3, #15
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	1c02      	adds	r2, r0, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8000d40:	2116      	movs	r1, #22
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	22f5      	movs	r2, #245	; 0xf5
 8000d46:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	7818      	ldrb	r0, [r3, #0]
 8000d4c:	2517      	movs	r5, #23
 8000d4e:	197c      	adds	r4, r7, r5
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2215      	movs	r2, #21
 8000d54:	18b9      	adds	r1, r7, r2
 8000d56:	2201      	movs	r2, #1
 8000d58:	f7ff fcc4 	bl	80006e4 <bme280_get_regs>
 8000d5c:	0003      	movs	r3, r0
 8000d5e:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 8000d60:	197b      	adds	r3, r7, r5
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b25b      	sxtb	r3, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d125      	bne.n	8000db6 <set_filter_standby_settings+0x88>
    {
        if (desired_settings & BME280_FILTER_SEL)
 8000d6a:	230f      	movs	r3, #15
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2208      	movs	r2, #8
 8000d72:	4013      	ands	r3, r2
 8000d74:	d006      	beq.n	8000d84 <set_filter_standby_settings+0x56>
        {
            fill_filter_settings(&reg_data, settings);
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	2315      	movs	r3, #21
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	0011      	movs	r1, r2
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f000 f821 	bl	8000dc6 <fill_filter_settings>
        }
        if (desired_settings & BME280_STANDBY_SEL)
 8000d84:	230f      	movs	r3, #15
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2210      	movs	r2, #16
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	d006      	beq.n	8000d9e <set_filter_standby_settings+0x70>
        {
            fill_standby_settings(&reg_data, settings);
 8000d90:	68ba      	ldr	r2, [r7, #8]
 8000d92:	2315      	movs	r3, #21
 8000d94:	18fb      	adds	r3, r7, r3
 8000d96:	0011      	movs	r1, r2
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f000 f82f 	bl	8000dfc <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8000d9e:	2317      	movs	r3, #23
 8000da0:	18fc      	adds	r4, r7, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2215      	movs	r2, #21
 8000da6:	18b9      	adds	r1, r7, r2
 8000da8:	2216      	movs	r2, #22
 8000daa:	18b8      	adds	r0, r7, r2
 8000dac:	2201      	movs	r2, #1
 8000dae:	f7ff fce3 	bl	8000778 <bme280_set_regs>
 8000db2:	0003      	movs	r3, r0
 8000db4:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8000db6:	2317      	movs	r3, #23
 8000db8:	18fb      	adds	r3, r7, r3
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b25b      	sxtb	r3, r3
}
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b006      	add	sp, #24
 8000dc4:	bdb0      	pop	{r4, r5, r7, pc}

08000dc6 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	b25b      	sxtb	r3, r3
 8000dd6:	221c      	movs	r2, #28
 8000dd8:	4393      	bics	r3, r2
 8000dda:	b25a      	sxtb	r2, r3
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	78db      	ldrb	r3, [r3, #3]
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	b25b      	sxtb	r3, r3
 8000de4:	211c      	movs	r1, #28
 8000de6:	400b      	ands	r3, r1
 8000de8:	b25b      	sxtb	r3, r3
 8000dea:	4313      	orrs	r3, r2
 8000dec:	b25b      	sxtb	r3, r3
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	701a      	strb	r2, [r3, #0]
}
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b002      	add	sp, #8
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b25b      	sxtb	r3, r3
 8000e0c:	221f      	movs	r2, #31
 8000e0e:	4013      	ands	r3, r2
 8000e10:	b25a      	sxtb	r2, r3
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	791b      	ldrb	r3, [r3, #4]
 8000e16:	015b      	lsls	r3, r3, #5
 8000e18:	b25b      	sxtb	r3, r3
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	701a      	strb	r2, [r3, #0]
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b002      	add	sp, #8
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	221c      	movs	r2, #28
 8000e3e:	4393      	bics	r3, r2
 8000e40:	b25a      	sxtb	r2, r3
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	211c      	movs	r1, #28
 8000e4c:	400b      	ands	r3, r1
 8000e4e:	b25b      	sxtb	r3, r3
 8000e50:	4313      	orrs	r3, r2
 8000e52:	b25b      	sxtb	r3, r3
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	701a      	strb	r2, [r3, #0]
}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b002      	add	sp, #8
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	221f      	movs	r2, #31
 8000e74:	4013      	ands	r3, r2
 8000e76:	b25a      	sxtb	r2, r3
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	785b      	ldrb	r3, [r3, #1]
 8000e7c:	015b      	lsls	r3, r3, #5
 8000e7e:	b25b      	sxtb	r3, r3
 8000e80:	4313      	orrs	r3, r2
 8000e82:	b25b      	sxtb	r3, r3
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	701a      	strb	r2, [r3, #0]
}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b002      	add	sp, #8
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2207      	movs	r2, #7
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3302      	adds	r3, #2
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	109b      	asrs	r3, r3, #2
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2207      	movs	r2, #7
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	095b      	lsrs	r3, r3, #5
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3303      	adds	r3, #3
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	109b      	asrs	r3, r3, #2
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2207      	movs	r2, #7
 8000ed8:	4013      	ands	r3, r2
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3303      	adds	r3, #3
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	711a      	strb	r2, [r3, #4]
}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b002      	add	sp, #8
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8000ef6:	b5b0      	push	{r4, r5, r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8000efe:	2517      	movs	r5, #23
 8000f00:	197c      	adds	r4, r7, r5
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2210      	movs	r2, #16
 8000f06:	18b9      	adds	r1, r7, r2
 8000f08:	2204      	movs	r2, #4
 8000f0a:	20f2      	movs	r0, #242	; 0xf2
 8000f0c:	f7ff fbea 	bl	80006e4 <bme280_get_regs>
 8000f10:	0003      	movs	r3, r0
 8000f12:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 8000f14:	197b      	adds	r3, r7, r5
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b25b      	sxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d11f      	bne.n	8000f5e <put_device_to_sleep+0x68>
    {
        parse_device_settings(reg_data, &settings);
 8000f1e:	2308      	movs	r3, #8
 8000f20:	18fa      	adds	r2, r7, r3
 8000f22:	2310      	movs	r3, #16
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	0011      	movs	r1, r2
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f7ff ffb2 	bl	8000e92 <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8000f2e:	2517      	movs	r5, #23
 8000f30:	197c      	adds	r4, r7, r5
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	0018      	movs	r0, r3
 8000f36:	f7ff fd4f 	bl	80009d8 <bme280_soft_reset>
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 8000f3e:	197b      	adds	r3, r7, r5
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d10a      	bne.n	8000f5e <put_device_to_sleep+0x68>
        {
            rslt = reload_device_settings(&settings, dev);
 8000f48:	2317      	movs	r3, #23
 8000f4a:	18fc      	adds	r4, r7, r3
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	2308      	movs	r3, #8
 8000f50:	18fb      	adds	r3, r7, r3
 8000f52:	0011      	movs	r1, r2
 8000f54:	0018      	movs	r0, r3
 8000f56:	f000 f80a 	bl	8000f6e <reload_device_settings>
 8000f5a:	0003      	movs	r3, r0
 8000f5c:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8000f5e:	2317      	movs	r3, #23
 8000f60:	18fb      	adds	r3, r7, r3
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b25b      	sxtb	r3, r3
}
 8000f66:	0018      	movs	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b006      	add	sp, #24
 8000f6c:	bdb0      	pop	{r4, r5, r7, pc}

08000f6e <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8000f6e:	b5b0      	push	{r4, r5, r7, lr}
 8000f70:	b084      	sub	sp, #16
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8000f78:	250f      	movs	r5, #15
 8000f7a:	197c      	adds	r4, r7, r5
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	0019      	movs	r1, r3
 8000f82:	201f      	movs	r0, #31
 8000f84:	f7ff fe08 	bl	8000b98 <set_osr_settings>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 8000f8c:	197b      	adds	r3, r7, r5
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b25b      	sxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d109      	bne.n	8000faa <reload_device_settings+0x3c>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8000f96:	230f      	movs	r3, #15
 8000f98:	18fc      	adds	r4, r7, r3
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	0019      	movs	r1, r3
 8000fa0:	201f      	movs	r0, #31
 8000fa2:	f7ff fec4 	bl	8000d2e <set_filter_standby_settings>
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8000faa:	230f      	movs	r3, #15
 8000fac:	18fb      	adds	r3, r7, r3
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b25b      	sxtb	r3, r3
}
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b004      	add	sp, #16
 8000fb8:	bdb0      	pop	{r4, r5, r7, pc}

08000fba <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8000fba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fbc:	b08b      	sub	sp, #44	; 0x2c
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8000fc2:	2526      	movs	r5, #38	; 0x26
 8000fc4:	197b      	adds	r3, r7, r5
 8000fc6:	2288      	movs	r2, #136	; 0x88
 8000fc8:	701a      	strb	r2, [r3, #0]

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8000fca:	260c      	movs	r6, #12
 8000fcc:	19bb      	adds	r3, r7, r6
 8000fce:	0018      	movs	r0, r3
 8000fd0:	231a      	movs	r3, #26
 8000fd2:	001a      	movs	r2, r3
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	f002 fc2c 	bl	8003832 <memset>

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8000fda:	2327      	movs	r3, #39	; 0x27
 8000fdc:	18fc      	adds	r4, r7, r3
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	19b9      	adds	r1, r7, r6
 8000fe2:	197b      	adds	r3, r7, r5
 8000fe4:	7818      	ldrb	r0, [r3, #0]
 8000fe6:	0013      	movs	r3, r2
 8000fe8:	221a      	movs	r2, #26
 8000fea:	f7ff fb7b 	bl	80006e4 <bme280_get_regs>
 8000fee:	0003      	movs	r3, r0
 8000ff0:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 8000ff2:	2327      	movs	r3, #39	; 0x27
 8000ff4:	18fb      	adds	r3, r7, r3
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d122      	bne.n	8001044 <get_calib_data+0x8a>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	250c      	movs	r5, #12
 8001002:	197b      	adds	r3, r7, r5
 8001004:	0011      	movs	r1, r2
 8001006:	0018      	movs	r0, r3
 8001008:	f000 f85b 	bl	80010c2 <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800100c:	2026      	movs	r0, #38	; 0x26
 800100e:	183b      	adds	r3, r7, r0
 8001010:	22e1      	movs	r2, #225	; 0xe1
 8001012:	701a      	strb	r2, [r3, #0]

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8001014:	2627      	movs	r6, #39	; 0x27
 8001016:	19bc      	adds	r4, r7, r6
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	1979      	adds	r1, r7, r5
 800101c:	183b      	adds	r3, r7, r0
 800101e:	7818      	ldrb	r0, [r3, #0]
 8001020:	0013      	movs	r3, r2
 8001022:	2207      	movs	r2, #7
 8001024:	f7ff fb5e 	bl	80006e4 <bme280_get_regs>
 8001028:	0003      	movs	r3, r0
 800102a:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 800102c:	19bb      	adds	r3, r7, r6
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b25b      	sxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d106      	bne.n	8001044 <get_calib_data+0x8a>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	230c      	movs	r3, #12
 800103a:	18fb      	adds	r3, r7, r3
 800103c:	0011      	movs	r1, r2
 800103e:	0018      	movs	r0, r3
 8001040:	f000 f8ec 	bl	800121c <parse_humidity_calib_data>
        }
    }

    return rslt;
 8001044:	2327      	movs	r3, #39	; 0x27
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b25b      	sxtb	r3, r3
}
 800104c:	0018      	movs	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	b00b      	add	sp, #44	; 0x2c
 8001052:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001054 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	001a      	movs	r2, r3
 8001062:	1cfb      	adds	r3, r7, #3
 8001064:	701a      	strb	r2, [r3, #0]
    uint8_t index;

    for (index = 1; index < len; index++)
 8001066:	2317      	movs	r3, #23
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
 800106e:	e01d      	b.n	80010ac <interleave_reg_addr+0x58>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001070:	2017      	movs	r0, #23
 8001072:	183b      	adds	r3, r7, r0
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	18d2      	adds	r2, r2, r3
 800107a:	183b      	adds	r3, r7, r0
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	3b01      	subs	r3, #1
 8001082:	68b9      	ldr	r1, [r7, #8]
 8001084:	18cb      	adds	r3, r1, r3
 8001086:	7812      	ldrb	r2, [r2, #0]
 8001088:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800108a:	183b      	adds	r3, r7, r0
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	18d2      	adds	r2, r2, r3
 8001092:	183b      	adds	r3, r7, r0
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	0019      	movs	r1, r3
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	185b      	adds	r3, r3, r1
 800109e:	7812      	ldrb	r2, [r2, #0]
 80010a0:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80010a2:	183b      	adds	r3, r7, r0
 80010a4:	781a      	ldrb	r2, [r3, #0]
 80010a6:	183b      	adds	r3, r7, r0
 80010a8:	3201      	adds	r2, #1
 80010aa:	701a      	strb	r2, [r3, #0]
 80010ac:	2317      	movs	r3, #23
 80010ae:	18fa      	adds	r2, r7, r3
 80010b0:	1cfb      	adds	r3, r7, #3
 80010b2:	7812      	ldrb	r2, [r2, #0]
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d3da      	bcc.n	8001070 <interleave_reg_addr+0x1c>
    }
}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	b006      	add	sp, #24
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	3310      	adds	r3, #16
 80010d0:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3301      	adds	r3, #1
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b21a      	sxth	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3303      	adds	r3, #3
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3302      	adds	r3, #2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	4313      	orrs	r3, r2
 8001100:	b21a      	sxth	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3305      	adds	r3, #5
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b21a      	sxth	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3304      	adds	r3, #4
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b21b      	sxth	r3, r3
 8001118:	4313      	orrs	r3, r2
 800111a:	b21a      	sxth	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3307      	adds	r3, #7
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b21a      	sxth	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3306      	adds	r3, #6
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b21b      	sxth	r3, r3
 8001132:	4313      	orrs	r3, r2
 8001134:	b21b      	sxth	r3, r3
 8001136:	b29a      	uxth	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3309      	adds	r3, #9
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21a      	sxth	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3308      	adds	r3, #8
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b21b      	sxth	r3, r3
 800114e:	4313      	orrs	r3, r2
 8001150:	b21a      	sxth	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	330b      	adds	r3, #11
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	330a      	adds	r3, #10
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b21b      	sxth	r3, r3
 8001168:	4313      	orrs	r3, r2
 800116a:	b21a      	sxth	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	330d      	adds	r3, #13
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	b21a      	sxth	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	330c      	adds	r3, #12
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b21b      	sxth	r3, r3
 8001182:	4313      	orrs	r3, r2
 8001184:	b21a      	sxth	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	330f      	adds	r3, #15
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	b21a      	sxth	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	330e      	adds	r3, #14
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	b21b      	sxth	r3, r3
 800119c:	4313      	orrs	r3, r2
 800119e:	b21a      	sxth	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3311      	adds	r3, #17
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3310      	adds	r3, #16
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b21a      	sxth	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3313      	adds	r3, #19
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3312      	adds	r3, #18
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3315      	adds	r3, #21
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3314      	adds	r3, #20
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3317      	adds	r3, #23
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3316      	adds	r3, #22
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b21b      	sxth	r3, r3
 8001204:	4313      	orrs	r3, r2
 8001206:	b21a      	sxth	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	7e5a      	ldrb	r2, [r3, #25]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	761a      	strb	r2, [r3, #24]
}
 8001214:	46c0      	nop			; (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	b004      	add	sp, #16
 800121a:	bd80      	pop	{r7, pc}

0800121c <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	3310      	adds	r3, #16
 800122a:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3301      	adds	r3, #1
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	b21a      	sxth	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	b21b      	sxth	r3, r3
 800123c:	4313      	orrs	r3, r2
 800123e:	b21a      	sxth	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	789a      	ldrb	r2, [r3, #2]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3303      	adds	r3, #3
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b25b      	sxtb	r3, r3
 8001254:	b29b      	uxth	r3, r3
 8001256:	011b      	lsls	r3, r3, #4
 8001258:	b29a      	uxth	r2, r3
 800125a:	2012      	movs	r0, #18
 800125c:	183b      	adds	r3, r7, r0
 800125e:	801a      	strh	r2, [r3, #0]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3304      	adds	r3, #4
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b21a      	sxth	r2, r3
 8001268:	2410      	movs	r4, #16
 800126a:	193b      	adds	r3, r7, r4
 800126c:	210f      	movs	r1, #15
 800126e:	400a      	ands	r2, r1
 8001270:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 8001272:	183a      	adds	r2, r7, r0
 8001274:	193b      	adds	r3, r7, r4
 8001276:	8812      	ldrh	r2, [r2, #0]
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	4313      	orrs	r3, r2
 800127c:	b21a      	sxth	r2, r3
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3305      	adds	r3, #5
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b25b      	sxtb	r3, r3
 800128a:	b29b      	uxth	r3, r3
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	b29a      	uxth	r2, r3
 8001290:	210e      	movs	r1, #14
 8001292:	187b      	adds	r3, r7, r1
 8001294:	801a      	strh	r2, [r3, #0]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3304      	adds	r3, #4
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	091b      	lsrs	r3, r3, #4
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	200c      	movs	r0, #12
 80012a2:	183b      	adds	r3, r7, r0
 80012a4:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 80012a6:	187a      	adds	r2, r7, r1
 80012a8:	183b      	adds	r3, r7, r0
 80012aa:	8812      	ldrh	r2, [r2, #0]
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3306      	adds	r3, #6
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b259      	sxtb	r1, r3
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2222      	movs	r2, #34	; 0x22
 80012c2:	5499      	strb	r1, [r3, r2]
}
 80012c4:	46c0      	nop			; (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b007      	add	sp, #28
 80012ca:	bd90      	pop	{r4, r7, pc}

080012cc <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	0002      	movs	r2, r0
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	1dbb      	adds	r3, r7, #6
 80012da:	1c0a      	adds	r2, r1, #0
 80012dc:	701a      	strb	r2, [r3, #0]
    uint8_t settings_changed = FALSE;
 80012de:	230f      	movs	r3, #15
 80012e0:	18fb      	adds	r3, r7, r3
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]

    if (sub_settings & desired_settings)
 80012e6:	1dfb      	adds	r3, r7, #7
 80012e8:	1dba      	adds	r2, r7, #6
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	7812      	ldrb	r2, [r2, #0]
 80012ee:	4013      	ands	r3, r2
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d004      	beq.n	8001300 <are_settings_changed+0x34>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 80012f6:	230f      	movs	r3, #15
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
 80012fe:	e003      	b.n	8001308 <are_settings_changed+0x3c>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8001300:	230f      	movs	r3, #15
 8001302:	18fb      	adds	r3, r7, r3
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
    }

    return settings_changed;
 8001308:	230f      	movs	r3, #15
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	781b      	ldrb	r3, [r3, #0]
}
 800130e:	0018      	movs	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	b004      	add	sp, #16
 8001314:	bd80      	pop	{r7, pc}

08001316 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b084      	sub	sp, #16
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d00b      	beq.n	800133c <null_ptr_check+0x26>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d007      	beq.n	800133c <null_ptr_check+0x26>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <null_ptr_check+0x26>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d104      	bne.n	8001346 <null_ptr_check+0x30>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 800133c:	230f      	movs	r3, #15
 800133e:	18fb      	adds	r3, r7, r3
 8001340:	22ff      	movs	r2, #255	; 0xff
 8001342:	701a      	strb	r2, [r3, #0]
 8001344:	e003      	b.n	800134e <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 8001346:	230f      	movs	r3, #15
 8001348:	18fb      	adds	r3, r7, r3
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800134e:	230f      	movs	r3, #15
 8001350:	18fb      	adds	r3, r7, r3
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	b25b      	sxtb	r3, r3
}
 8001356:	0018      	movs	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	b004      	add	sp, #16
 800135c:	bd80      	pop	{r7, pc}

0800135e <lorawan_init>:
  {0xE1,0xF8,0x98,0x11,0x69,0xD9,0x8E,0x94,0x9B,0x1E,0x87,0xE9,0xCE,0x55,0x28,0xDF},
  {0x8C,0xA1,0x89,0x0D,0xBF,0xE6,0x42,0x68,0x41,0x99,0x2D,0x0F,0xB0,0x54,0xBB,0x16}
};

void lorawan_init(lorawan_t *lorawan, rfm95_t *rfm95)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	6039      	str	r1, [r7, #0]
	lorawan->rfm95 = rfm95;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	601a      	str	r2, [r3, #0]
}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	b002      	add	sp, #8
 8001374:	bd80      	pop	{r7, pc}

08001376 <lorawan_set_keys>:

void lorawan_set_keys(lorawan_t *lorawan, uint8_t NwkSkey[], uint8_t AppSkey[], uint8_t DevAddr[])
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	603b      	str	r3, [r7, #0]
	lorawan->AppSkey = AppSkey;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	609a      	str	r2, [r3, #8]
	lorawan->DevAddr = DevAddr;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	60da      	str	r2, [r3, #12]
	lorawan->NwkSkey = NwkSkey;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	605a      	str	r2, [r3, #4]
}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	b004      	add	sp, #16
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <LL_ADC_SetCommonFrequencyMode>:
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_HIGH
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonFrequencyMode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Resolution)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, Resolution);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <LL_ADC_SetCommonFrequencyMode+0x24>)
 80013b0:	401a      	ands	r2, r3
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	431a      	orrs	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	601a      	str	r2, [r3, #0]
}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	46bd      	mov	sp, r7
 80013be:	b002      	add	sp, #8
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	fdffffff 	.word	0xfdffffff

080013c8 <LL_ADC_SetCommonPathInternalCh>:
  *         (1) value not defined in all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  *         (2) value not defined in all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx, STM32L04xxx, STM32L03xxx, STM32L02xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
#if defined (ADC_CCR_VLCDEN) && defined (ADC_CCR_TSEN)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VLCDEN, PathInternal);
#elif defined (ADC_CCR_TSEN)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a05      	ldr	r2, [pc, #20]	; (80013ec <LL_ADC_SetCommonPathInternalCh+0x24>)
 80013d8:	401a      	ands	r2, r3
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	601a      	str	r2, [r3, #0]
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN, PathInternal);
#endif
}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b002      	add	sp, #8
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	ff3fffff 	.word	0xff3fffff

080013f0 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	2207      	movs	r2, #7
 8001400:	4393      	bics	r3, r2
 8001402:	001a      	movs	r2, r3
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	431a      	orrs	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	615a      	str	r2, [r3, #20]
}
 800140c:	46c0      	nop			; (mov r8, r8)
 800140e:	46bd      	mov	sp, r7
 8001410:	b002      	add	sp, #8
 8001412:	bd80      	pop	{r7, pc}

08001414 <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2204      	movs	r2, #4
 8001424:	4393      	bics	r3, r2
 8001426:	001a      	movs	r2, r3
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	60da      	str	r2, [r3, #12]
}
 8001430:	46c0      	nop			; (mov r8, r8)
 8001432:	46bd      	mov	sp, r7
 8001434:	b002      	add	sp, #8
 8001436:	bd80      	pop	{r7, pc}

08001438 <LL_ADC_REG_SetSequencerChAdd>:
  *         
  *         (1) On STM32L0, parameter not available on all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	035b      	lsls	r3, r3, #13
 800144a:	0b5b      	lsrs	r3, r3, #13
 800144c:	431a      	orrs	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	46bd      	mov	sp, r7
 8001456:	b002      	add	sp, #8
 8001458:	bd80      	pop	{r7, pc}

0800145a <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	2201      	movs	r2, #1
 800146a:	4393      	bics	r3, r2
 800146c:	001a      	movs	r2, r3
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	431a      	orrs	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	611a      	str	r2, [r3, #16]
}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	46bd      	mov	sp, r7
 800147a:	b002      	add	sp, #8
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <LL_ADC_EnableInternalRegulator+0x24>)
 800148e:	4013      	ands	r3, r2
 8001490:	2280      	movs	r2, #128	; 0x80
 8001492:	0552      	lsls	r2, r2, #21
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	46bd      	mov	sp, r7
 800149e:	b002      	add	sp, #8
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	6fffffe8 	.word	0x6fffffe8

080014a8 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2204      	movs	r2, #4
 80014b6:	4393      	bics	r3, r2
 80014b8:	001a      	movs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	605a      	str	r2, [r3, #4]
}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b002      	add	sp, #8
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSEQIE        LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2208      	movs	r2, #8
 80014d4:	4393      	bics	r3, r2
 80014d6:	001a      	movs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	605a      	str	r2, [r3, #4]
}
 80014dc:	46c0      	nop			; (mov r8, r8)
 80014de:	46bd      	mov	sp, r7
 80014e0:	b002      	add	sp, #8
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2201      	movs	r2, #1
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	601a      	str	r2, [r3, #0]
}
 80014f8:	46c0      	nop			; (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b002      	add	sp, #8
 80014fe:	bd80      	pop	{r7, pc}

08001500 <LL_LPUART_Disable>:
  * @rmtoll CR1          UE            LL_LPUART_Disable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Disable(USART_TypeDef *LPUARTx)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_UE);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2201      	movs	r2, #1
 800150e:	4393      	bics	r3, r2
 8001510:	001a      	movs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	601a      	str	r2, [r3, #0]
}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	b002      	add	sp, #8
 800151c:	bd80      	pop	{r7, pc}

0800151e <LL_LPUART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_LPUART_IsActiveFlag_TC
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TC(USART_TypeDef *LPUARTx)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  return (READ_BIT(LPUARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	2240      	movs	r2, #64	; 0x40
 800152c:	4013      	ands	r3, r2
 800152e:	3b40      	subs	r3, #64	; 0x40
 8001530:	425a      	negs	r2, r3
 8001532:	4153      	adcs	r3, r2
 8001534:	b2db      	uxtb	r3, r3
}
 8001536:	0018      	movs	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	b002      	add	sp, #8
 800153c:	bd80      	pop	{r7, pc}

0800153e <LL_LPUART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_LPUART_IsActiveFlag_TXE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TXE(USART_TypeDef *LPUARTx)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  return (READ_BIT(LPUARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	2280      	movs	r2, #128	; 0x80
 800154c:	4013      	ands	r3, r2
 800154e:	3b80      	subs	r3, #128	; 0x80
 8001550:	425a      	negs	r2, r3
 8001552:	4153      	adcs	r3, r2
 8001554:	b2db      	uxtb	r3, r3
}
 8001556:	0018      	movs	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	b002      	add	sp, #8
 800155c:	bd80      	pop	{r7, pc}

0800155e <LL_LPUART_TransmitData8>:
  * @param  LPUARTx LPUART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_TransmitData8(USART_TypeDef *LPUARTx, uint8_t Value)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	000a      	movs	r2, r1
 8001568:	1cfb      	adds	r3, r7, #3
 800156a:	701a      	strb	r2, [r3, #0]
  LPUARTx->TDR = Value;
 800156c:	1cfb      	adds	r3, r7, #3
 800156e:	781a      	ldrb	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001574:	46c0      	nop			; (mov r8, r8)
 8001576:	46bd      	mov	sp, r7
 8001578:	b002      	add	sp, #8
 800157a:	bd80      	pop	{r7, pc}

0800157c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <LL_RCC_LSI_Enable+0x18>)
 8001582:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <LL_RCC_LSI_Enable+0x18>)
 8001586:	2101      	movs	r1, #1
 8001588:	430a      	orrs	r2, r1
 800158a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800158c:	46c0      	nop			; (mov r8, r8)
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	40021000 	.word	0x40021000

08001598 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) ? 1UL : 0UL);
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <LL_RCC_LSI_IsReady+0x1c>)
 800159e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015a0:	2202      	movs	r2, #2
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d101      	bne.n	80015ac <LL_RCC_LSI_IsReady+0x14>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <LL_RCC_LSI_IsReady+0x16>
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	0018      	movs	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40021000 	.word	0x40021000

080015b8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80015bc:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <LL_RCC_MSI_Enable+0x18>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <LL_RCC_MSI_Enable+0x18>)
 80015c2:	2180      	movs	r1, #128	; 0x80
 80015c4:	0049      	lsls	r1, r1, #1
 80015c6:	430a      	orrs	r2, r1
 80015c8:	601a      	str	r2, [r3, #0]
}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40021000 	.word	0x40021000

080015d4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 80015d8:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <LL_RCC_MSI_IsReady+0x24>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	401a      	ands	r2, r3
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d101      	bne.n	80015ee <LL_RCC_MSI_IsReady+0x1a>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <LL_RCC_MSI_IsReady+0x1c>
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	0018      	movs	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	40021000 	.word	0x40021000

080015fc <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_5
  *         @arg @ref LL_RCC_MSIRANGE_6
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSIRANGE, Range);
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <LL_RCC_MSI_SetRange+0x24>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	4a06      	ldr	r2, [pc, #24]	; (8001624 <LL_RCC_MSI_SetRange+0x28>)
 800160a:	4013      	ands	r3, r2
 800160c:	0019      	movs	r1, r3
 800160e:	4b04      	ldr	r3, [pc, #16]	; (8001620 <LL_RCC_MSI_SetRange+0x24>)
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	430a      	orrs	r2, r1
 8001614:	605a      	str	r2, [r3, #4]
}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	46bd      	mov	sp, r7
 800161a:	b002      	add	sp, #8
 800161c:	bd80      	pop	{r7, pc}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	40021000 	.word	0x40021000
 8001624:	ffff1fff 	.word	0xffff1fff

08001628 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <LL_RCC_MSI_SetCalibTrimming+0x24>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	0a19      	lsrs	r1, r3, #8
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	061a      	lsls	r2, r3, #24
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <LL_RCC_MSI_SetCalibTrimming+0x24>)
 800163e:	430a      	orrs	r2, r1
 8001640:	605a      	str	r2, [r3, #4]
}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	46bd      	mov	sp, r7
 8001646:	b002      	add	sp, #8
 8001648:	bd80      	pop	{r7, pc}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	40021000 	.word	0x40021000

08001650 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <LL_RCC_SetSysClkSource+0x24>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	2203      	movs	r2, #3
 800165e:	4393      	bics	r3, r2
 8001660:	0019      	movs	r1, r3
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <LL_RCC_SetSysClkSource+0x24>)
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	430a      	orrs	r2, r1
 8001668:	60da      	str	r2, [r3, #12]
}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	46bd      	mov	sp, r7
 800166e:	b002      	add	sp, #8
 8001670:	bd80      	pop	{r7, pc}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	40021000 	.word	0x40021000

08001678 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800167c:	4b03      	ldr	r3, [pc, #12]	; (800168c <LL_RCC_GetSysClkSource+0x14>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	220c      	movs	r2, #12
 8001682:	4013      	ands	r3, r2
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	40021000 	.word	0x40021000

08001690 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <LL_RCC_SetAHBPrescaler+0x24>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	22f0      	movs	r2, #240	; 0xf0
 800169e:	4393      	bics	r3, r2
 80016a0:	0019      	movs	r1, r3
 80016a2:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <LL_RCC_SetAHBPrescaler+0x24>)
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	60da      	str	r2, [r3, #12]
}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b002      	add	sp, #8
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	40021000 	.word	0x40021000

080016b8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <LL_RCC_SetAPB1Prescaler+0x24>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4a06      	ldr	r2, [pc, #24]	; (80016e0 <LL_RCC_SetAPB1Prescaler+0x28>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	0019      	movs	r1, r3
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <LL_RCC_SetAPB1Prescaler+0x24>)
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	60da      	str	r2, [r3, #12]
}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b002      	add	sp, #8
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	40021000 	.word	0x40021000
 80016e0:	fffff8ff 	.word	0xfffff8ff

080016e4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <LL_RCC_SetAPB2Prescaler+0x24>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	4a06      	ldr	r2, [pc, #24]	; (800170c <LL_RCC_SetAPB2Prescaler+0x28>)
 80016f2:	4013      	ands	r3, r2
 80016f4:	0019      	movs	r1, r3
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <LL_RCC_SetAPB2Prescaler+0x24>)
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	60da      	str	r2, [r3, #12]
}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	46bd      	mov	sp, r7
 8001702:	b002      	add	sp, #8
 8001704:	bd80      	pop	{r7, pc}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	40021000 	.word	0x40021000
 800170c:	ffffc7ff 	.word	0xffffc7ff

08001710 <LL_RCC_SetLPUARTClockSource>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPUARTClockSource(uint32_t LPUARTxSource)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <LL_RCC_SetLPUARTClockSource+0x24>)
 800171a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171c:	4a06      	ldr	r2, [pc, #24]	; (8001738 <LL_RCC_SetLPUARTClockSource+0x28>)
 800171e:	4013      	ands	r3, r2
 8001720:	0019      	movs	r1, r3
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <LL_RCC_SetLPUARTClockSource+0x24>)
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	430a      	orrs	r2, r1
 8001728:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	46bd      	mov	sp, r7
 800172e:	b002      	add	sp, #8
 8001730:	bd80      	pop	{r7, pc}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	40021000 	.word	0x40021000
 8001738:	fffff3ff 	.word	0xfffff3ff

0800173c <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RTCSEL, Source);
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <LL_RCC_SetRTCClockSource+0x24>)
 8001746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001748:	4a06      	ldr	r2, [pc, #24]	; (8001764 <LL_RCC_SetRTCClockSource+0x28>)
 800174a:	4013      	ands	r3, r2
 800174c:	0019      	movs	r1, r3
 800174e:	4b04      	ldr	r3, [pc, #16]	; (8001760 <LL_RCC_SetRTCClockSource+0x24>)
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	430a      	orrs	r2, r1
 8001754:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	46bd      	mov	sp, r7
 800175a:	b002      	add	sp, #8
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	40021000 	.word	0x40021000
 8001764:	fffcffff 	.word	0xfffcffff

08001768 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll CSR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RTCEN);
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <LL_RCC_EnableRTC+0x18>)
 800176e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <LL_RCC_EnableRTC+0x18>)
 8001772:	2180      	movs	r1, #128	; 0x80
 8001774:	02c9      	lsls	r1, r1, #11
 8001776:	430a      	orrs	r2, r1
 8001778:	651a      	str	r2, [r3, #80]	; 0x50
}
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40021000 	.word	0x40021000

08001784 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll CSR         RTCRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RTCRST);
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <LL_RCC_ForceBackupDomainReset+0x18>)
 800178a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800178c:	4b03      	ldr	r3, [pc, #12]	; (800179c <LL_RCC_ForceBackupDomainReset+0x18>)
 800178e:	2180      	movs	r1, #128	; 0x80
 8001790:	0309      	lsls	r1, r1, #12
 8001792:	430a      	orrs	r2, r1
 8001794:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40021000 	.word	0x40021000

080017a0 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll CSR         RTCRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RTCRST);
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <LL_RCC_ReleaseBackupDomainReset+0x18>)
 80017a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <LL_RCC_ReleaseBackupDomainReset+0x18>)
 80017aa:	4904      	ldr	r1, [pc, #16]	; (80017bc <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 80017ac:	400a      	ands	r2, r1
 80017ae:	651a      	str	r2, [r3, #80]	; 0x50
}
 80017b0:	46c0      	nop			; (mov r8, r8)
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	40021000 	.word	0x40021000
 80017bc:	fff7ffff 	.word	0xfff7ffff

080017c0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80017ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80017d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	4013      	ands	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017de:	68fb      	ldr	r3, [r7, #12]
}
 80017e0:	46c0      	nop			; (mov r8, r8)
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b004      	add	sp, #16
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40021000 	.word	0x40021000

080017ec <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <LL_APB2_GRP1_EnableClock+0x28>)
 80017f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <LL_APB2_GRP1_EnableClock+0x28>)
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <LL_APB2_GRP1_EnableClock+0x28>)
 8001802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	4013      	ands	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800180a:	68fb      	ldr	r3, [r7, #12]
}
 800180c:	46c0      	nop			; (mov r8, r8)
 800180e:	46bd      	mov	sp, r7
 8001810:	b004      	add	sp, #16
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40021000 	.word	0x40021000

08001818 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8001820:	4b07      	ldr	r3, [pc, #28]	; (8001840 <LL_IOP_GRP1_EnableClock+0x28>)
 8001822:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <LL_IOP_GRP1_EnableClock+0x28>)
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	430a      	orrs	r2, r1
 800182a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <LL_IOP_GRP1_EnableClock+0x28>)
 800182e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	4013      	ands	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	46c0      	nop			; (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	b004      	add	sp, #16
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000

08001844 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <LL_FLASH_SetLatency+0x24>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2201      	movs	r2, #1
 8001852:	4393      	bics	r3, r2
 8001854:	0019      	movs	r1, r3
 8001856:	4b04      	ldr	r3, [pc, #16]	; (8001868 <LL_FLASH_SetLatency+0x24>)
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	430a      	orrs	r2, r1
 800185c:	601a      	str	r2, [r3, #0]
}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	46bd      	mov	sp, r7
 8001862:	b002      	add	sp, #8
 8001864:	bd80      	pop	{r7, pc}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	40022000 	.word	0x40022000

0800186c <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <LL_FLASH_GetLatency+0x14>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2201      	movs	r2, #1
 8001876:	4013      	ands	r3, r2
}
 8001878:	0018      	movs	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	40022000 	.word	0x40022000

08001884 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a06      	ldr	r2, [pc, #24]	; (80018ac <LL_PWR_SetRegulVoltageScaling+0x28>)
 8001892:	4013      	ands	r3, r2
 8001894:	0019      	movs	r1, r3
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	430a      	orrs	r2, r1
 800189c:	601a      	str	r2, [r3, #0]
}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b002      	add	sp, #8
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	40007000 	.word	0x40007000
 80018ac:	ffffe7ff 	.word	0xffffe7ff

080018b0 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <LL_PWR_EnableBkUpAccess+0x18>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <LL_PWR_EnableBkUpAccess+0x18>)
 80018ba:	2180      	movs	r1, #128	; 0x80
 80018bc:	0049      	lsls	r1, r1, #1
 80018be:	430a      	orrs	r2, r1
 80018c0:	601a      	str	r2, [r3, #0]
}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40007000 	.word	0x40007000

080018cc <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2240      	movs	r2, #64	; 0x40
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	601a      	str	r2, [r3, #0]
}
 80018e0:	46c0      	nop			; (mov r8, r8)
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b002      	add	sp, #8
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2240      	movs	r2, #64	; 0x40
 80018f6:	4393      	bics	r3, r2
 80018f8:	001a      	movs	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	601a      	str	r2, [r3, #0]
}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	46bd      	mov	sp, r7
 8001902:	b002      	add	sp, #8
 8001904:	bd80      	pop	{r7, pc}

08001906 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2210      	movs	r2, #16
 8001916:	4393      	bics	r3, r2
 8001918:	001a      	movs	r2, r3
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	605a      	str	r2, [r3, #4]
}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	46bd      	mov	sp, r7
 8001926:	b002      	add	sp, #8
 8001928:	bd80      	pop	{r7, pc}

0800192a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2201      	movs	r2, #1
 8001938:	4013      	ands	r3, r2
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001942:	2300      	movs	r3, #0
}
 8001944:	0018      	movs	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	b002      	add	sp, #8
 800194a:	bd80      	pop	{r7, pc}

0800194c <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2202      	movs	r2, #2
 800195a:	4013      	ands	r3, r2
 800195c:	2b02      	cmp	r3, #2
 800195e:	d101      	bne.n	8001964 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001964:	2300      	movs	r3, #0
}
 8001966:	0018      	movs	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	b002      	add	sp, #8
 800196c:	bd80      	pop	{r7, pc}

0800196e <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2280      	movs	r2, #128	; 0x80
 800197c:	4013      	ands	r3, r2
 800197e:	2b80      	cmp	r3, #128	; 0x80
 8001980:	d101      	bne.n	8001986 <LL_SPI_IsActiveFlag_BSY+0x18>
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8001986:	2300      	movs	r3, #0
}
 8001988:	0018      	movs	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	b002      	add	sp, #8
 800198e:	bd80      	pop	{r7, pc}

08001990 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	b2db      	uxtb	r3, r3
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b002      	add	sp, #8
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	000a      	movs	r2, r1
 80019b0:	1cfb      	adds	r3, r7, #3
 80019b2:	701a      	strb	r2, [r3, #0]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	330c      	adds	r3, #12
 80019b8:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1cfa      	adds	r2, r7, #3
 80019be:	7812      	ldrb	r2, [r2, #0]
 80019c0:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif
}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	46bd      	mov	sp, r7
 80019c6:	b004      	add	sp, #16
 80019c8:	bd80      	pop	{r7, pc}

080019ca <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	4013      	ands	r3, r2
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	425a      	negs	r2, r3
 80019e2:	4153      	adcs	r3, r2
 80019e4:	b2db      	uxtb	r3, r3
}
 80019e6:	0018      	movs	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b002      	add	sp, #8
 80019ec:	bd80      	pop	{r7, pc}

080019ee <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	619a      	str	r2, [r3, #24]
}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b002      	add	sp, #8
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	b002      	add	sp, #8
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <putstr>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void putstr(const char *str)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	if(frame_counter > QUIET_FRAME)
 8001a28:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <putstr+0x64>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	2b0a      	cmp	r3, #10
 8001a2e:	d824      	bhi.n	8001a7a <putstr+0x5a>
		return;
	LL_LPUART_Enable(LPUART1);
 8001a30:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <putstr+0x68>)
 8001a32:	0018      	movs	r0, r3
 8001a34:	f7ff fd56 	bl	80014e4 <LL_LPUART_Enable>
	while(*str)
 8001a38:	e00f      	b.n	8001a5a <putstr+0x3a>
	{
		while(!LL_LPUART_IsActiveFlag_TXE(LPUART1));
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <putstr+0x68>)
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f7ff fd7d 	bl	800153e <LL_LPUART_IsActiveFlag_TXE>
 8001a44:	1e03      	subs	r3, r0, #0
 8001a46:	d0f9      	beq.n	8001a3c <putstr+0x1c>
		LL_LPUART_TransmitData8(LPUART1, (uint8_t)*str++);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4a0d      	ldr	r2, [pc, #52]	; (8001a88 <putstr+0x68>)
 8001a52:	0019      	movs	r1, r3
 8001a54:	0010      	movs	r0, r2
 8001a56:	f7ff fd82 	bl	800155e <LL_LPUART_TransmitData8>
	while(*str)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1eb      	bne.n	8001a3a <putstr+0x1a>
	}
	while(!LL_LPUART_IsActiveFlag_TC(LPUART1));
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <putstr+0x68>)
 8001a66:	0018      	movs	r0, r3
 8001a68:	f7ff fd59 	bl	800151e <LL_LPUART_IsActiveFlag_TC>
 8001a6c:	1e03      	subs	r3, r0, #0
 8001a6e:	d0f9      	beq.n	8001a64 <putstr+0x44>
	LL_LPUART_Disable(LPUART1);
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <putstr+0x68>)
 8001a72:	0018      	movs	r0, r3
 8001a74:	f7ff fd44 	bl	8001500 <LL_LPUART_Disable>
 8001a78:	e000      	b.n	8001a7c <putstr+0x5c>
		return;
 8001a7a:	46c0      	nop			; (mov r8, r8)
}
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b002      	add	sp, #8
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	2000008a 	.word	0x2000008a
 8001a88:	40004800 	.word	0x40004800

08001a8c <putul>:


void putul(unsigned long u)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	if(frame_counter > QUIET_FRAME)
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <putul+0x78>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	2b0a      	cmp	r3, #10
 8001a9a:	d82e      	bhi.n	8001afa <putul+0x6e>
		return;
	char num[11];
	char *d = &num[sizeof(num) - 1];
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	18fb      	adds	r3, r7, r3
 8001aa0:	330a      	adds	r3, #10
 8001aa2:	617b      	str	r3, [r7, #20]
	*d = '\0';
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
	if(u)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d019      	beq.n	8001ae4 <putul+0x58>
	{
		while(u)
 8001ab0:	e014      	b.n	8001adc <putul+0x50>
		{
			*(--d) = '0' + u % 10;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	210a      	movs	r1, #10
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f7fe fbac 	bl	8000214 <__aeabi_uidivmod>
 8001abc:	000b      	movs	r3, r1
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	3a01      	subs	r2, #1
 8001ac4:	617a      	str	r2, [r7, #20]
 8001ac6:	3330      	adds	r3, #48	; 0x30
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	701a      	strb	r2, [r3, #0]
			u /= 10;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	210a      	movs	r1, #10
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f7fe fb18 	bl	8000108 <__udivsi3>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	607b      	str	r3, [r7, #4]
		while(u)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1e7      	bne.n	8001ab2 <putul+0x26>
 8001ae2:	e005      	b.n	8001af0 <putul+0x64>
		}
	}
	else
	{
		*(--d) = '0';
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2230      	movs	r2, #48	; 0x30
 8001aee:	701a      	strb	r2, [r3, #0]
	}
	putstr(d);
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	0018      	movs	r0, r3
 8001af4:	f7ff ff94 	bl	8001a20 <putstr>
 8001af8:	e000      	b.n	8001afc <putul+0x70>
		return;
 8001afa:	46c0      	nop			; (mov r8, r8)
}
 8001afc:	46bd      	mov	sp, r7
 8001afe:	b006      	add	sp, #24
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	2000008a 	.word	0x2000008a

08001b08 <puthex>:

void puthex(uint8_t val)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	0002      	movs	r2, r0
 8001b10:	1dfb      	adds	r3, r7, #7
 8001b12:	701a      	strb	r2, [r3, #0]
	if(frame_counter > QUIET_FRAME)
 8001b14:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <puthex+0x50>)
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	2b0a      	cmp	r3, #10
 8001b1a:	d819      	bhi.n	8001b50 <puthex+0x48>
		return;
	static char hex[] = "0123456789abcedf";
	char msg[3];
	msg[0] = hex[val >> 4];
 8001b1c:	1dfb      	adds	r3, r7, #7
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	001a      	movs	r2, r3
 8001b26:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <puthex+0x54>)
 8001b28:	5c9a      	ldrb	r2, [r3, r2]
 8001b2a:	210c      	movs	r1, #12
 8001b2c:	187b      	adds	r3, r7, r1
 8001b2e:	701a      	strb	r2, [r3, #0]
	msg[1] = hex[val & 0xF];
 8001b30:	1dfb      	adds	r3, r7, #7
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	220f      	movs	r2, #15
 8001b36:	4013      	ands	r3, r2
 8001b38:	4a08      	ldr	r2, [pc, #32]	; (8001b5c <puthex+0x54>)
 8001b3a:	5cd2      	ldrb	r2, [r2, r3]
 8001b3c:	187b      	adds	r3, r7, r1
 8001b3e:	705a      	strb	r2, [r3, #1]
	msg[2] = '\0';
 8001b40:	187b      	adds	r3, r7, r1
 8001b42:	2200      	movs	r2, #0
 8001b44:	709a      	strb	r2, [r3, #2]
	putstr(msg);
 8001b46:	187b      	adds	r3, r7, r1
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f7ff ff69 	bl	8001a20 <putstr>
 8001b4e:	e000      	b.n	8001b52 <puthex+0x4a>
		return;
 8001b50:	46c0      	nop			; (mov r8, r8)
}
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b004      	add	sp, #16
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	2000008a 	.word	0x2000008a
 8001b5c:	20000020 	.word	0x20000020

08001b60 <duplexSpi>:

int8_t duplexSpi(uint8_t dev, uint8_t addr, uint8_t *data, uint16_t len)
{
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	0004      	movs	r4, r0
 8001b68:	0008      	movs	r0, r1
 8001b6a:	603a      	str	r2, [r7, #0]
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	1dfb      	adds	r3, r7, #7
 8001b70:	1c22      	adds	r2, r4, #0
 8001b72:	701a      	strb	r2, [r3, #0]
 8001b74:	1dbb      	adds	r3, r7, #6
 8001b76:	1c02      	adds	r2, r0, #0
 8001b78:	701a      	strb	r2, [r3, #0]
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	1c0a      	adds	r2, r1, #0
 8001b7e:	801a      	strh	r2, [r3, #0]
	LL_SPI_Enable(SPI1);
 8001b80:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <duplexSpi+0xf8>)
 8001b82:	0018      	movs	r0, r3
 8001b84:	f7ff fea2 	bl	80018cc <LL_SPI_Enable>
	LL_GPIO_ResetOutputPin(pins[dev].port, pins[dev].pin);
 8001b88:	1dfb      	adds	r3, r7, #7
 8001b8a:	781a      	ldrb	r2, [r3, #0]
 8001b8c:	4b33      	ldr	r3, [pc, #204]	; (8001c5c <duplexSpi+0xfc>)
 8001b8e:	00d2      	lsls	r2, r2, #3
 8001b90:	58d0      	ldr	r0, [r2, r3]
 8001b92:	1dfb      	adds	r3, r7, #7
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	4a31      	ldr	r2, [pc, #196]	; (8001c5c <duplexSpi+0xfc>)
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	18d3      	adds	r3, r2, r3
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	0019      	movs	r1, r3
 8001ba2:	f7ff ff30 	bl	8001a06 <LL_GPIO_ResetOutputPin>

	LL_SPI_TransmitData8(SPI1, addr);
 8001ba6:	1dbb      	adds	r3, r7, #6
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	4a2b      	ldr	r2, [pc, #172]	; (8001c58 <duplexSpi+0xf8>)
 8001bac:	0019      	movs	r1, r3
 8001bae:	0010      	movs	r0, r2
 8001bb0:	f7ff fef9 	bl	80019a6 <LL_SPI_TransmitData8>

	while(!LL_SPI_IsActiveFlag_RXNE(SPI1)); 		 // wait for rx to finish
 8001bb4:	46c0      	nop			; (mov r8, r8)
 8001bb6:	4b28      	ldr	r3, [pc, #160]	; (8001c58 <duplexSpi+0xf8>)
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f7ff feb6 	bl	800192a <LL_SPI_IsActiveFlag_RXNE>
 8001bbe:	1e03      	subs	r3, r0, #0
 8001bc0:	d0f9      	beq.n	8001bb6 <duplexSpi+0x56>
	LL_SPI_ReceiveData8(SPI1);      	       		 // avoid overflow
 8001bc2:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <duplexSpi+0xf8>)
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f7ff fee3 	bl	8001990 <LL_SPI_ReceiveData8>

	while(len--)
 8001bca:	e01f      	b.n	8001c0c <duplexSpi+0xac>
	{
		while (!LL_SPI_IsActiveFlag_TXE(SPI1));  // wait for tx to finish
 8001bcc:	46c0      	nop			; (mov r8, r8)
 8001bce:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <duplexSpi+0xf8>)
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f7ff febb 	bl	800194c <LL_SPI_IsActiveFlag_TXE>
 8001bd6:	1e03      	subs	r3, r0, #0
 8001bd8:	d0f9      	beq.n	8001bce <duplexSpi+0x6e>
	    LL_SPI_TransmitData8(SPI1, *data);       // send data or generate clock for slave
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	4a1e      	ldr	r2, [pc, #120]	; (8001c58 <duplexSpi+0xf8>)
 8001be0:	0019      	movs	r1, r3
 8001be2:	0010      	movs	r0, r2
 8001be4:	f7ff fedf 	bl	80019a6 <LL_SPI_TransmitData8>

	    while (!LL_SPI_IsActiveFlag_RXNE(SPI1)); // wait for rx to finish
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <duplexSpi+0xf8>)
 8001bec:	0018      	movs	r0, r3
 8001bee:	f7ff fe9c 	bl	800192a <LL_SPI_IsActiveFlag_RXNE>
 8001bf2:	1e03      	subs	r3, r0, #0
 8001bf4:	d0f9      	beq.n	8001bea <duplexSpi+0x8a>
	    *data = LL_SPI_ReceiveData8(SPI1);       // read receive result
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <duplexSpi+0xf8>)
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f7ff fec9 	bl	8001990 <LL_SPI_ReceiveData8>
 8001bfe:	0003      	movs	r3, r0
 8001c00:	001a      	movs	r2, r3
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	701a      	strb	r2, [r3, #0]
	    data++;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	603b      	str	r3, [r7, #0]
	while(len--)
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	1d3a      	adds	r2, r7, #4
 8001c12:	1e59      	subs	r1, r3, #1
 8001c14:	8011      	strh	r1, [r2, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1d8      	bne.n	8001bcc <duplexSpi+0x6c>
	}

	while (LL_SPI_IsActiveFlag_BSY(SPI1));
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <duplexSpi+0xf8>)
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f7ff fea5 	bl	800196e <LL_SPI_IsActiveFlag_BSY>
 8001c24:	1e03      	subs	r3, r0, #0
 8001c26:	d1f9      	bne.n	8001c1c <duplexSpi+0xbc>
	LL_GPIO_SetOutputPin(pins[dev].port, pins[dev].pin);
 8001c28:	1dfb      	adds	r3, r7, #7
 8001c2a:	781a      	ldrb	r2, [r3, #0]
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <duplexSpi+0xfc>)
 8001c2e:	00d2      	lsls	r2, r2, #3
 8001c30:	58d0      	ldr	r0, [r2, r3]
 8001c32:	1dfb      	adds	r3, r7, #7
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	4a09      	ldr	r2, [pc, #36]	; (8001c5c <duplexSpi+0xfc>)
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	18d3      	adds	r3, r2, r3
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	0019      	movs	r1, r3
 8001c42:	f7ff fed4 	bl	80019ee <LL_GPIO_SetOutputPin>
	LL_SPI_Disable(SPI1);
 8001c46:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <duplexSpi+0xf8>)
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f7ff fe4d 	bl	80018e8 <LL_SPI_Disable>

	return 0;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	0018      	movs	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b003      	add	sp, #12
 8001c56:	bd90      	pop	{r4, r7, pc}
 8001c58:	40013000 	.word	0x40013000
 8001c5c:	20000000 	.word	0x20000000

08001c60 <readPin>:

uint8_t readPin(uint8_t dev)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	0002      	movs	r2, r0
 8001c68:	1dfb      	adds	r3, r7, #7
 8001c6a:	701a      	strb	r2, [r3, #0]
	return LL_GPIO_IsInputPinSet(pins[dev].port, pins[dev].pin);
 8001c6c:	1dfb      	adds	r3, r7, #7
 8001c6e:	781a      	ldrb	r2, [r3, #0]
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <readPin+0x38>)
 8001c72:	00d2      	lsls	r2, r2, #3
 8001c74:	58d0      	ldr	r0, [r2, r3]
 8001c76:	1dfb      	adds	r3, r7, #7
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	4a07      	ldr	r2, [pc, #28]	; (8001c98 <readPin+0x38>)
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	18d3      	adds	r3, r2, r3
 8001c80:	3304      	adds	r3, #4
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	0019      	movs	r1, r3
 8001c86:	f7ff fea0 	bl	80019ca <LL_GPIO_IsInputPinSet>
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	b2db      	uxtb	r3, r3
}
 8001c8e:	0018      	movs	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	b002      	add	sp, #8
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	20000000 	.word	0x20000000

08001c9c <bme_setup>:

	return mV;
}

void bme_setup()
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
	bme280_dev.dev_id = BME280_CS_PIN_ID;
 8001ca2:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <bme_setup+0xc4>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	705a      	strb	r2, [r3, #1]
	bme280_dev.intf = BME280_SPI_INTF;
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <bme_setup+0xc4>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	709a      	strb	r2, [r3, #2]
	bme280_dev.read = duplexSpi;
 8001cae:	4b2c      	ldr	r3, [pc, #176]	; (8001d60 <bme_setup+0xc4>)
 8001cb0:	4a2c      	ldr	r2, [pc, #176]	; (8001d64 <bme_setup+0xc8>)
 8001cb2:	605a      	str	r2, [r3, #4]
	bme280_dev.write = duplexSpi;
 8001cb4:	4b2a      	ldr	r3, [pc, #168]	; (8001d60 <bme_setup+0xc4>)
 8001cb6:	4a2b      	ldr	r2, [pc, #172]	; (8001d64 <bme_setup+0xc8>)
 8001cb8:	609a      	str	r2, [r3, #8]
	bme280_dev.delay_ms = LL_mDelay;
 8001cba:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <bme_setup+0xc4>)
 8001cbc:	4a2a      	ldr	r2, [pc, #168]	; (8001d68 <bme_setup+0xcc>)
 8001cbe:	60da      	str	r2, [r3, #12]
	int bme_init = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	607b      	str	r3, [r7, #4]

	while(!bme_init)
 8001cc4:	e044      	b.n	8001d50 <bme_setup+0xb4>
	{
		if(bme280_init(&bme280_dev) == BME280_OK)
 8001cc6:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <bme_setup+0xc4>)
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f7fe fc9f 	bl	800060c <bme280_init>
 8001cce:	1e03      	subs	r3, r0, #0
 8001cd0:	d132      	bne.n	8001d38 <bme_setup+0x9c>
		{
			bme280_dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8001cd2:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <bme_setup+0xc4>)
 8001cd4:	223a      	movs	r2, #58	; 0x3a
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	5499      	strb	r1, [r3, r2]
			bme280_dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8001cda:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <bme_setup+0xc4>)
 8001cdc:	2238      	movs	r2, #56	; 0x38
 8001cde:	2105      	movs	r1, #5
 8001ce0:	5499      	strb	r1, [r3, r2]
			bme280_dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8001ce2:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <bme_setup+0xc4>)
 8001ce4:	2239      	movs	r2, #57	; 0x39
 8001ce6:	2102      	movs	r1, #2
 8001ce8:	5499      	strb	r1, [r3, r2]
			bme280_dev.settings.filter = BME280_FILTER_COEFF_16;
 8001cea:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <bme_setup+0xc4>)
 8001cec:	223b      	movs	r2, #59	; 0x3b
 8001cee:	2104      	movs	r1, #4
 8001cf0:	5499      	strb	r1, [r3, r2]

			if(bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &bme280_dev) == BME280_OK)
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <bme_setup+0xc4>)
 8001cf4:	0019      	movs	r1, r3
 8001cf6:	200f      	movs	r0, #15
 8001cf8:	f7fe fdd4 	bl	80008a4 <bme280_set_sensor_settings>
 8001cfc:	1e03      	subs	r3, r0, #0
 8001cfe:	d116      	bne.n	8001d2e <bme_setup+0x92>
			{
				bme280_delay = bme280_cal_meas_delay(&bme280_dev.settings);
 8001d00:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <bme_setup+0xd0>)
 8001d02:	0018      	movs	r0, r3
 8001d04:	f7fe fed0 	bl	8000aa8 <bme280_cal_meas_delay>
 8001d08:	0002      	movs	r2, r0
 8001d0a:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <bme_setup+0xd4>)
 8001d0c:	601a      	str	r2, [r3, #0]
				putstr("BME delayMs: ");
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <bme_setup+0xd8>)
 8001d10:	0018      	movs	r0, r3
 8001d12:	f7ff fe85 	bl	8001a20 <putstr>
				putul(bme280_delay);
 8001d16:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <bme_setup+0xd4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f7ff feb6 	bl	8001a8c <putul>
				if(bme280_delay)
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <bme_setup+0xd4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00b      	beq.n	8001d40 <bme_setup+0xa4>
				{
					bme_init = 1;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	e008      	b.n	8001d40 <bme_setup+0xa4>
				}
			}
			else
			{
				putstr("BME Setup Error! \n");
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <bme_setup+0xdc>)
 8001d30:	0018      	movs	r0, r3
 8001d32:	f7ff fe75 	bl	8001a20 <putstr>
 8001d36:	e003      	b.n	8001d40 <bme_setup+0xa4>
			}
		}
		else
		{
			putstr("BME init error! \n");
 8001d38:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <bme_setup+0xe0>)
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f7ff fe70 	bl	8001a20 <putstr>
		}

		if(!bme_init)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d104      	bne.n	8001d50 <bme_setup+0xb4>
		{
			LL_mDelay(1000);
 8001d46:	23fa      	movs	r3, #250	; 0xfa
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f001 fd14 	bl	8003778 <LL_mDelay>
	while(!bme_init)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0b7      	beq.n	8001cc6 <bme_setup+0x2a>
		}
	}
}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b002      	add	sp, #8
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	2000008c 	.word	0x2000008c
 8001d64:	08001b61 	.word	0x08001b61
 8001d68:	08003779 	.word	0x08003779
 8001d6c:	200000c4 	.word	0x200000c4
 8001d70:	20000108 	.word	0x20000108
 8001d74:	08003864 	.word	0x08003864
 8001d78:	08003874 	.word	0x08003874
 8001d7c:	08003888 	.word	0x08003888

08001d80 <rfm_setup>:
	putstr("m%, P:");
	putul(bme280_data.pressure);
}

void rfm_setup(uint32_t seed)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	rfm95_dev.nss_pin_id = RFM95_NSS_PIN_ID;
 8001d88:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <rfm_setup+0x70>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	709a      	strb	r2, [r3, #2]
	rfm95_dev.dio0_pin_id = RFM95_DIO0_PIN_ID;
 8001d8e:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <rfm_setup+0x70>)
 8001d90:	2202      	movs	r2, #2
 8001d92:	701a      	strb	r2, [r3, #0]
	rfm95_dev.dio5_pin_id = RFM95_DIO5_PIN_ID;
 8001d94:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <rfm_setup+0x70>)
 8001d96:	2203      	movs	r2, #3
 8001d98:	705a      	strb	r2, [r3, #1]

	rfm95_dev.spi_read = duplexSpi;
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <rfm_setup+0x70>)
 8001d9c:	4a15      	ldr	r2, [pc, #84]	; (8001df4 <rfm_setup+0x74>)
 8001d9e:	609a      	str	r2, [r3, #8]
	rfm95_dev.spi_write = duplexSpi;
 8001da0:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <rfm_setup+0x70>)
 8001da2:	4a14      	ldr	r2, [pc, #80]	; (8001df4 <rfm_setup+0x74>)
 8001da4:	605a      	str	r2, [r3, #4]
	rfm95_dev.delay = LL_mDelay;
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <rfm_setup+0x70>)
 8001da8:	4a13      	ldr	r2, [pc, #76]	; (8001df8 <rfm_setup+0x78>)
 8001daa:	611a      	str	r2, [r3, #16]
	rfm95_dev.pin_read = readPin;
 8001dac:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <rfm_setup+0x70>)
 8001dae:	4a13      	ldr	r2, [pc, #76]	; (8001dfc <rfm_setup+0x7c>)
 8001db0:	60da      	str	r2, [r3, #12]


	while(rfm95_ver != 0x12)
 8001db2:	e009      	b.n	8001dc8 <rfm_setup+0x48>
	{
		rfm95_ver = rfm95_init(&rfm95_dev, seed);
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <rfm_setup+0x70>)
 8001db8:	0011      	movs	r1, r2
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f000 fb9a 	bl	80024f4 <rfm95_init>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	001a      	movs	r2, r3
 8001dc4:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <rfm_setup+0x80>)
 8001dc6:	701a      	strb	r2, [r3, #0]
	while(rfm95_ver != 0x12)
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <rfm_setup+0x80>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b12      	cmp	r3, #18
 8001dce:	d1f1      	bne.n	8001db4 <rfm_setup+0x34>
	}

	lorawan_init(&lorawan, &rfm95_dev	);
 8001dd0:	4a07      	ldr	r2, [pc, #28]	; (8001df0 <rfm_setup+0x70>)
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <rfm_setup+0x84>)
 8001dd4:	0011      	movs	r1, r2
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f7ff fac1 	bl	800135e <lorawan_init>
	lorawan_set_keys(&lorawan, NwkSkey, AppSkey, DevAddr);
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <rfm_setup+0x88>)
 8001dde:	4a0b      	ldr	r2, [pc, #44]	; (8001e0c <rfm_setup+0x8c>)
 8001de0:	490b      	ldr	r1, [pc, #44]	; (8001e10 <rfm_setup+0x90>)
 8001de2:	4808      	ldr	r0, [pc, #32]	; (8001e04 <rfm_setup+0x84>)
 8001de4:	f7ff fac7 	bl	8001376 <lorawan_set_keys>
		{
			buf[i] = i;
		}
		lorawan_send_data(&lorawan, buf, sizeof(buf), 0);
	}
}
 8001de8:	46c0      	nop			; (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b004      	add	sp, #16
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	2000011c 	.word	0x2000011c
 8001df4:	08001b61 	.word	0x08001b61
 8001df8:	08003779 	.word	0x08003779
 8001dfc:	08001c61 	.word	0x08001c61
 8001e00:	20000088 	.word	0x20000088
 8001e04:	2000010c 	.word	0x2000010c
 8001e08:	2000007c 	.word	0x2000007c
 8001e0c:	2000006c 	.word	0x2000006c
 8001e10:	2000005c 	.word	0x2000005c

08001e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e1a:	f000 fd23 	bl	8002864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e1e:	f000 f877 	bl	8001f10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e22:	f000 fa9b 	bl	800235c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001e26:	f000 f961 	bl	80020ec <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8001e2a:	f000 f9ff 	bl	800222c <MX_SPI1_Init>
  MX_ADC_Init();
 8001e2e:	f000 f8c7 	bl	8001fc0 <MX_ADC_Init>
  MX_RTC_Init();
 8001e32:	f000 f9c7 	bl	80021c4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  LL_GPIO_SetOutputPin(pins[BME280_CS_PIN_ID].port, pins[BME280_CS_PIN_ID].pin);
 8001e36:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <main+0xd8>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	4b2c      	ldr	r3, [pc, #176]	; (8001eec <main+0xd8>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	0019      	movs	r1, r3
 8001e40:	0010      	movs	r0, r2
 8001e42:	f7ff fdd4 	bl	80019ee <LL_GPIO_SetOutputPin>
  LL_GPIO_SetOutputPin(pins[RFM95_NSS_PIN_ID].port, pins[RFM95_NSS_PIN_ID].pin);
 8001e46:	4b29      	ldr	r3, [pc, #164]	; (8001eec <main+0xd8>)
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	4b28      	ldr	r3, [pc, #160]	; (8001eec <main+0xd8>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	0019      	movs	r1, r3
 8001e50:	0010      	movs	r0, r2
 8001e52:	f7ff fdcc 	bl	80019ee <LL_GPIO_SetOutputPin>

  frame_counter = (uint16_t)HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0);
 8001e56:	4b26      	ldr	r3, [pc, #152]	; (8001ef0 <main+0xdc>)
 8001e58:	2100      	movs	r1, #0
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f001 f834 	bl	8002ec8 <HAL_RTCEx_BKUPRead>
 8001e60:	0003      	movs	r3, r0
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <main+0xe0>)
 8001e66:	801a      	strh	r2, [r3, #0]

  //Att: to LED to save power
  if(frame_counter <= QUIET_FRAME)
 8001e68:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <main+0xe0>)
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	2b0a      	cmp	r3, #10
 8001e6e:	d807      	bhi.n	8001e80 <main+0x6c>
  {
	  LL_GPIO_SetOutputPin(LED_GPIO_Port, LED_Pin);
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	005a      	lsls	r2, r3, #1
 8001e74:	23a0      	movs	r3, #160	; 0xa0
 8001e76:	05db      	lsls	r3, r3, #23
 8001e78:	0011      	movs	r1, r2
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	f7ff fdb7 	bl	80019ee <LL_GPIO_SetOutputPin>
  }

  putstr("\nStart BME_IoT_Node" __DATE__ " " __TIME__ "device 0x");
 8001e80:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <main+0xe4>)
 8001e82:	0018      	movs	r0, r3
 8001e84:	f7ff fdcc 	bl	8001a20 <putstr>
  for(unsigned i = 0; i < 4; i++)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	e009      	b.n	8001ea2 <main+0x8e>
  {
	  puthex(DevAddr[i]);
 8001e8e:	4a1b      	ldr	r2, [pc, #108]	; (8001efc <main+0xe8>)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	18d3      	adds	r3, r2, r3
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	0018      	movs	r0, r3
 8001e98:	f7ff fe36 	bl	8001b08 <puthex>
  for(unsigned i = 0; i < 4; i++)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d9f2      	bls.n	8001e8e <main+0x7a>
  }

  if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8001ea8:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <main+0xec>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2202      	movs	r2, #2
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d10a      	bne.n	8001eca <main+0xb6>
  {
	  putstr("from Standby");
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <main+0xf0>)
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f7ff fdb2 	bl	8001a20 <putstr>
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8001ebc:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <main+0xec>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <main+0xec>)
 8001ec2:	2108      	movs	r1, #8
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	e007      	b.n	8001eda <main+0xc6>
  }
  else
  {
	  putstr("from RESET. ");
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <main+0xf4>)
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f7ff fda7 	bl	8001a20 <putstr>

	  //     At first power on give a button cell a bit of time
	  //     to charge a capacitor before sending something to prevent boot loop

	  LL_mDelay(5000);
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <main+0xf8>)
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f001 fc4f 	bl	8003778 <LL_mDelay>
  }

  rfm_setup(frame_counter);
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <main+0xe0>)
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f7ff ff4e 	bl	8001d80 <rfm_setup>
  bme_setup();
 8001ee4:	f7ff feda 	bl	8001c9c <bme_setup>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <main+0xd4>
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	200000cc 	.word	0x200000cc
 8001ef4:	2000008a 	.word	0x2000008a
 8001ef8:	080038b8 	.word	0x080038b8
 8001efc:	2000007c 	.word	0x2000007c
 8001f00:	40007000 	.word	0x40007000
 8001f04:	080038ec 	.word	0x080038ec
 8001f08:	080038fc 	.word	0x080038fc
 8001f0c:	00001388 	.word	0x00001388

08001f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001f14:	2000      	movs	r0, #0
 8001f16:	f7ff fc95 	bl	8001844 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	f7ff fca6 	bl	800186c <LL_FLASH_GetLatency>
 8001f20:	1e03      	subs	r3, r0, #0
 8001f22:	d1fb      	bne.n	8001f1c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f7ff fcab 	bl	8001884 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_LSI_Enable();
 8001f2e:	f7ff fb25 	bl	800157c <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	f7ff fb30 	bl	8001598 <LL_RCC_LSI_IsReady>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d1fa      	bne.n	8001f34 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_MSI_Enable();
 8001f3e:	f7ff fb3b 	bl	80015b8 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	f7ff fb46 	bl	80015d4 <LL_RCC_MSI_IsReady>
 8001f48:	0003      	movs	r3, r0
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d1fa      	bne.n	8001f44 <SystemClock_Config+0x34>
  {

  }
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_5);
 8001f4e:	23a0      	movs	r3, #160	; 0xa0
 8001f50:	021b      	lsls	r3, r3, #8
 8001f52:	0018      	movs	r0, r3
 8001f54:	f7ff fb52 	bl	80015fc <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f7ff fb65 	bl	8001628 <LL_RCC_MSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 8001f5e:	f7ff fca7 	bl	80018b0 <LL_PWR_EnableBkUpAccess>
  LL_RCC_ForceBackupDomainReset();
 8001f62:	f7ff fc0f 	bl	8001784 <LL_RCC_ForceBackupDomainReset>
  LL_RCC_ReleaseBackupDomainReset();
 8001f66:	f7ff fc1b 	bl	80017a0 <LL_RCC_ReleaseBackupDomainReset>
  LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSI);
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	029b      	lsls	r3, r3, #10
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f7ff fbe4 	bl	800173c <LL_RCC_SetRTCClockSource>
  LL_RCC_EnableRTC();
 8001f74:	f7ff fbf8 	bl	8001768 <LL_RCC_EnableRTC>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f7ff fb89 	bl	8001690 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7ff fb9a 	bl	80016b8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7ff fbad 	bl	80016e4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f7ff fb60 	bl	8001650 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 8001f90:	46c0      	nop			; (mov r8, r8)
 8001f92:	f7ff fb71 	bl	8001678 <LL_RCC_GetSysClkSource>
 8001f96:	1e03      	subs	r3, r0, #0
 8001f98:	d1fb      	bne.n	8001f92 <SystemClock_Config+0x82>
  {

  }
  LL_SetSystemCoreClock(2097000);
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <SystemClock_Config+0xac>)
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f001 fc0d 	bl	80037bc <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f000 fc7e 	bl	80028a4 <HAL_InitTick>
 8001fa8:	1e03      	subs	r3, r0, #0
 8001faa:	d001      	beq.n	8001fb0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001fac:	f000 fa62 	bl	8002474 <Error_Handler>
  }
  LL_RCC_SetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE_PCLK1);
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f7ff fbad 	bl	8001710 <LL_RCC_SetLPUARTClockSource>
}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	001fff68 	.word	0x001fff68

08001fc0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b08b      	sub	sp, #44	; 0x2c
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001fc6:	2410      	movs	r4, #16
 8001fc8:	193b      	adds	r3, r7, r4
 8001fca:	0018      	movs	r0, r3
 8001fcc:	2314      	movs	r3, #20
 8001fce:	001a      	movs	r2, r3
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	f001 fc2e 	bl	8003832 <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001fd6:	003b      	movs	r3, r7
 8001fd8:	0018      	movs	r0, r3
 8001fda:	2310      	movs	r3, #16
 8001fdc:	001a      	movs	r2, r3
 8001fde:	2100      	movs	r1, #0
 8001fe0:	f001 fc27 	bl	8003832 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f7ff fbff 	bl	80017ec <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_VREFINT);
 8001fee:	4a3a      	ldr	r2, [pc, #232]	; (80020d8 <MX_ADC_Init+0x118>)
 8001ff0:	4b3a      	ldr	r3, [pc, #232]	; (80020dc <MX_ADC_Init+0x11c>)
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f7ff fa1f 	bl	8001438 <LL_ADC_REG_SetSequencerChAdd>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	03db      	lsls	r3, r3, #15
 8001ffe:	4a38      	ldr	r2, [pc, #224]	; (80020e0 <MX_ADC_Init+0x120>)
 8002000:	0019      	movs	r1, r3
 8002002:	0010      	movs	r0, r2
 8002004:	f7ff f9e0 	bl	80013c8 <LL_ADC_SetCommonPathInternalCh>
  /** Common config
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8002008:	0021      	movs	r1, r4
 800200a:	187b      	adds	r3, r7, r1
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8002010:	187b      	adds	r3, r7, r1
 8002012:	2200      	movs	r2, #0
 8002014:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8002016:	187b      	adds	r3, r7, r1
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 800201c:	187b      	adds	r3, r7, r1
 800201e:	2200      	movs	r2, #0
 8002020:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8002022:	187b      	adds	r3, r7, r1
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8002028:	187b      	adds	r3, r7, r1
 800202a:	4a2c      	ldr	r2, [pc, #176]	; (80020dc <MX_ADC_Init+0x11c>)
 800202c:	0019      	movs	r1, r3
 800202e:	0010      	movs	r0, r2
 8002030:	f000 ffa4 	bl	8002f7c <LL_ADC_REG_Init>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8002034:	4b29      	ldr	r3, [pc, #164]	; (80020dc <MX_ADC_Init+0x11c>)
 8002036:	2100      	movs	r1, #0
 8002038:	0018      	movs	r0, r3
 800203a:	f7ff f9d9 	bl	80013f0 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 800203e:	4b27      	ldr	r3, [pc, #156]	; (80020dc <MX_ADC_Init+0x11c>)
 8002040:	2100      	movs	r1, #0
 8002042:	0018      	movs	r0, r3
 8002044:	f7ff fa09 	bl	800145a <LL_ADC_SetOverSamplingScope>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <MX_ADC_Init+0x11c>)
 800204a:	2100      	movs	r1, #0
 800204c:	0018      	movs	r0, r3
 800204e:	f7ff f9e1 	bl	8001414 <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_LOW);
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	049b      	lsls	r3, r3, #18
 8002056:	4a22      	ldr	r2, [pc, #136]	; (80020e0 <MX_ADC_Init+0x120>)
 8002058:	0019      	movs	r1, r3
 800205a:	0010      	movs	r0, r2
 800205c:	f7ff f9a0 	bl	80013a0 <LL_ADC_SetCommonFrequencyMode>
  LL_ADC_DisableIT_EOC(ADC1);
 8002060:	4b1e      	ldr	r3, [pc, #120]	; (80020dc <MX_ADC_Init+0x11c>)
 8002062:	0018      	movs	r0, r3
 8002064:	f7ff fa20 	bl	80014a8 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8002068:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <MX_ADC_Init+0x11c>)
 800206a:	0018      	movs	r0, r3
 800206c:	f7ff fa2b 	bl	80014c6 <LL_ADC_DisableIT_EOS>

   /* Enable ADC internal voltage regulator */
   LL_ADC_EnableInternalRegulator(ADC1);
 8002070:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <MX_ADC_Init+0x11c>)
 8002072:	0018      	movs	r0, r3
 8002074:	f7ff fa04 	bl	8001480 <LL_ADC_EnableInternalRegulator>
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8002078:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <MX_ADC_Init+0x124>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	491a      	ldr	r1, [pc, #104]	; (80020e8 <MX_ADC_Init+0x128>)
 800207e:	0018      	movs	r0, r3
 8002080:	f7fe f842 	bl	8000108 <__udivsi3>
 8002084:	0003      	movs	r3, r0
 8002086:	001a      	movs	r2, r3
 8002088:	0013      	movs	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	189b      	adds	r3, r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	210a      	movs	r1, #10
 8002092:	0018      	movs	r0, r3
 8002094:	f7fe f838 	bl	8000108 <__udivsi3>
 8002098:	0003      	movs	r3, r0
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
   while(wait_loop_index != 0)
 800209c:	e002      	b.n	80020a4 <MX_ADC_Init+0xe4>
     {
   wait_loop_index--;
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	3b01      	subs	r3, #1
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
   while(wait_loop_index != 0)
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f9      	bne.n	800209e <MX_ADC_Init+0xde>
     }
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV1;
 80020aa:	003b      	movs	r3, r7
 80020ac:	22c0      	movs	r2, #192	; 0xc0
 80020ae:	0612      	lsls	r2, r2, #24
 80020b0:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80020b2:	003b      	movs	r3, r7
 80020b4:	2200      	movs	r2, #0
 80020b6:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80020b8:	003b      	movs	r3, r7
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80020be:	003b      	movs	r3, r7
 80020c0:	2200      	movs	r2, #0
 80020c2:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80020c4:	003b      	movs	r3, r7
 80020c6:	4a05      	ldr	r2, [pc, #20]	; (80020dc <MX_ADC_Init+0x11c>)
 80020c8:	0019      	movs	r1, r3
 80020ca:	0010      	movs	r0, r2
 80020cc:	f000 ff20 	bl	8002f10 <LL_ADC_Init>
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80020d0:	46c0      	nop			; (mov r8, r8)
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b00b      	add	sp, #44	; 0x2c
 80020d6:	bd90      	pop	{r4, r7, pc}
 80020d8:	c4020000 	.word	0xc4020000
 80020dc:	40012400 	.word	0x40012400
 80020e0:	40012708 	.word	0x40012708
 80020e4:	20000034 	.word	0x20000034
 80020e8:	00030d40 	.word	0x00030d40

080020ec <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80020ec:	b590      	push	{r4, r7, lr}
 80020ee:	b08d      	sub	sp, #52	; 0x34
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 80020f2:	2418      	movs	r4, #24
 80020f4:	193b      	adds	r3, r7, r4
 80020f6:	0018      	movs	r0, r3
 80020f8:	2318      	movs	r3, #24
 80020fa:	001a      	movs	r2, r3
 80020fc:	2100      	movs	r1, #0
 80020fe:	f001 fb98 	bl	8003832 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002102:	003b      	movs	r3, r7
 8002104:	0018      	movs	r0, r3
 8002106:	2318      	movs	r3, #24
 8002108:	001a      	movs	r2, r3
 800210a:	2100      	movs	r1, #0
 800210c:	f001 fb91 	bl	8003832 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_LPUART1);
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	02db      	lsls	r3, r3, #11
 8002114:	0018      	movs	r0, r3
 8002116:	f7ff fb53 	bl	80017c0 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800211a:	2001      	movs	r0, #1
 800211c:	f7ff fb7c 	bl	8001818 <LL_IOP_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PA0-CK_IN   ------> LPUART1_RX
  PA1   ------> LPUART1_TX
  */
  GPIO_InitStruct.Pin = TX_READY_Pin;
 8002120:	003b      	movs	r3, r7
 8002122:	2201      	movs	r2, #1
 8002124:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002126:	003b      	movs	r3, r7
 8002128:	2202      	movs	r2, #2
 800212a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800212c:	003b      	movs	r3, r7
 800212e:	2203      	movs	r2, #3
 8002130:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002132:	003b      	movs	r3, r7
 8002134:	2200      	movs	r2, #0
 8002136:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002138:	003b      	movs	r3, r7
 800213a:	2200      	movs	r2, #0
 800213c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800213e:	003b      	movs	r3, r7
 8002140:	2206      	movs	r2, #6
 8002142:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(TX_READY_GPIO_Port, &GPIO_InitStruct);
 8002144:	003a      	movs	r2, r7
 8002146:	23a0      	movs	r3, #160	; 0xa0
 8002148:	05db      	lsls	r3, r3, #23
 800214a:	0011      	movs	r1, r2
 800214c:	0018      	movs	r0, r3
 800214e:	f001 f805 	bl	800315c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = TX_Pin;
 8002152:	003b      	movs	r3, r7
 8002154:	2202      	movs	r2, #2
 8002156:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002158:	003b      	movs	r3, r7
 800215a:	2202      	movs	r2, #2
 800215c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800215e:	003b      	movs	r3, r7
 8002160:	2203      	movs	r2, #3
 8002162:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002164:	003b      	movs	r3, r7
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800216a:	003b      	movs	r3, r7
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002170:	003b      	movs	r3, r7
 8002172:	2206      	movs	r2, #6
 8002174:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8002176:	003a      	movs	r2, r7
 8002178:	23a0      	movs	r3, #160	; 0xa0
 800217a:	05db      	lsls	r3, r3, #23
 800217c:	0011      	movs	r1, r2
 800217e:	0018      	movs	r0, r3
 8002180:	f000 ffec 	bl	800315c <LL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.BaudRate = 115200;
 8002184:	193b      	adds	r3, r7, r4
 8002186:	22e1      	movs	r2, #225	; 0xe1
 8002188:	0252      	lsls	r2, r2, #9
 800218a:	601a      	str	r2, [r3, #0]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 800218c:	0021      	movs	r1, r4
 800218e:	187b      	adds	r3, r7, r1
 8002190:	2200      	movs	r2, #0
 8002192:	605a      	str	r2, [r3, #4]
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 8002194:	187b      	adds	r3, r7, r1
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 800219a:	187b      	adds	r3, r7, r1
 800219c:	2200      	movs	r2, #0
 800219e:	60da      	str	r2, [r3, #12]
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX;
 80021a0:	187b      	adds	r3, r7, r1
 80021a2:	2208      	movs	r2, #8
 80021a4:	611a      	str	r2, [r3, #16]
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 80021a6:	187b      	adds	r3, r7, r1
 80021a8:	2200      	movs	r2, #0
 80021aa:	615a      	str	r2, [r3, #20]
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 80021ac:	187b      	adds	r3, r7, r1
 80021ae:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <MX_LPUART1_UART_Init+0xd4>)
 80021b0:	0019      	movs	r1, r3
 80021b2:	0010      	movs	r0, r2
 80021b4:	f001 f892 	bl	80032dc <LL_LPUART_Init>
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80021b8:	46c0      	nop			; (mov r8, r8)
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b00d      	add	sp, #52	; 0x34
 80021be:	bd90      	pop	{r4, r7, pc}
 80021c0:	40004800 	.word	0x40004800

080021c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80021c8:	4b16      	ldr	r3, [pc, #88]	; (8002224 <MX_RTC_Init+0x60>)
 80021ca:	4a17      	ldr	r2, [pc, #92]	; (8002228 <MX_RTC_Init+0x64>)
 80021cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80021ce:	4b15      	ldr	r3, [pc, #84]	; (8002224 <MX_RTC_Init+0x60>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80021d4:	4b13      	ldr	r3, [pc, #76]	; (8002224 <MX_RTC_Init+0x60>)
 80021d6:	227f      	movs	r2, #127	; 0x7f
 80021d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80021da:	4b12      	ldr	r3, [pc, #72]	; (8002224 <MX_RTC_Init+0x60>)
 80021dc:	22ff      	movs	r2, #255	; 0xff
 80021de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80021e0:	4b10      	ldr	r3, [pc, #64]	; (8002224 <MX_RTC_Init+0x60>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80021e6:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <MX_RTC_Init+0x60>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80021ec:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <MX_RTC_Init+0x60>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80021f2:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <MX_RTC_Init+0x60>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021f8:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <MX_RTC_Init+0x60>)
 80021fa:	0018      	movs	r0, r3
 80021fc:	f000 fc7c 	bl	8002af8 <HAL_RTC_Init>
 8002200:	1e03      	subs	r3, r0, #0
 8002202:	d001      	beq.n	8002208 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8002204:	f000 f936 	bl	8002474 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <MX_RTC_Init+0x60>)
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	0018      	movs	r0, r3
 8002210:	f000 fd62 	bl	8002cd8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002214:	1e03      	subs	r3, r0, #0
 8002216:	d001      	beq.n	800221c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8002218:	f000 f92c 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	200000cc 	.word	0x200000cc
 8002228:	40002800 	.word	0x40002800

0800222c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800222c:	b590      	push	{r4, r7, lr}
 800222e:	b091      	sub	sp, #68	; 0x44
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002232:	2418      	movs	r4, #24
 8002234:	193b      	adds	r3, r7, r4
 8002236:	0018      	movs	r0, r3
 8002238:	2328      	movs	r3, #40	; 0x28
 800223a:	001a      	movs	r2, r3
 800223c:	2100      	movs	r1, #0
 800223e:	f001 faf8 	bl	8003832 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002242:	003b      	movs	r3, r7
 8002244:	0018      	movs	r0, r3
 8002246:	2318      	movs	r3, #24
 8002248:	001a      	movs	r2, r3
 800224a:	2100      	movs	r1, #0
 800224c:	f001 faf1 	bl	8003832 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	015b      	lsls	r3, r3, #5
 8002254:	0018      	movs	r0, r3
 8002256:	f7ff fac9 	bl	80017ec <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800225a:	2001      	movs	r0, #1
 800225c:	f7ff fadc 	bl	8001818 <LL_IOP_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8002260:	003b      	movs	r3, r7
 8002262:	2220      	movs	r2, #32
 8002264:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002266:	003b      	movs	r3, r7
 8002268:	2202      	movs	r2, #2
 800226a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800226c:	003b      	movs	r3, r7
 800226e:	2203      	movs	r2, #3
 8002270:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002272:	003b      	movs	r3, r7
 8002274:	2200      	movs	r2, #0
 8002276:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002278:	003b      	movs	r3, r7
 800227a:	2200      	movs	r2, #0
 800227c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 800227e:	003b      	movs	r3, r7
 8002280:	2200      	movs	r2, #0
 8002282:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002284:	003a      	movs	r2, r7
 8002286:	23a0      	movs	r3, #160	; 0xa0
 8002288:	05db      	lsls	r3, r3, #23
 800228a:	0011      	movs	r1, r2
 800228c:	0018      	movs	r0, r3
 800228e:	f000 ff65 	bl	800315c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8002292:	003b      	movs	r3, r7
 8002294:	2240      	movs	r2, #64	; 0x40
 8002296:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002298:	003b      	movs	r3, r7
 800229a:	2202      	movs	r2, #2
 800229c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800229e:	003b      	movs	r3, r7
 80022a0:	2203      	movs	r2, #3
 80022a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022a4:	003b      	movs	r3, r7
 80022a6:	2200      	movs	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80022aa:	003b      	movs	r3, r7
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 80022b0:	003b      	movs	r3, r7
 80022b2:	2200      	movs	r2, #0
 80022b4:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b6:	003a      	movs	r2, r7
 80022b8:	23a0      	movs	r3, #160	; 0xa0
 80022ba:	05db      	lsls	r3, r3, #23
 80022bc:	0011      	movs	r1, r2
 80022be:	0018      	movs	r0, r3
 80022c0:	f000 ff4c 	bl	800315c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80022c4:	003b      	movs	r3, r7
 80022c6:	2280      	movs	r2, #128	; 0x80
 80022c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80022ca:	003b      	movs	r3, r7
 80022cc:	2202      	movs	r2, #2
 80022ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80022d0:	003b      	movs	r3, r7
 80022d2:	2203      	movs	r2, #3
 80022d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022d6:	003b      	movs	r3, r7
 80022d8:	2200      	movs	r2, #0
 80022da:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80022dc:	003b      	movs	r3, r7
 80022de:	2200      	movs	r2, #0
 80022e0:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 80022e2:	003b      	movs	r3, r7
 80022e4:	2200      	movs	r2, #0
 80022e6:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e8:	003a      	movs	r2, r7
 80022ea:	23a0      	movs	r3, #160	; 0xa0
 80022ec:	05db      	lsls	r3, r3, #23
 80022ee:	0011      	movs	r1, r2
 80022f0:	0018      	movs	r0, r3
 80022f2:	f000 ff33 	bl	800315c <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80022f6:	193b      	adds	r3, r7, r4
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80022fc:	193b      	adds	r3, r7, r4
 80022fe:	2282      	movs	r2, #130	; 0x82
 8002300:	0052      	lsls	r2, r2, #1
 8002302:	605a      	str	r2, [r3, #4]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002304:	0021      	movs	r1, r4
 8002306:	187b      	adds	r3, r7, r1
 8002308:	2200      	movs	r2, #0
 800230a:	609a      	str	r2, [r3, #8]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800230c:	187b      	adds	r3, r7, r1
 800230e:	2200      	movs	r2, #0
 8002310:	60da      	str	r2, [r3, #12]
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8002312:	187b      	adds	r3, r7, r1
 8002314:	2200      	movs	r2, #0
 8002316:	611a      	str	r2, [r3, #16]
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002318:	187b      	adds	r3, r7, r1
 800231a:	2280      	movs	r2, #128	; 0x80
 800231c:	0092      	lsls	r2, r2, #2
 800231e:	615a      	str	r2, [r3, #20]
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8002320:	187b      	adds	r3, r7, r1
 8002322:	2200      	movs	r2, #0
 8002324:	619a      	str	r2, [r3, #24]
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002326:	187b      	adds	r3, r7, r1
 8002328:	2200      	movs	r2, #0
 800232a:	61da      	str	r2, [r3, #28]
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800232c:	187b      	adds	r3, r7, r1
 800232e:	2200      	movs	r2, #0
 8002330:	621a      	str	r2, [r3, #32]
  SPI_InitStruct.CRCPoly = 7;
 8002332:	187b      	adds	r3, r7, r1
 8002334:	2207      	movs	r2, #7
 8002336:	625a      	str	r2, [r3, #36]	; 0x24
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002338:	187b      	adds	r3, r7, r1
 800233a:	4a07      	ldr	r2, [pc, #28]	; (8002358 <MX_SPI1_Init+0x12c>)
 800233c:	0019      	movs	r1, r3
 800233e:	0010      	movs	r0, r2
 8002340:	f001 f9c4 	bl	80036cc <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <MX_SPI1_Init+0x12c>)
 8002346:	2100      	movs	r1, #0
 8002348:	0018      	movs	r0, r3
 800234a:	f7ff fadc 	bl	8001906 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	46bd      	mov	sp, r7
 8002352:	b011      	add	sp, #68	; 0x44
 8002354:	bd90      	pop	{r4, r7, pc}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	40013000 	.word	0x40013000

0800235c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002362:	003b      	movs	r3, r7
 8002364:	0018      	movs	r0, r3
 8002366:	2318      	movs	r3, #24
 8002368:	001a      	movs	r2, r3
 800236a:	2100      	movs	r1, #0
 800236c:	f001 fa61 	bl	8003832 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8002370:	2001      	movs	r0, #1
 8002372:	f7ff fa51 	bl	8001818 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8002376:	2002      	movs	r0, #2
 8002378:	f7ff fa4e 	bl	8001818 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(BME_CS_GPIO_Port, BME_CS_Pin);
 800237c:	23a0      	movs	r3, #160	; 0xa0
 800237e:	05db      	lsls	r3, r3, #23
 8002380:	2108      	movs	r1, #8
 8002382:	0018      	movs	r0, r3
 8002384:	f7ff fb3f 	bl	8001a06 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RFM_CS_GPIO_Port, RFM_CS_Pin);
 8002388:	23a0      	movs	r3, #160	; 0xa0
 800238a:	05db      	lsls	r3, r3, #23
 800238c:	2110      	movs	r1, #16
 800238e:	0018      	movs	r0, r3
 8002390:	f7ff fb39 	bl	8001a06 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8002394:	2380      	movs	r3, #128	; 0x80
 8002396:	005a      	lsls	r2, r3, #1
 8002398:	23a0      	movs	r3, #160	; 0xa0
 800239a:	05db      	lsls	r3, r3, #23
 800239c:	0011      	movs	r1, r2
 800239e:	0018      	movs	r0, r3
 80023a0:	f7ff fb31 	bl	8001a06 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = BME_CS_Pin;
 80023a4:	003b      	movs	r3, r7
 80023a6:	2208      	movs	r2, #8
 80023a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80023aa:	003b      	movs	r3, r7
 80023ac:	2201      	movs	r2, #1
 80023ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80023b0:	003b      	movs	r3, r7
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023b6:	003b      	movs	r3, r7
 80023b8:	2200      	movs	r2, #0
 80023ba:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023bc:	003b      	movs	r3, r7
 80023be:	2200      	movs	r2, #0
 80023c0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BME_CS_GPIO_Port, &GPIO_InitStruct);
 80023c2:	003a      	movs	r2, r7
 80023c4:	23a0      	movs	r3, #160	; 0xa0
 80023c6:	05db      	lsls	r3, r3, #23
 80023c8:	0011      	movs	r1, r2
 80023ca:	0018      	movs	r0, r3
 80023cc:	f000 fec6 	bl	800315c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RFM_CS_Pin;
 80023d0:	003b      	movs	r3, r7
 80023d2:	2210      	movs	r2, #16
 80023d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80023d6:	003b      	movs	r3, r7
 80023d8:	2201      	movs	r2, #1
 80023da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80023dc:	003b      	movs	r3, r7
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023e2:	003b      	movs	r3, r7
 80023e4:	2200      	movs	r2, #0
 80023e6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023e8:	003b      	movs	r3, r7
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(RFM_CS_GPIO_Port, &GPIO_InitStruct);
 80023ee:	003a      	movs	r2, r7
 80023f0:	23a0      	movs	r3, #160	; 0xa0
 80023f2:	05db      	lsls	r3, r3, #23
 80023f4:	0011      	movs	r1, r2
 80023f6:	0018      	movs	r0, r3
 80023f8:	f000 feb0 	bl	800315c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 80023fc:	003b      	movs	r3, r7
 80023fe:	2280      	movs	r2, #128	; 0x80
 8002400:	0052      	lsls	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002404:	003b      	movs	r3, r7
 8002406:	2201      	movs	r2, #1
 8002408:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800240a:	003b      	movs	r3, r7
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002410:	003b      	movs	r3, r7
 8002412:	2200      	movs	r2, #0
 8002414:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002416:	003b      	movs	r3, r7
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800241c:	003a      	movs	r2, r7
 800241e:	23a0      	movs	r3, #160	; 0xa0
 8002420:	05db      	lsls	r3, r3, #23
 8002422:	0011      	movs	r1, r2
 8002424:	0018      	movs	r0, r3
 8002426:	f000 fe99 	bl	800315c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RFM_D0_Pin;
 800242a:	003b      	movs	r3, r7
 800242c:	2220      	movs	r2, #32
 800242e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002430:	003b      	movs	r3, r7
 8002432:	2200      	movs	r2, #0
 8002434:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002436:	003b      	movs	r3, r7
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(RFM_D0_GPIO_Port, &GPIO_InitStruct);
 800243c:	003b      	movs	r3, r7
 800243e:	4a0c      	ldr	r2, [pc, #48]	; (8002470 <MX_GPIO_Init+0x114>)
 8002440:	0019      	movs	r1, r3
 8002442:	0010      	movs	r0, r2
 8002444:	f000 fe8a 	bl	800315c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RFM_D5_Pin;
 8002448:	003b      	movs	r3, r7
 800244a:	2240      	movs	r2, #64	; 0x40
 800244c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800244e:	003b      	movs	r3, r7
 8002450:	2200      	movs	r2, #0
 8002452:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002454:	003b      	movs	r3, r7
 8002456:	2200      	movs	r2, #0
 8002458:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(RFM_D5_GPIO_Port, &GPIO_InitStruct);
 800245a:	003b      	movs	r3, r7
 800245c:	4a04      	ldr	r2, [pc, #16]	; (8002470 <MX_GPIO_Init+0x114>)
 800245e:	0019      	movs	r1, r3
 8002460:	0010      	movs	r0, r2
 8002462:	f000 fe7b 	bl	800315c <LL_GPIO_Init>

}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	46bd      	mov	sp, r7
 800246a:	b006      	add	sp, #24
 800246c:	bd80      	pop	{r7, pc}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	50000400 	.word	0x50000400

08002474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002478:	46c0      	nop			; (mov r8, r8)
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <srand1>:
	miState ^= (miState << 17);
	return (miState * 1332534557) & 0x7fffffff;
}

void srand1(uint32_t seed)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	//
	if (seed == 0)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <srand1+0x12>
		seed = 0x55aaff01;
 800248e:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <srand1+0x20>)
 8002490:	607b      	str	r3, [r7, #4]

	miState = seed;
 8002492:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <srand1+0x24>)
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	601a      	str	r2, [r3, #0]
}
 8002498:	46c0      	nop			; (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b002      	add	sp, #8
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	55aaff01 	.word	0x55aaff01
 80024a4:	20000080 	.word	0x20000080

080024a8 <rfm95_freq>:
*/

typedef struct freq {uint8_t hi, mid, lo;}freq_t;

void rfm95_freq(rfm95_t *dev, uint8_t channel)
{
 80024a8:	b5b0      	push	{r4, r5, r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	000a      	movs	r2, r1
 80024b2:	1cfb      	adds	r3, r7, #3
 80024b4:	701a      	strb	r2, [r3, #0]
		    { 0xD8, 0xE0, 0x24 }, // Channel 5 867.500 MHz / 61.035 Hz = 14213156 = 0xD8E024
		    { 0xD8, 0xEC, 0xF1 }, // Channel 6 867.700 MHz / 61.035 Hz = 14216433 = 0xD8ECF1
		    { 0xD8, 0xF9, 0xBE }  // Channel 7 867.900 MHz / 61.035 Hz = 14219710 = 0xD8F9BE

	};
	if (channel < sizeof(channels)/sizeof(channels[0]))
 80024b6:	1cfb      	adds	r3, r7, #3
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b07      	cmp	r3, #7
 80024bc:	d814      	bhi.n	80024e8 <rfm95_freq+0x40>
	{
		freq_t data = channels[channel];
 80024be:	1cfb      	adds	r3, r7, #3
 80024c0:	781a      	ldrb	r2, [r3, #0]
 80024c2:	250c      	movs	r5, #12
 80024c4:	1978      	adds	r0, r7, r5
 80024c6:	490a      	ldr	r1, [pc, #40]	; (80024f0 <rfm95_freq+0x48>)
 80024c8:	0013      	movs	r3, r2
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	189b      	adds	r3, r3, r2
 80024ce:	18cb      	adds	r3, r1, r3
 80024d0:	2203      	movs	r2, #3
 80024d2:	0019      	movs	r1, r3
 80024d4:	f001 f9a4 	bl	8003820 <memcpy>
		(*dev->spi_write)(dev->nss_pin_id, 0x06 | 0x80, (uint8_t *)&data, sizeof(data));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685c      	ldr	r4, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	7898      	ldrb	r0, [r3, #2]
 80024e0:	197a      	adds	r2, r7, r5
 80024e2:	2303      	movs	r3, #3
 80024e4:	2186      	movs	r1, #134	; 0x86
 80024e6:	47a0      	blx	r4
	}
}
 80024e8:	46c0      	nop			; (mov r8, r8)
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b004      	add	sp, #16
 80024ee:	bdb0      	pop	{r4, r5, r7, pc}
 80024f0:	08003914 	.word	0x08003914

080024f4 <rfm95_init>:
 * Fx used to initialize RFM Module
 * ****************************************************
 */

uint8_t rfm95_init(rfm95_t *dev, uint32_t seed)
{
 80024f4:	b5b0      	push	{r4, r5, r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
	  /*
	   * Reminder:
	   * set pin_nss as output in STM32 ioc target configuration file and connect the pin to the RFM95 NSS pin
	   * set pin_dio0 as input in STM32 ioc target configuration file and connect the pin to the RFM95 DIO0 pin
	   */
	srand1(seed);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	0018      	movs	r0, r3
 8002502:	f7ff ffbd 	bl	8002480 <srand1>

	//switch RFM to sleep
	rfm95_write(dev, 0x01, 0x00);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	2101      	movs	r1, #1
 800250c:	0018      	movs	r0, r3
 800250e:	f000 f895 	bl	800263c <rfm95_write>

	//set RFM to LoRa mode
	rfm95_write(dev, 0x01, 0x80);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2280      	movs	r2, #128	; 0x80
 8002516:	2101      	movs	r1, #1
 8002518:	0018      	movs	r0, r3
 800251a:	f000 f88f 	bl	800263c <rfm95_write>

	//Set RFM to standby
	rfm95_write(dev, 0x01, 0x81);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2281      	movs	r2, #129	; 0x81
 8002522:	2101      	movs	r1, #1
 8002524:	0018      	movs	r0, r3
 8002526:	f000 f889 	bl	800263c <rfm95_write>

	//while()digitalRead(DIO5) ==LOW;
	uint8_t max_wait =200;
 800252a:	230f      	movs	r3, #15
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	22c8      	movs	r2, #200	; 0xc8
 8002530:	701a      	strb	r2, [r3, #0]
	while(max_wait && !(*dev->pin_read)(dev->dio5_pin_id))
 8002532:	e009      	b.n	8002548 <rfm95_init+0x54>
	{
		max_wait--;
 8002534:	210f      	movs	r1, #15
 8002536:	187b      	adds	r3, r7, r1
 8002538:	781a      	ldrb	r2, [r3, #0]
 800253a:	187b      	adds	r3, r7, r1
 800253c:	3a01      	subs	r2, #1
 800253e:	701a      	strb	r2, [r3, #0]
		(*dev->delay)(1);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	2001      	movs	r0, #1
 8002546:	4798      	blx	r3
	while(max_wait && !(*dev->pin_read)(dev->dio5_pin_id))
 8002548:	230f      	movs	r3, #15
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d007      	beq.n	8002562 <rfm95_init+0x6e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	7852      	ldrb	r2, [r2, #1]
 800255a:	0010      	movs	r0, r2
 800255c:	4798      	blx	r3
 800255e:	1e03      	subs	r3, r0, #0
 8002560:	d0e8      	beq.n	8002534 <rfm95_init+0x40>
	}

	if(!max_wait)
 8002562:	230f      	movs	r3, #15
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d103      	bne.n	8002574 <rfm95_init+0x80>
	{
		//puts("dio5!");
		putstr("dio0 ");
 800256c:	4b32      	ldr	r3, [pc, #200]	; (8002638 <rfm95_init+0x144>)
 800256e:	0018      	movs	r0, r3
 8002570:	f7ff fa56 	bl	8001a20 <putstr>

	// while( rfm95_read(dev, 0x42) != 0x12 ); // check if we can communicate

	//Set carrier frequency
	// 868.100 MHz / 61.035 Hz = 14222987 = 0xD9068B
	rfm95_freq(dev, 0);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2100      	movs	r1, #0
 8002578:	0018      	movs	r0, r3
 800257a:	f7ff ff95 	bl	80024a8 <rfm95_freq>

	//PA pin (max power)
	rfm95_write(dev, 0x09, 0xFF);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	22ff      	movs	r2, #255	; 0xff
 8002582:	2109      	movs	r1, #9
 8002584:	0018      	movs	r0, r3
 8002586:	f000 f859 	bl	800263c <rfm95_write>

	//BW = 125kHz coding rate 4/5, Explicit header mode
	rfm95_write(dev, 0x1D, 0x72);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2272      	movs	r2, #114	; 0x72
 800258e:	211d      	movs	r1, #29
 8002590:	0018      	movs	r0, r3
 8002592:	f000 f853 	bl	800263c <rfm95_write>

	//spread factor = 7, payloadCRC on
	rfm95_write(dev, 0x1E, 0xB4);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	22b4      	movs	r2, #180	; 0xb4
 800259a:	211e      	movs	r1, #30
 800259c:	0018      	movs	r0, r3
 800259e:	f000 f84d 	bl	800263c <rfm95_write>

	//RX Timeout set to 37symbols
	rfm95_write(dev, 0x1F, 0x25);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2225      	movs	r2, #37	; 0x25
 80025a6:	211f      	movs	r1, #31
 80025a8:	0018      	movs	r0, r3
 80025aa:	f000 f847 	bl	800263c <rfm95_write>

	//length set to 8symbols
	//0x0008 + 4 = 12(0x0C)
	rfm95_write(dev, 0x20, 0x00);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	2120      	movs	r1, #32
 80025b4:	0018      	movs	r0, r3
 80025b6:	f000 f841 	bl	800263c <rfm95_write>
	rfm95_write(dev, 0x21, 0x08);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2208      	movs	r2, #8
 80025be:	2121      	movs	r1, #33	; 0x21
 80025c0:	0018      	movs	r0, r3
 80025c2:	f000 f83b 	bl	800263c <rfm95_write>

	//low datarate optimisation OFF AGC auto ON
	rfm95_write(dev, 0x26, 0x0C);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	220c      	movs	r2, #12
 80025ca:	2126      	movs	r1, #38	; 0x26
 80025cc:	0018      	movs	r0, r3
 80025ce:	f000 f835 	bl	800263c <rfm95_write>

	//Set LoRa sync word
	rfm95_write(dev, 0x39, 0x34);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2234      	movs	r2, #52	; 0x34
 80025d6:	2139      	movs	r1, #57	; 0x39
 80025d8:	0018      	movs	r0, r3
 80025da:	f000 f82f 	bl	800263c <rfm95_write>

	//set IQ to normal values
	rfm95_write(dev, 0x33, 0x27);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2227      	movs	r2, #39	; 0x27
 80025e2:	2133      	movs	r1, #51	; 0x33
 80025e4:	0018      	movs	r0, r3
 80025e6:	f000 f829 	bl	800263c <rfm95_write>
	rfm95_write(dev, 0x3B, 0x1D);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	221d      	movs	r2, #29
 80025ee:	213b      	movs	r1, #59	; 0x3b
 80025f0:	0018      	movs	r0, r3
 80025f2:	f000 f823 	bl	800263c <rfm95_write>

	//set FIFO Pointers
	//TX base address
	rfm95_write(dev, 0x0E, 0x80);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2280      	movs	r2, #128	; 0x80
 80025fa:	210e      	movs	r1, #14
 80025fc:	0018      	movs	r0, r3
 80025fe:	f000 f81d 	bl	800263c <rfm95_write>
	//RX base address
	rfm95_write(dev, 0x0F, 0x00);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	210f      	movs	r1, #15
 8002608:	0018      	movs	r0, r3
 800260a:	f000 f817 	bl	800263c <rfm95_write>

	uint8_t ver = rfm95_read(dev, 0x42);
 800260e:	250e      	movs	r5, #14
 8002610:	197c      	adds	r4, r7, r5
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2142      	movs	r1, #66	; 0x42
 8002616:	0018      	movs	r0, r3
 8002618:	f000 f82f 	bl	800267a <rfm95_read>
 800261c:	0003      	movs	r3, r0
 800261e:	7023      	strb	r3, [r4, #0]

	//Switch RFM to switch
	rfm95_write(dev, 0x01, 0x00);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	2101      	movs	r1, #1
 8002626:	0018      	movs	r0, r3
 8002628:	f000 f808 	bl	800263c <rfm95_write>

	return ver;
 800262c:	197b      	adds	r3, r7, r5
 800262e:	781b      	ldrb	r3, [r3, #0]
}
 8002630:	0018      	movs	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	b004      	add	sp, #16
 8002636:	bdb0      	pop	{r4, r5, r7, pc}
 8002638:	0800390c 	.word	0x0800390c

0800263c <rfm95_write>:
 * 			rfm_data data to be written
 * *******************************************************
 */

uint8_t rfm95_write(rfm95_t *dev, uint8_t addr, uint8_t data)
{
 800263c:	b590      	push	{r4, r7, lr}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	0008      	movs	r0, r1
 8002646:	0011      	movs	r1, r2
 8002648:	1cfb      	adds	r3, r7, #3
 800264a:	1c02      	adds	r2, r0, #0
 800264c:	701a      	strb	r2, [r3, #0]
 800264e:	1cbb      	adds	r3, r7, #2
 8002650:	1c0a      	adds	r2, r1, #0
 8002652:	701a      	strb	r2, [r3, #0]
	(*dev->spi_write)(dev->nss_pin_id, addr | 0x80, &data, sizeof(data));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685c      	ldr	r4, [r3, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	7898      	ldrb	r0, [r3, #2]
 800265c:	1cfb      	adds	r3, r7, #3
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2280      	movs	r2, #128	; 0x80
 8002662:	4252      	negs	r2, r2
 8002664:	4313      	orrs	r3, r2
 8002666:	b2d9      	uxtb	r1, r3
 8002668:	1cba      	adds	r2, r7, #2
 800266a:	2301      	movs	r3, #1
 800266c:	47a0      	blx	r4
	return data;
 800266e:	1cbb      	adds	r3, r7, #2
 8002670:	781b      	ldrb	r3, [r3, #0]
}
 8002672:	0018      	movs	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	b003      	add	sp, #12
 8002678:	bd90      	pop	{r4, r7, pc}

0800267a <rfm95_read>:
 * Args::rfm_addres address of register to be read
 * Ret:: value of the register
 */

uint8_t rfm95_read(rfm95_t *dev, uint8_t addr)
{
 800267a:	b5b0      	push	{r4, r5, r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	000a      	movs	r2, r1
 8002684:	1cfb      	adds	r3, r7, #3
 8002686:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	(*dev->spi_read)(dev->nss_pin_id, addr & ~0x80, &data, sizeof(data));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689c      	ldr	r4, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	7898      	ldrb	r0, [r3, #2]
 8002690:	1cfb      	adds	r3, r7, #3
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	227f      	movs	r2, #127	; 0x7f
 8002696:	4013      	ands	r3, r2
 8002698:	b2d9      	uxtb	r1, r3
 800269a:	250f      	movs	r5, #15
 800269c:	197a      	adds	r2, r7, r5
 800269e:	2301      	movs	r3, #1
 80026a0:	47a0      	blx	r4
	return data;
 80026a2:	197b      	adds	r3, r7, r5
 80026a4:	781b      	ldrb	r3, [r3, #0]
}
 80026a6:	0018      	movs	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b004      	add	sp, #16
 80026ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080026b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b4:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <HAL_MspInit+0x24>)
 80026b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_MspInit+0x24>)
 80026ba:	2101      	movs	r1, #1
 80026bc:	430a      	orrs	r2, r1
 80026be:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <HAL_MspInit+0x24>)
 80026c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026c4:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <HAL_MspInit+0x24>)
 80026c6:	2180      	movs	r1, #128	; 0x80
 80026c8:	0549      	lsls	r1, r1, #21
 80026ca:	430a      	orrs	r2, r1
 80026cc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40021000 	.word	0x40021000

080026d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <HAL_RTC_MspInit+0x38>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d10e      	bne.n	8002708 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026ea:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <HAL_RTC_MspInit+0x3c>)
 80026ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_RTC_MspInit+0x3c>)
 80026f0:	2180      	movs	r1, #128	; 0x80
 80026f2:	02c9      	lsls	r1, r1, #11
 80026f4:	430a      	orrs	r2, r1
 80026f6:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80026f8:	2200      	movs	r2, #0
 80026fa:	2100      	movs	r1, #0
 80026fc:	2002      	movs	r0, #2
 80026fe:	f000 f9c9 	bl	8002a94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002702:	2002      	movs	r0, #2
 8002704:	f000 f9db 	bl	8002abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002708:	46c0      	nop			; (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	b002      	add	sp, #8
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40002800 	.word	0x40002800
 8002714:	40021000 	.word	0x40021000

08002718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800271c:	46c0      	nop			; (mov r8, r8)
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002726:	e7fe      	b.n	8002726 <HardFault_Handler+0x4>

08002728 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800272c:	46c0      	nop			; (mov r8, r8)
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002740:	f000 f8e4 	bl	800290c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002744:	46c0      	nop			; (mov r8, r8)
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002750:	4b03      	ldr	r3, [pc, #12]	; (8002760 <RTC_IRQHandler+0x14>)
 8002752:	0018      	movs	r0, r3
 8002754:	f000 fb86 	bl	8002e64 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	200000cc 	.word	0x200000cc

08002764 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002768:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <SystemInit+0x64>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <SystemInit+0x64>)
 800276e:	2180      	movs	r1, #128	; 0x80
 8002770:	0049      	lsls	r1, r1, #1
 8002772:	430a      	orrs	r2, r1
 8002774:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002776:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <SystemInit+0x64>)
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <SystemInit+0x64>)
 800277c:	4913      	ldr	r1, [pc, #76]	; (80027cc <SystemInit+0x68>)
 800277e:	400a      	ands	r2, r1
 8002780:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002782:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <SystemInit+0x64>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <SystemInit+0x64>)
 8002788:	4911      	ldr	r1, [pc, #68]	; (80027d0 <SystemInit+0x6c>)
 800278a:	400a      	ands	r2, r1
 800278c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800278e:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <SystemInit+0x64>)
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <SystemInit+0x64>)
 8002794:	2101      	movs	r1, #1
 8002796:	438a      	bics	r2, r1
 8002798:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800279a:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <SystemInit+0x64>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <SystemInit+0x64>)
 80027a0:	490c      	ldr	r1, [pc, #48]	; (80027d4 <SystemInit+0x70>)
 80027a2:	400a      	ands	r2, r1
 80027a4:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80027a6:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <SystemInit+0x64>)
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <SystemInit+0x64>)
 80027ac:	490a      	ldr	r1, [pc, #40]	; (80027d8 <SystemInit+0x74>)
 80027ae:	400a      	ands	r2, r1
 80027b0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80027b2:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <SystemInit+0x64>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <SystemInit+0x78>)
 80027ba:	2280      	movs	r2, #128	; 0x80
 80027bc:	0512      	lsls	r2, r2, #20
 80027be:	609a      	str	r2, [r3, #8]
#endif
}
 80027c0:	46c0      	nop			; (mov r8, r8)
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	40021000 	.word	0x40021000
 80027cc:	88ff400c 	.word	0x88ff400c
 80027d0:	fef6fff6 	.word	0xfef6fff6
 80027d4:	fffbffff 	.word	0xfffbffff
 80027d8:	ff02ffff 	.word	0xff02ffff
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80027e0:	4813      	ldr	r0, [pc, #76]	; (8002830 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80027e2:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80027e4:	4813      	ldr	r0, [pc, #76]	; (8002834 <LoopForever+0x6>)
    LDR R1, [R0]
 80027e6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80027e8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80027ea:	4a13      	ldr	r2, [pc, #76]	; (8002838 <LoopForever+0xa>)
    CMP R1, R2
 80027ec:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80027ee:	d105      	bne.n	80027fc <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80027f0:	4812      	ldr	r0, [pc, #72]	; (800283c <LoopForever+0xe>)
    LDR R1,=0x00000001
 80027f2:	4913      	ldr	r1, [pc, #76]	; (8002840 <LoopForever+0x12>)
    STR R1, [R0]
 80027f4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80027f6:	4813      	ldr	r0, [pc, #76]	; (8002844 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80027f8:	4913      	ldr	r1, [pc, #76]	; (8002848 <LoopForever+0x1a>)
    STR R1, [R0]
 80027fa:	6001      	str	r1, [r0, #0]

080027fc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80027fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027fe:	e003      	b.n	8002808 <LoopCopyDataInit>

08002800 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002800:	4b12      	ldr	r3, [pc, #72]	; (800284c <LoopForever+0x1e>)
  ldr  r3, [r3, r1]
 8002802:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002804:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002806:	3104      	adds	r1, #4

08002808 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002808:	4811      	ldr	r0, [pc, #68]	; (8002850 <LoopForever+0x22>)
  ldr  r3, =_edata
 800280a:	4b12      	ldr	r3, [pc, #72]	; (8002854 <LoopForever+0x26>)
  adds  r2, r0, r1
 800280c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800280e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002810:	d3f6      	bcc.n	8002800 <CopyDataInit>
  ldr  r2, =_sbss
 8002812:	4a11      	ldr	r2, [pc, #68]	; (8002858 <LoopForever+0x2a>)
  b  LoopFillZerobss
 8002814:	e002      	b.n	800281c <LoopFillZerobss>

08002816 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002816:	2300      	movs	r3, #0
  str  r3, [r2]
 8002818:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800281a:	3204      	adds	r2, #4

0800281c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <LoopForever+0x2e>)
  cmp  r2, r3
 800281e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002820:	d3f9      	bcc.n	8002816 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002822:	f7ff ff9f 	bl	8002764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002826:	f000 ffd7 	bl	80037d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800282a:	f7ff faf3 	bl	8001e14 <main>

0800282e <LoopForever>:

LoopForever:
    b LoopForever
 800282e:	e7fe      	b.n	800282e <LoopForever>
   ldr   r0, =_estack
 8002830:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8002834:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002838:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 800283c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8002840:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002844:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002848:	00000000 	.word	0x00000000
  ldr  r3, =_sidata
 800284c:	08003960 	.word	0x08003960
  ldr  r0, =_sdata
 8002850:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002854:	20000040 	.word	0x20000040
  ldr  r2, =_sbss
 8002858:	20000040 	.word	0x20000040
  ldr  r3, = _ebss
 800285c:	20000134 	.word	0x20000134

08002860 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002860:	e7fe      	b.n	8002860 <ADC1_COMP_IRQHandler>
	...

08002864 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800286a:	1dfb      	adds	r3, r7, #7
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_Init+0x3c>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <HAL_Init+0x3c>)
 8002876:	2140      	movs	r1, #64	; 0x40
 8002878:	430a      	orrs	r2, r1
 800287a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800287c:	2000      	movs	r0, #0
 800287e:	f000 f811 	bl	80028a4 <HAL_InitTick>
 8002882:	1e03      	subs	r3, r0, #0
 8002884:	d003      	beq.n	800288e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002886:	1dfb      	adds	r3, r7, #7
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
 800288c:	e001      	b.n	8002892 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800288e:	f7ff ff0f 	bl	80026b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002892:	1dfb      	adds	r3, r7, #7
 8002894:	781b      	ldrb	r3, [r3, #0]
}
 8002896:	0018      	movs	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	b002      	add	sp, #8
 800289c:	bd80      	pop	{r7, pc}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	40022000 	.word	0x40022000

080028a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028ac:	4b14      	ldr	r3, [pc, #80]	; (8002900 <HAL_InitTick+0x5c>)
 80028ae:	681c      	ldr	r4, [r3, #0]
 80028b0:	4b14      	ldr	r3, [pc, #80]	; (8002904 <HAL_InitTick+0x60>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	0019      	movs	r1, r3
 80028b6:	23fa      	movs	r3, #250	; 0xfa
 80028b8:	0098      	lsls	r0, r3, #2
 80028ba:	f7fd fc25 	bl	8000108 <__udivsi3>
 80028be:	0003      	movs	r3, r0
 80028c0:	0019      	movs	r1, r3
 80028c2:	0020      	movs	r0, r4
 80028c4:	f7fd fc20 	bl	8000108 <__udivsi3>
 80028c8:	0003      	movs	r3, r0
 80028ca:	0018      	movs	r0, r3
 80028cc:	f000 f907 	bl	8002ade <HAL_SYSTICK_Config>
 80028d0:	1e03      	subs	r3, r0, #0
 80028d2:	d001      	beq.n	80028d8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e00f      	b.n	80028f8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d80b      	bhi.n	80028f6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	2301      	movs	r3, #1
 80028e2:	425b      	negs	r3, r3
 80028e4:	2200      	movs	r2, #0
 80028e6:	0018      	movs	r0, r3
 80028e8:	f000 f8d4 	bl	8002a94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <HAL_InitTick+0x64>)
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	e000      	b.n	80028f8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
}
 80028f8:	0018      	movs	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b003      	add	sp, #12
 80028fe:	bd90      	pop	{r4, r7, pc}
 8002900:	20000034 	.word	0x20000034
 8002904:	2000003c 	.word	0x2000003c
 8002908:	20000038 	.word	0x20000038

0800290c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_IncTick+0x1c>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	001a      	movs	r2, r3
 8002916:	4b05      	ldr	r3, [pc, #20]	; (800292c <HAL_IncTick+0x20>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	18d2      	adds	r2, r2, r3
 800291c:	4b03      	ldr	r3, [pc, #12]	; (800292c <HAL_IncTick+0x20>)
 800291e:	601a      	str	r2, [r3, #0]
}
 8002920:	46c0      	nop			; (mov r8, r8)
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	2000003c 	.word	0x2000003c
 800292c:	20000130 	.word	0x20000130

08002930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  return uwTick;
 8002934:	4b02      	ldr	r3, [pc, #8]	; (8002940 <HAL_GetTick+0x10>)
 8002936:	681b      	ldr	r3, [r3, #0]
}
 8002938:	0018      	movs	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	20000130 	.word	0x20000130

08002944 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	0002      	movs	r2, r0
 800294c:	1dfb      	adds	r3, r7, #7
 800294e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002950:	1dfb      	adds	r3, r7, #7
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	001a      	movs	r2, r3
 8002956:	231f      	movs	r3, #31
 8002958:	401a      	ands	r2, r3
 800295a:	4b04      	ldr	r3, [pc, #16]	; (800296c <NVIC_EnableIRQ+0x28>)
 800295c:	2101      	movs	r1, #1
 800295e:	4091      	lsls	r1, r2
 8002960:	000a      	movs	r2, r1
 8002962:	601a      	str	r2, [r3, #0]
}
 8002964:	46c0      	nop			; (mov r8, r8)
 8002966:	46bd      	mov	sp, r7
 8002968:	b002      	add	sp, #8
 800296a:	bd80      	pop	{r7, pc}
 800296c:	e000e100 	.word	0xe000e100

08002970 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002970:	b590      	push	{r4, r7, lr}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	0002      	movs	r2, r0
 8002978:	6039      	str	r1, [r7, #0]
 800297a:	1dfb      	adds	r3, r7, #7
 800297c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800297e:	1dfb      	adds	r3, r7, #7
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b7f      	cmp	r3, #127	; 0x7f
 8002984:	d932      	bls.n	80029ec <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002986:	4a2f      	ldr	r2, [pc, #188]	; (8002a44 <NVIC_SetPriority+0xd4>)
 8002988:	1dfb      	adds	r3, r7, #7
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	0019      	movs	r1, r3
 800298e:	230f      	movs	r3, #15
 8002990:	400b      	ands	r3, r1
 8002992:	3b08      	subs	r3, #8
 8002994:	089b      	lsrs	r3, r3, #2
 8002996:	3306      	adds	r3, #6
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	18d3      	adds	r3, r2, r3
 800299c:	3304      	adds	r3, #4
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	1dfa      	adds	r2, r7, #7
 80029a2:	7812      	ldrb	r2, [r2, #0]
 80029a4:	0011      	movs	r1, r2
 80029a6:	2203      	movs	r2, #3
 80029a8:	400a      	ands	r2, r1
 80029aa:	00d2      	lsls	r2, r2, #3
 80029ac:	21ff      	movs	r1, #255	; 0xff
 80029ae:	4091      	lsls	r1, r2
 80029b0:	000a      	movs	r2, r1
 80029b2:	43d2      	mvns	r2, r2
 80029b4:	401a      	ands	r2, r3
 80029b6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	019b      	lsls	r3, r3, #6
 80029bc:	22ff      	movs	r2, #255	; 0xff
 80029be:	401a      	ands	r2, r3
 80029c0:	1dfb      	adds	r3, r7, #7
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	0018      	movs	r0, r3
 80029c6:	2303      	movs	r3, #3
 80029c8:	4003      	ands	r3, r0
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029ce:	481d      	ldr	r0, [pc, #116]	; (8002a44 <NVIC_SetPriority+0xd4>)
 80029d0:	1dfb      	adds	r3, r7, #7
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	001c      	movs	r4, r3
 80029d6:	230f      	movs	r3, #15
 80029d8:	4023      	ands	r3, r4
 80029da:	3b08      	subs	r3, #8
 80029dc:	089b      	lsrs	r3, r3, #2
 80029de:	430a      	orrs	r2, r1
 80029e0:	3306      	adds	r3, #6
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	18c3      	adds	r3, r0, r3
 80029e6:	3304      	adds	r3, #4
 80029e8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80029ea:	e027      	b.n	8002a3c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029ec:	4a16      	ldr	r2, [pc, #88]	; (8002a48 <NVIC_SetPriority+0xd8>)
 80029ee:	1dfb      	adds	r3, r7, #7
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	b25b      	sxtb	r3, r3
 80029f4:	089b      	lsrs	r3, r3, #2
 80029f6:	33c0      	adds	r3, #192	; 0xc0
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	589b      	ldr	r3, [r3, r2]
 80029fc:	1dfa      	adds	r2, r7, #7
 80029fe:	7812      	ldrb	r2, [r2, #0]
 8002a00:	0011      	movs	r1, r2
 8002a02:	2203      	movs	r2, #3
 8002a04:	400a      	ands	r2, r1
 8002a06:	00d2      	lsls	r2, r2, #3
 8002a08:	21ff      	movs	r1, #255	; 0xff
 8002a0a:	4091      	lsls	r1, r2
 8002a0c:	000a      	movs	r2, r1
 8002a0e:	43d2      	mvns	r2, r2
 8002a10:	401a      	ands	r2, r3
 8002a12:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	019b      	lsls	r3, r3, #6
 8002a18:	22ff      	movs	r2, #255	; 0xff
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	1dfb      	adds	r3, r7, #7
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	0018      	movs	r0, r3
 8002a22:	2303      	movs	r3, #3
 8002a24:	4003      	ands	r3, r0
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a2a:	4807      	ldr	r0, [pc, #28]	; (8002a48 <NVIC_SetPriority+0xd8>)
 8002a2c:	1dfb      	adds	r3, r7, #7
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	b25b      	sxtb	r3, r3
 8002a32:	089b      	lsrs	r3, r3, #2
 8002a34:	430a      	orrs	r2, r1
 8002a36:	33c0      	adds	r3, #192	; 0xc0
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	501a      	str	r2, [r3, r0]
}
 8002a3c:	46c0      	nop			; (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b003      	add	sp, #12
 8002a42:	bd90      	pop	{r4, r7, pc}
 8002a44:	e000ed00 	.word	0xe000ed00
 8002a48:	e000e100 	.word	0xe000e100

08002a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	4a0c      	ldr	r2, [pc, #48]	; (8002a8c <SysTick_Config+0x40>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d901      	bls.n	8002a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e010      	b.n	8002a84 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a62:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <SysTick_Config+0x44>)
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	3a01      	subs	r2, #1
 8002a68:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	425b      	negs	r3, r3
 8002a6e:	2103      	movs	r1, #3
 8002a70:	0018      	movs	r0, r3
 8002a72:	f7ff ff7d 	bl	8002970 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <SysTick_Config+0x44>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <SysTick_Config+0x44>)
 8002a7e:	2207      	movs	r2, #7
 8002a80:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	0018      	movs	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b002      	add	sp, #8
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	00ffffff 	.word	0x00ffffff
 8002a90:	e000e010 	.word	0xe000e010

08002a94 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	210f      	movs	r1, #15
 8002aa0:	187b      	adds	r3, r7, r1
 8002aa2:	1c02      	adds	r2, r0, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	187b      	adds	r3, r7, r1
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	b25b      	sxtb	r3, r3
 8002aae:	0011      	movs	r1, r2
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f7ff ff5d 	bl	8002970 <NVIC_SetPriority>
}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b004      	add	sp, #16
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	0002      	movs	r2, r0
 8002ac6:	1dfb      	adds	r3, r7, #7
 8002ac8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aca:	1dfb      	adds	r3, r7, #7
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	b25b      	sxtb	r3, r3
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f7ff ff37 	bl	8002944 <NVIC_EnableIRQ>
}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	b002      	add	sp, #8
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f7ff ffaf 	bl	8002a4c <SysTick_Config>
 8002aee:	0003      	movs	r3, r0
}
 8002af0:	0018      	movs	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b002      	add	sp, #8
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e08e      	b.n	8002c28 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2221      	movs	r2, #33	; 0x21
 8002b0e:	5c9b      	ldrb	r3, [r3, r2]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d107      	bne.n	8002b26 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	0018      	movs	r0, r3
 8002b22:	f7ff fdd9 	bl	80026d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2221      	movs	r2, #33	; 0x21
 8002b2a:	2102      	movs	r1, #2
 8002b2c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	22ca      	movs	r2, #202	; 0xca
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2253      	movs	r2, #83	; 0x53
 8002b3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	0018      	movs	r0, r3
 8002b42:	f000 f89e 	bl	8002c82 <RTC_EnterInitMode>
 8002b46:	1e03      	subs	r3, r0, #0
 8002b48:	d009      	beq.n	8002b5e <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	22ff      	movs	r2, #255	; 0xff
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2221      	movs	r2, #33	; 0x21
 8002b56:	2104      	movs	r1, #4
 8002b58:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e064      	b.n	8002c28 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4931      	ldr	r1, [pc, #196]	; (8002c30 <HAL_RTC_Init+0x138>)
 8002b6a:	400a      	ands	r2, r1
 8002b6c:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6899      	ldr	r1, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	68d2      	ldr	r2, [r2, #12]
 8002b94:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6919      	ldr	r1, [r3, #16]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	041a      	lsls	r2, r3, #16
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2180      	movs	r1, #128	; 0x80
 8002bb6:	438a      	bics	r2, r1
 8002bb8:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2103      	movs	r1, #3
 8002bc6:	438a      	bics	r2, r1
 8002bc8:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69da      	ldr	r2, [r3, #28]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2220      	movs	r2, #32
 8002bea:	4013      	ands	r3, r2
 8002bec:	d113      	bne.n	8002c16 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f000 f81f 	bl	8002c34 <HAL_RTC_WaitForSynchro>
 8002bf6:	1e03      	subs	r3, r0, #0
 8002bf8:	d00d      	beq.n	8002c16 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	22ff      	movs	r2, #255	; 0xff
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2221      	movs	r2, #33	; 0x21
 8002c06:	2104      	movs	r1, #4
 8002c08:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	2100      	movs	r1, #0
 8002c10:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e008      	b.n	8002c28 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	22ff      	movs	r2, #255	; 0xff
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2221      	movs	r2, #33	; 0x21
 8002c22:	2101      	movs	r1, #1
 8002c24:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c26:	2300      	movs	r3, #0
  }
}
 8002c28:	0018      	movs	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b002      	add	sp, #8
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	ff8fffbf 	.word	0xff8fffbf

08002c34 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	21a0      	movs	r1, #160	; 0xa0
 8002c48:	438a      	bics	r2, r1
 8002c4a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002c4c:	f7ff fe70 	bl	8002930 <HAL_GetTick>
 8002c50:	0003      	movs	r3, r0
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c54:	e00a      	b.n	8002c6c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c56:	f7ff fe6b 	bl	8002930 <HAL_GetTick>
 8002c5a:	0002      	movs	r2, r0
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	1ad2      	subs	r2, r2, r3
 8002c60:	23fa      	movs	r3, #250	; 0xfa
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d901      	bls.n	8002c6c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e006      	b.n	8002c7a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	2220      	movs	r2, #32
 8002c74:	4013      	ands	r3, r2
 8002c76:	d0ee      	beq.n	8002c56 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b004      	add	sp, #16
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	2240      	movs	r2, #64	; 0x40
 8002c92:	4013      	ands	r3, r2
 8002c94:	d11a      	bne.n	8002ccc <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	4252      	negs	r2, r2
 8002c9e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002ca0:	f7ff fe46 	bl	8002930 <HAL_GetTick>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002ca8:	e00a      	b.n	8002cc0 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002caa:	f7ff fe41 	bl	8002930 <HAL_GetTick>
 8002cae:	0002      	movs	r2, r0
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1ad2      	subs	r2, r2, r3
 8002cb4:	23fa      	movs	r3, #250	; 0xfa
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d901      	bls.n	8002cc0 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e006      	b.n	8002cce <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	2240      	movs	r2, #64	; 0x40
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d0ee      	beq.n	8002caa <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	0018      	movs	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b004      	add	sp, #16
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	5c9b      	ldrb	r3, [r3, r2]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e0ad      	b.n	8002e4e <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2221      	movs	r2, #33	; 0x21
 8002cfe:	2102      	movs	r1, #2
 8002d00:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	22ca      	movs	r2, #202	; 0xca
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2253      	movs	r2, #83	; 0x53
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d021      	beq.n	8002d64 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 8002d20:	f7ff fe06 	bl	8002930 <HAL_GetTick>
 8002d24:	0003      	movs	r3, r0
 8002d26:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8002d28:	e016      	b.n	8002d58 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d2a:	f7ff fe01 	bl	8002930 <HAL_GetTick>
 8002d2e:	0002      	movs	r2, r0
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	1ad2      	subs	r2, r2, r3
 8002d34:	23fa      	movs	r3, #250	; 0xfa
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d90d      	bls.n	8002d58 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	22ff      	movs	r2, #255	; 0xff
 8002d42:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2221      	movs	r2, #33	; 0x21
 8002d48:	2103      	movs	r1, #3
 8002d4a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	2100      	movs	r1, #0
 8002d52:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e07a      	b.n	8002e4e <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	2204      	movs	r2, #4
 8002d60:	4013      	ands	r3, r2
 8002d62:	d1e2      	bne.n	8002d2a <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	493a      	ldr	r1, [pc, #232]	; (8002e58 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8002d70:	400a      	ands	r2, r1
 8002d72:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	22ff      	movs	r2, #255	; 0xff
 8002d7c:	401a      	ands	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4936      	ldr	r1, [pc, #216]	; (8002e5c <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 8002d84:	430a      	orrs	r2, r1
 8002d86:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002d88:	f7ff fdd2 	bl	8002930 <HAL_GetTick>
 8002d8c:	0003      	movs	r3, r0
 8002d8e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002d90:	e016      	b.n	8002dc0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d92:	f7ff fdcd 	bl	8002930 <HAL_GetTick>
 8002d96:	0002      	movs	r2, r0
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	1ad2      	subs	r2, r2, r3
 8002d9c:	23fa      	movs	r3, #250	; 0xfa
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d90d      	bls.n	8002dc0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	22ff      	movs	r2, #255	; 0xff
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2221      	movs	r2, #33	; 0x21
 8002db0:	2103      	movs	r1, #3
 8002db2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2220      	movs	r2, #32
 8002db8:	2100      	movs	r1, #0
 8002dba:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e046      	b.n	8002e4e <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d0e2      	beq.n	8002d92 <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2107      	movs	r1, #7
 8002de0:	438a      	bics	r2, r1
 8002de2:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6899      	ldr	r1, [r3, #8]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002df4:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002dfa:	2180      	movs	r1, #128	; 0x80
 8002dfc:	0349      	lsls	r1, r1, #13
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002e02:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002e08:	2180      	movs	r1, #128	; 0x80
 8002e0a:	0349      	lsls	r1, r1, #13
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2180      	movs	r1, #128	; 0x80
 8002e1c:	01c9      	lsls	r1, r1, #7
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2180      	movs	r1, #128	; 0x80
 8002e2e:	00c9      	lsls	r1, r1, #3
 8002e30:	430a      	orrs	r2, r1
 8002e32:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	22ff      	movs	r2, #255	; 0xff
 8002e3a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2221      	movs	r2, #33	; 0x21
 8002e40:	2101      	movs	r1, #1
 8002e42:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2220      	movs	r2, #32
 8002e48:	2100      	movs	r1, #0
 8002e4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	0018      	movs	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	b006      	add	sp, #24
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	fffffbff 	.word	0xfffffbff
 8002e5c:	fffffb7f 	.word	0xfffffb7f
 8002e60:	40010400 	.word	0x40010400

08002e64 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	2380      	movs	r3, #128	; 0x80
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4013      	ands	r3, r2
 8002e78:	d00d      	beq.n	8002e96 <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f000 f81b 	bl	8002eb8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	22ff      	movs	r2, #255	; 0xff
 8002e8a:	401a      	ands	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4907      	ldr	r1, [pc, #28]	; (8002eb0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 8002e92:	430a      	orrs	r2, r1
 8002e94:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002e96:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 8002e98:	2280      	movs	r2, #128	; 0x80
 8002e9a:	0352      	lsls	r2, r2, #13
 8002e9c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2221      	movs	r2, #33	; 0x21
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	5499      	strb	r1, [r3, r2]
}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b002      	add	sp, #8
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	fffffb7f 	.word	0xfffffb7f
 8002eb4:	40010400 	.word	0x40010400

08002eb8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b002      	add	sp, #8
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	3350      	adds	r3, #80	; 0x50
 8002ed8:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	18d3      	adds	r3, r2, r3
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b004      	add	sp, #16
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <LL_ADC_IsEnabled>:
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2201      	movs	r2, #1
 8002efe:	4013      	ands	r3, r2
 8002f00:	3b01      	subs	r3, #1
 8002f02:	425a      	negs	r2, r3
 8002f04:	4153      	adcs	r3, r2
 8002f06:	b2db      	uxtb	r3, r3
}
 8002f08:	0018      	movs	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	b002      	add	sp, #8
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002f1a:	230f      	movs	r3, #15
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f7ff ffe3 	bl	8002ef0 <LL_ADC_IsEnabled>
 8002f2a:	1e03      	subs	r3, r0, #0
 8002f2c:	d118      	bne.n	8002f60 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	4a11      	ldr	r2, [pc, #68]	; (8002f78 <LL_ADC_Init+0x68>)
 8002f34:	401a      	ands	r2, r3
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6859      	ldr	r1, [r3, #4]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	4319      	orrs	r1, r3
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	430b      	orrs	r3, r1
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	60da      	str	r2, [r3, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	089a      	lsrs	r2, r3, #2
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	611a      	str	r2, [r3, #16]
 8002f5e:	e003      	b.n	8002f68 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002f60:	230f      	movs	r3, #15
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	2201      	movs	r2, #1
 8002f66:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002f68:	230f      	movs	r3, #15
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	781b      	ldrb	r3, [r3, #0]
}
 8002f6e:	0018      	movs	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b004      	add	sp, #16
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	ffff3fc7 	.word	0xffff3fc7

08002f7c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002f86:	230f      	movs	r3, #15
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f7ff ffad 	bl	8002ef0 <LL_ADC_IsEnabled>
 8002f96:	1e03      	subs	r3, r0, #0
 8002f98:	d115      	bne.n	8002fc6 <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	4a0f      	ldr	r2, [pc, #60]	; (8002fdc <LL_ADC_REG_Init+0x60>)
 8002fa0:	401a      	ands	r2, r3
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6819      	ldr	r1, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4319      	orrs	r1, r3
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4319      	orrs	r1, r3
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	4319      	orrs	r1, r3
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	60da      	str	r2, [r3, #12]
 8002fc4:	e003      	b.n	8002fce <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002fc6:	230f      	movs	r3, #15
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	2201      	movs	r2, #1
 8002fcc:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002fce:	230f      	movs	r3, #15
 8002fd0:	18fb      	adds	r3, r7, r3
 8002fd2:	781b      	ldrb	r3, [r3, #0]
}
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b004      	add	sp, #16
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	fffec23c 	.word	0xfffec23c

08002fe0 <LL_GPIO_SetPinMode>:
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6819      	ldr	r1, [r3, #0]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	435a      	muls	r2, r3
 8002ff6:	0013      	movs	r3, r2
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	189b      	adds	r3, r3, r2
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	400b      	ands	r3, r1
 8003000:	001a      	movs	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	434b      	muls	r3, r1
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	434b      	muls	r3, r1
 800300c:	431a      	orrs	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	601a      	str	r2, [r3, #0]
}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	46bd      	mov	sp, r7
 8003016:	b004      	add	sp, #16
 8003018:	bd80      	pop	{r7, pc}

0800301a <LL_GPIO_SetPinOutputType>:
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	43d2      	mvns	r2, r2
 800302e:	401a      	ands	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	434b      	muls	r3, r1
 8003036:	431a      	orrs	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	605a      	str	r2, [r3, #4]
}
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	b004      	add	sp, #16
 8003042:	bd80      	pop	{r7, pc}

08003044 <LL_GPIO_SetPinSpeed>:
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6899      	ldr	r1, [r3, #8]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	435a      	muls	r2, r3
 800305a:	0013      	movs	r3, r2
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	189b      	adds	r3, r3, r2
 8003060:	43db      	mvns	r3, r3
 8003062:	400b      	ands	r3, r1
 8003064:	001a      	movs	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	68b9      	ldr	r1, [r7, #8]
 800306a:	434b      	muls	r3, r1
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	434b      	muls	r3, r1
 8003070:	431a      	orrs	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	609a      	str	r2, [r3, #8]
}
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	46bd      	mov	sp, r7
 800307a:	b004      	add	sp, #16
 800307c:	bd80      	pop	{r7, pc}

0800307e <LL_GPIO_SetPinPull>:
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b084      	sub	sp, #16
 8003082:	af00      	add	r7, sp, #0
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	68d9      	ldr	r1, [r3, #12]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	435a      	muls	r2, r3
 8003094:	0013      	movs	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	189b      	adds	r3, r3, r2
 800309a:	43db      	mvns	r3, r3
 800309c:	400b      	ands	r3, r1
 800309e:	001a      	movs	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	434b      	muls	r3, r1
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	434b      	muls	r3, r1
 80030aa:	431a      	orrs	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	60da      	str	r2, [r3, #12]
}
 80030b0:	46c0      	nop			; (mov r8, r8)
 80030b2:	46bd      	mov	sp, r7
 80030b4:	b004      	add	sp, #16
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <LL_GPIO_SetAFPin_0_7>:
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a19      	ldr	r1, [r3, #32]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	4353      	muls	r3, r2
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	4353      	muls	r3, r2
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	435a      	muls	r2, r3
 80030d6:	0013      	movs	r3, r2
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	43db      	mvns	r3, r3
 80030de:	400b      	ands	r3, r1
 80030e0:	001a      	movs	r2, r3
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	434b      	muls	r3, r1
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	434b      	muls	r3, r1
 80030ec:	68b9      	ldr	r1, [r7, #8]
 80030ee:	434b      	muls	r3, r1
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	434b      	muls	r3, r1
 80030f4:	431a      	orrs	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	621a      	str	r2, [r3, #32]
}
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	46bd      	mov	sp, r7
 80030fe:	b004      	add	sp, #16
 8003100:	bd80      	pop	{r7, pc}

08003102 <LL_GPIO_SetAFPin_8_15>:
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	0a1b      	lsrs	r3, r3, #8
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	0a12      	lsrs	r2, r2, #8
 800311a:	4353      	muls	r3, r2
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	0a12      	lsrs	r2, r2, #8
 8003120:	4353      	muls	r3, r2
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	0a12      	lsrs	r2, r2, #8
 8003126:	435a      	muls	r2, r3
 8003128:	0013      	movs	r3, r2
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	43db      	mvns	r3, r3
 8003130:	400b      	ands	r3, r1
 8003132:	001a      	movs	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	0a1b      	lsrs	r3, r3, #8
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	0a09      	lsrs	r1, r1, #8
 800313c:	434b      	muls	r3, r1
 800313e:	68b9      	ldr	r1, [r7, #8]
 8003140:	0a09      	lsrs	r1, r1, #8
 8003142:	434b      	muls	r3, r1
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	0a09      	lsrs	r1, r1, #8
 8003148:	434b      	muls	r3, r1
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	434b      	muls	r3, r1
 800314e:	431a      	orrs	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003154:	46c0      	nop			; (mov r8, r8)
 8003156:	46bd      	mov	sp, r7
 8003158:	b004      	add	sp, #16
 800315a:	bd80      	pop	{r7, pc}

0800315c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 800316a:	2300      	movs	r3, #0
 800316c:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800316e:	e048      	b.n	8003202 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2101      	movs	r1, #1
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4091      	lsls	r1, r2
 800317a:	000a      	movs	r2, r1
 800317c:	4013      	ands	r3, r2
 800317e:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d03a      	beq.n	80031fc <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d003      	beq.n	8003196 <LL_GPIO_Init+0x3a>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b02      	cmp	r3, #2
 8003194:	d10e      	bne.n	80031b4 <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	68b9      	ldr	r1, [r7, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	0018      	movs	r0, r3
 80031a0:	f7ff ff50 	bl	8003044 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	6819      	ldr	r1, [r3, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	0018      	movs	r0, r3
 80031b0:	f7ff ff33 	bl	800301a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	0018      	movs	r0, r3
 80031be:	f7ff ff5e 	bl	800307e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d111      	bne.n	80031ee <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2bff      	cmp	r3, #255	; 0xff
 80031ce:	d807      	bhi.n	80031e0 <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	695a      	ldr	r2, [r3, #20]
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	0018      	movs	r0, r3
 80031da:	f7ff ff6d 	bl	80030b8 <LL_GPIO_SetAFPin_0_7>
 80031de:	e006      	b.n	80031ee <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	695a      	ldr	r2, [r3, #20]
 80031e4:	68b9      	ldr	r1, [r7, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	0018      	movs	r0, r3
 80031ea:	f7ff ff8a 	bl	8003102 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	68b9      	ldr	r1, [r7, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	0018      	movs	r0, r3
 80031f8:	f7ff fef2 	bl	8002fe0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3301      	adds	r3, #1
 8003200:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	40da      	lsrs	r2, r3
 800320a:	1e13      	subs	r3, r2, #0
 800320c:	d1b0      	bne.n	8003170 <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 800320e:	2300      	movs	r3, #0
}
 8003210:	0018      	movs	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	b004      	add	sp, #16
 8003216:	bd80      	pop	{r7, pc}

08003218 <LL_LPUART_IsEnabled>:
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2201      	movs	r2, #1
 8003226:	4013      	ands	r3, r2
 8003228:	3b01      	subs	r3, #1
 800322a:	425a      	negs	r2, r3
 800322c:	4153      	adcs	r3, r2
 800322e:	b2db      	uxtb	r3, r3
}
 8003230:	0018      	movs	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	b002      	add	sp, #8
 8003236:	bd80      	pop	{r7, pc}

08003238 <LL_LPUART_SetStopBitsLength>:
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4a05      	ldr	r2, [pc, #20]	; (800325c <LL_LPUART_SetStopBitsLength+0x24>)
 8003248:	401a      	ands	r2, r3
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	605a      	str	r2, [r3, #4]
}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	46bd      	mov	sp, r7
 8003256:	b002      	add	sp, #8
 8003258:	bd80      	pop	{r7, pc}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	ffffcfff 	.word	0xffffcfff

08003260 <LL_LPUART_SetHWFlowCtrl>:
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	4a05      	ldr	r2, [pc, #20]	; (8003284 <LL_LPUART_SetHWFlowCtrl+0x24>)
 8003270:	401a      	ands	r2, r3
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	431a      	orrs	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	609a      	str	r2, [r3, #8]
}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	46bd      	mov	sp, r7
 800327e:	b002      	add	sp, #8
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	fffffcff 	.word	0xfffffcff

08003288 <LL_LPUART_SetBaudRate>:
{
 8003288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800328a:	b089      	sub	sp, #36	; 0x24
 800328c:	af00      	add	r7, sp, #0
 800328e:	61f8      	str	r0, [r7, #28]
 8003290:	61b9      	str	r1, [r7, #24]
 8003292:	617a      	str	r2, [r7, #20]
  LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, BaudRate);
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	0015      	movs	r5, r2
 8003298:	2200      	movs	r2, #0
 800329a:	0016      	movs	r6, r2
 800329c:	0e2a      	lsrs	r2, r5, #24
 800329e:	0234      	lsls	r4, r6, #8
 80032a0:	4314      	orrs	r4, r2
 80032a2:	022b      	lsls	r3, r5, #8
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	0852      	lsrs	r2, r2, #1
 80032a8:	60ba      	str	r2, [r7, #8]
 80032aa:	2200      	movs	r2, #0
 80032ac:	60fa      	str	r2, [r7, #12]
 80032ae:	68b8      	ldr	r0, [r7, #8]
 80032b0:	68f9      	ldr	r1, [r7, #12]
 80032b2:	18c0      	adds	r0, r0, r3
 80032b4:	4161      	adcs	r1, r4
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	603b      	str	r3, [r7, #0]
 80032ba:	2300      	movs	r3, #0
 80032bc:	607b      	str	r3, [r7, #4]
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f7fd f897 	bl	80003f4 <__aeabi_uldivmod>
 80032c6:	0003      	movs	r3, r0
 80032c8:	000c      	movs	r4, r1
 80032ca:	031b      	lsls	r3, r3, #12
 80032cc:	0b1a      	lsrs	r2, r3, #12
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	60da      	str	r2, [r3, #12]
}
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	46bd      	mov	sp, r7
 80032d6:	b009      	add	sp, #36	; 0x24
 80032d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080032dc <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80032e6:	230f      	movs	r3, #15
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	2201      	movs	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80032ee:	2300      	movs	r3, #0
 80032f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7ff ff8f 	bl	8003218 <LL_LPUART_IsEnabled>
 80032fa:	1e03      	subs	r3, r0, #0
 80032fc:	d135      	bne.n	800336a <LL_LPUART_Init+0x8e>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1d      	ldr	r2, [pc, #116]	; (8003378 <LL_LPUART_Init+0x9c>)
 8003304:	401a      	ands	r2, r3
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	6859      	ldr	r1, [r3, #4]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	4319      	orrs	r1, r3
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	430b      	orrs	r3, r1
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	0011      	movs	r1, r2
 8003324:	0018      	movs	r0, r3
 8003326:	f7ff ff87 	bl	8003238 <LL_LPUART_SetStopBitsLength>

    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	695a      	ldr	r2, [r3, #20]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	0011      	movs	r1, r2
 8003332:	0018      	movs	r0, r3
 8003334:	f7ff ff94 	bl	8003260 <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 8003338:	23c0      	movs	r3, #192	; 0xc0
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	0018      	movs	r0, r3
 800333e:	f000 f8b3 	bl	80034a8 <LL_RCC_GetLPUARTClockFreq>
 8003342:	0003      	movs	r3, r0
 8003344:	60bb      	str	r3, [r7, #8]

    /* Configure the LPUART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00e      	beq.n	800336a <LL_LPUART_Init+0x8e>
        && (LPUART_InitStruct->BaudRate != 0U))
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <LL_LPUART_Init+0x8e>
    {
      status = SUCCESS;
 8003354:	230f      	movs	r3, #15
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	2200      	movs	r2, #0
 800335a:	701a      	strb	r2, [r3, #0]
      LL_LPUART_SetBaudRate(LPUARTx,
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68b9      	ldr	r1, [r7, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	0018      	movs	r0, r3
 8003366:	f7ff ff8f 	bl	8003288 <LL_LPUART_SetBaudRate>
      assert_param(IS_LL_LPUART_BRR_MAX(LPUARTx->BRR));
    }

  }

  return (status);
 800336a:	230f      	movs	r3, #15
 800336c:	18fb      	adds	r3, r7, r3
 800336e:	781b      	ldrb	r3, [r3, #0]
}
 8003370:	0018      	movs	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	b004      	add	sp, #16
 8003376:	bd80      	pop	{r7, pc}
 8003378:	efffe9f3 	.word	0xefffe9f3

0800337c <LL_RCC_HSI_IsReady>:
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8003380:	4b05      	ldr	r3, [pc, #20]	; (8003398 <LL_RCC_HSI_IsReady+0x1c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2204      	movs	r2, #4
 8003386:	4013      	ands	r3, r2
 8003388:	2b04      	cmp	r3, #4
 800338a:	d101      	bne.n	8003390 <LL_RCC_HSI_IsReady+0x14>
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <LL_RCC_HSI_IsReady+0x16>
 8003390:	2300      	movs	r3, #0
}
 8003392:	0018      	movs	r0, r3
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40021000 	.word	0x40021000

0800339c <LL_RCC_LSE_IsReady>:
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 80033a0:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <LL_RCC_LSE_IsReady+0x24>)
 80033a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033a4:	2380      	movs	r3, #128	; 0x80
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	401a      	ands	r2, r3
 80033aa:	2380      	movs	r3, #128	; 0x80
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d101      	bne.n	80033b6 <LL_RCC_LSE_IsReady+0x1a>
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <LL_RCC_LSE_IsReady+0x1c>
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	0018      	movs	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	40021000 	.word	0x40021000

080033c4 <LL_RCC_MSI_GetRange>:
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 80033c8:	4b03      	ldr	r3, [pc, #12]	; (80033d8 <LL_RCC_MSI_GetRange+0x14>)
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	23e0      	movs	r3, #224	; 0xe0
 80033ce:	021b      	lsls	r3, r3, #8
 80033d0:	4013      	ands	r3, r2
}
 80033d2:	0018      	movs	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40021000 	.word	0x40021000

080033dc <LL_RCC_GetSysClkSource>:
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80033e0:	4b03      	ldr	r3, [pc, #12]	; (80033f0 <LL_RCC_GetSysClkSource+0x14>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	220c      	movs	r2, #12
 80033e6:	4013      	ands	r3, r2
}
 80033e8:	0018      	movs	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	40021000 	.word	0x40021000

080033f4 <LL_RCC_GetAHBPrescaler>:
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80033f8:	4b03      	ldr	r3, [pc, #12]	; (8003408 <LL_RCC_GetAHBPrescaler+0x14>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	22f0      	movs	r2, #240	; 0xf0
 80033fe:	4013      	ands	r3, r2
}
 8003400:	0018      	movs	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	40021000 	.word	0x40021000

0800340c <LL_RCC_GetAPB1Prescaler>:
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003410:	4b03      	ldr	r3, [pc, #12]	; (8003420 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	23e0      	movs	r3, #224	; 0xe0
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4013      	ands	r3, r2
}
 800341a:	0018      	movs	r0, r3
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40021000 	.word	0x40021000

08003424 <LL_RCC_GetLPUARTClockSource>:
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800342c:	4b03      	ldr	r3, [pc, #12]	; (800343c <LL_RCC_GetLPUARTClockSource+0x18>)
 800342e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	4013      	ands	r3, r2
}
 8003434:	0018      	movs	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	b002      	add	sp, #8
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40021000 	.word	0x40021000

08003440 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8003444:	4b03      	ldr	r3, [pc, #12]	; (8003454 <LL_RCC_PLL_GetMainSource+0x14>)
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	2380      	movs	r3, #128	; 0x80
 800344a:	025b      	lsls	r3, r3, #9
 800344c:	4013      	ands	r3, r2
}
 800344e:	0018      	movs	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40021000 	.word	0x40021000

08003458 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 800345c:	4b03      	ldr	r3, [pc, #12]	; (800346c <LL_RCC_PLL_GetMultiplicator+0x14>)
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	23f0      	movs	r3, #240	; 0xf0
 8003462:	039b      	lsls	r3, r3, #14
 8003464:	4013      	ands	r3, r2
}
 8003466:	0018      	movs	r0, r3
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40021000 	.word	0x40021000

08003470 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <LL_RCC_PLL_GetDivider+0x14>)
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	23c0      	movs	r3, #192	; 0xc0
 800347a:	041b      	lsls	r3, r3, #16
 800347c:	4013      	ands	r3, r2
}
 800347e:	0018      	movs	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40021000 	.word	0x40021000

08003488 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2210      	movs	r2, #16
 8003492:	4013      	ands	r3, r2
 8003494:	2b10      	cmp	r3, #16
 8003496:	d101      	bne.n	800349c <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 800349c:	2300      	movs	r3, #0
}
 800349e:	0018      	movs	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40021000 	.word	0x40021000

080034a8 <LL_RCC_GetLPUARTClockFreq>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE
  * @retval LPUART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  /* LPUART1CLK clock frequency */
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	0018      	movs	r0, r3
 80034b8:	f7ff ffb4 	bl	8003424 <LL_RCC_GetLPUARTClockSource>
 80034bc:	0003      	movs	r3, r0
 80034be:	2280      	movs	r2, #128	; 0x80
 80034c0:	0112      	lsls	r2, r2, #4
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00c      	beq.n	80034e0 <LL_RCC_GetLPUARTClockFreq+0x38>
 80034c6:	22c0      	movs	r2, #192	; 0xc0
 80034c8:	0112      	lsls	r2, r2, #4
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d016      	beq.n	80034fc <LL_RCC_GetLPUARTClockFreq+0x54>
 80034ce:	2280      	movs	r2, #128	; 0x80
 80034d0:	00d2      	lsls	r2, r2, #3
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d11a      	bne.n	800350c <LL_RCC_GetLPUARTClockFreq+0x64>
  {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      lpuart_frequency = RCC_GetSystemClockFreq();
 80034d6:	f000 f833 	bl	8003540 <RCC_GetSystemClockFreq>
 80034da:	0003      	movs	r3, r0
 80034dc:	60fb      	str	r3, [r7, #12]
      break;
 80034de:	e025      	b.n	800352c <LL_RCC_GetLPUARTClockFreq+0x84>

    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() != 0U)
 80034e0:	f7ff ff4c 	bl	800337c <LL_RCC_HSI_IsReady>
 80034e4:	1e03      	subs	r3, r0, #0
 80034e6:	d01e      	beq.n	8003526 <LL_RCC_GetLPUARTClockFreq+0x7e>
      {
        if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80034e8:	f7ff ffce 	bl	8003488 <LL_RCC_IsActiveFlag_HSIDIV>
 80034ec:	1e03      	subs	r3, r0, #0
 80034ee:	d002      	beq.n	80034f6 <LL_RCC_GetLPUARTClockFreq+0x4e>
        {
          lpuart_frequency = (HSI_VALUE >> 2U);
 80034f0:	4b11      	ldr	r3, [pc, #68]	; (8003538 <LL_RCC_GetLPUARTClockFreq+0x90>)
 80034f2:	60fb      	str	r3, [r7, #12]
        else
        {
          lpuart_frequency = HSI_VALUE;
        }
      }
      break;
 80034f4:	e017      	b.n	8003526 <LL_RCC_GetLPUARTClockFreq+0x7e>
          lpuart_frequency = HSI_VALUE;
 80034f6:	4b11      	ldr	r3, [pc, #68]	; (800353c <LL_RCC_GetLPUARTClockFreq+0x94>)
 80034f8:	60fb      	str	r3, [r7, #12]
      break;
 80034fa:	e014      	b.n	8003526 <LL_RCC_GetLPUARTClockFreq+0x7e>

    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() != 0U)
 80034fc:	f7ff ff4e 	bl	800339c <LL_RCC_LSE_IsReady>
 8003500:	1e03      	subs	r3, r0, #0
 8003502:	d012      	beq.n	800352a <LL_RCC_GetLPUARTClockFreq+0x82>
      {
        lpuart_frequency = LSE_VALUE;
 8003504:	2380      	movs	r3, #128	; 0x80
 8003506:	021b      	lsls	r3, r3, #8
 8003508:	60fb      	str	r3, [r7, #12]
      }
      break;
 800350a:	e00e      	b.n	800352a <LL_RCC_GetLPUARTClockFreq+0x82>

    case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
    default:
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800350c:	f000 f818 	bl	8003540 <RCC_GetSystemClockFreq>
 8003510:	0003      	movs	r3, r0
 8003512:	0018      	movs	r0, r3
 8003514:	f000 f858 	bl	80035c8 <RCC_GetHCLKClockFreq>
 8003518:	0003      	movs	r3, r0
 800351a:	0018      	movs	r0, r3
 800351c:	f000 f86a 	bl	80035f4 <RCC_GetPCLK1ClockFreq>
 8003520:	0003      	movs	r3, r0
 8003522:	60fb      	str	r3, [r7, #12]
      break;
 8003524:	e002      	b.n	800352c <LL_RCC_GetLPUARTClockFreq+0x84>
      break;
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	e000      	b.n	800352c <LL_RCC_GetLPUARTClockFreq+0x84>
      break;
 800352a:	46c0      	nop			; (mov r8, r8)
  }

  return lpuart_frequency;
 800352c:	68fb      	ldr	r3, [r7, #12]
}
 800352e:	0018      	movs	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	b004      	add	sp, #16
 8003534:	bd80      	pop	{r7, pc}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	003d0900 	.word	0x003d0900
 800353c:	00f42400 	.word	0x00f42400

08003540 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003546:	f7ff ff49 	bl	80033dc <LL_RCC_GetSysClkSource>
 800354a:	0003      	movs	r3, r0
 800354c:	2b04      	cmp	r3, #4
 800354e:	d013      	beq.n	8003578 <RCC_GetSystemClockFreq+0x38>
 8003550:	d802      	bhi.n	8003558 <RCC_GetSystemClockFreq+0x18>
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <RCC_GetSystemClockFreq+0x22>
 8003556:	e021      	b.n	800359c <RCC_GetSystemClockFreq+0x5c>
 8003558:	2b08      	cmp	r3, #8
 800355a:	d017      	beq.n	800358c <RCC_GetSystemClockFreq+0x4c>
 800355c:	2b0c      	cmp	r3, #12
 800355e:	d018      	beq.n	8003592 <RCC_GetSystemClockFreq+0x52>
 8003560:	e01c      	b.n	800359c <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003562:	f7ff ff2f 	bl	80033c4 <LL_RCC_MSI_GetRange>
 8003566:	0003      	movs	r3, r0
 8003568:	0b5b      	lsrs	r3, r3, #13
 800356a:	3301      	adds	r3, #1
 800356c:	2280      	movs	r2, #128	; 0x80
 800356e:	0212      	lsls	r2, r2, #8
 8003570:	409a      	lsls	r2, r3
 8003572:	0013      	movs	r3, r2
 8003574:	607b      	str	r3, [r7, #4]
      break;
 8003576:	e01c      	b.n	80035b2 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8003578:	f7ff ff86 	bl	8003488 <LL_RCC_IsActiveFlag_HSIDIV>
 800357c:	1e03      	subs	r3, r0, #0
 800357e:	d002      	beq.n	8003586 <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 8003580:	4b0e      	ldr	r3, [pc, #56]	; (80035bc <RCC_GetSystemClockFreq+0x7c>)
 8003582:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8003584:	e015      	b.n	80035b2 <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 8003586:	4b0e      	ldr	r3, [pc, #56]	; (80035c0 <RCC_GetSystemClockFreq+0x80>)
 8003588:	607b      	str	r3, [r7, #4]
      break;
 800358a:	e012      	b.n	80035b2 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 800358c:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <RCC_GetSystemClockFreq+0x84>)
 800358e:	607b      	str	r3, [r7, #4]
      break;
 8003590:	e00f      	b.n	80035b2 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003592:	f000 f843 	bl	800361c <RCC_PLL_GetFreqDomain_SYS>
 8003596:	0003      	movs	r3, r0
 8003598:	607b      	str	r3, [r7, #4]
      break;
 800359a:	e00a      	b.n	80035b2 <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800359c:	f7ff ff12 	bl	80033c4 <LL_RCC_MSI_GetRange>
 80035a0:	0003      	movs	r3, r0
 80035a2:	0b5b      	lsrs	r3, r3, #13
 80035a4:	3301      	adds	r3, #1
 80035a6:	2280      	movs	r2, #128	; 0x80
 80035a8:	0212      	lsls	r2, r2, #8
 80035aa:	409a      	lsls	r2, r3
 80035ac:	0013      	movs	r3, r2
 80035ae:	607b      	str	r3, [r7, #4]
      break;
 80035b0:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 80035b2:	687b      	ldr	r3, [r7, #4]
}
 80035b4:	0018      	movs	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b002      	add	sp, #8
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	003d0900 	.word	0x003d0900
 80035c0:	00f42400 	.word	0x00f42400
 80035c4:	007a1200 	.word	0x007a1200

080035c8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80035d0:	f7ff ff10 	bl	80033f4 <LL_RCC_GetAHBPrescaler>
 80035d4:	0003      	movs	r3, r0
 80035d6:	091b      	lsrs	r3, r3, #4
 80035d8:	220f      	movs	r2, #15
 80035da:	4013      	ands	r3, r2
 80035dc:	4a04      	ldr	r2, [pc, #16]	; (80035f0 <RCC_GetHCLKClockFreq+0x28>)
 80035de:	5cd3      	ldrb	r3, [r2, r3]
 80035e0:	001a      	movs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	40d3      	lsrs	r3, r2
}
 80035e6:	0018      	movs	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b002      	add	sp, #8
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	0800392c 	.word	0x0800392c

080035f4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80035fc:	f7ff ff06 	bl	800340c <LL_RCC_GetAPB1Prescaler>
 8003600:	0003      	movs	r3, r0
 8003602:	0a1b      	lsrs	r3, r3, #8
 8003604:	4a04      	ldr	r2, [pc, #16]	; (8003618 <RCC_GetPCLK1ClockFreq+0x24>)
 8003606:	5cd3      	ldrb	r3, [r2, r3]
 8003608:	001a      	movs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	40d3      	lsrs	r3, r2
}
 800360e:	0018      	movs	r0, r3
 8003610:	46bd      	mov	sp, r7
 8003612:	b002      	add	sp, #8
 8003614:	bd80      	pop	{r7, pc}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	0800393c 	.word	0x0800393c

0800361c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800361c:	b590      	push	{r4, r7, lr}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003622:	f7ff ff0d 	bl	8003440 <LL_RCC_PLL_GetMainSource>
 8003626:	0003      	movs	r3, r0
 8003628:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d109      	bne.n	8003644 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8003630:	f7ff ff2a 	bl	8003488 <LL_RCC_IsActiveFlag_HSIDIV>
 8003634:	1e03      	subs	r3, r0, #0
 8003636:	d002      	beq.n	800363e <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8003638:	4b10      	ldr	r3, [pc, #64]	; (800367c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800363a:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 800363c:	e005      	b.n	800364a <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 800363e:	4b10      	ldr	r3, [pc, #64]	; (8003680 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8003640:	607b      	str	r3, [r7, #4]
      break;
 8003642:	e002      	b.n	800364a <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003644:	4b0f      	ldr	r3, [pc, #60]	; (8003684 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8003646:	607b      	str	r3, [r7, #4]
      break;
 8003648:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 800364a:	f7ff ff05 	bl	8003458 <LL_RCC_PLL_GetMultiplicator>
 800364e:	0003      	movs	r3, r0
 8003650:	0c9b      	lsrs	r3, r3, #18
 8003652:	4a0d      	ldr	r2, [pc, #52]	; (8003688 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8003654:	5cd3      	ldrb	r3, [r2, r3]
 8003656:	001a      	movs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4353      	muls	r3, r2
 800365c:	001c      	movs	r4, r3
 800365e:	f7ff ff07 	bl	8003470 <LL_RCC_PLL_GetDivider>
 8003662:	0003      	movs	r3, r0
 8003664:	0d9b      	lsrs	r3, r3, #22
 8003666:	3301      	adds	r3, #1
 8003668:	0019      	movs	r1, r3
 800366a:	0020      	movs	r0, r4
 800366c:	f7fc fd4c 	bl	8000108 <__udivsi3>
 8003670:	0003      	movs	r3, r0
}
 8003672:	0018      	movs	r0, r3
 8003674:	46bd      	mov	sp, r7
 8003676:	b003      	add	sp, #12
 8003678:	bd90      	pop	{r4, r7, pc}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	003d0900 	.word	0x003d0900
 8003680:	00f42400 	.word	0x00f42400
 8003684:	007a1200 	.word	0x007a1200
 8003688:	08003944 	.word	0x08003944

0800368c <LL_SPI_IsEnabled>:
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2240      	movs	r2, #64	; 0x40
 800369a:	4013      	ands	r3, r2
 800369c:	2b40      	cmp	r3, #64	; 0x40
 800369e:	d101      	bne.n	80036a4 <LL_SPI_IsEnabled+0x18>
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <LL_SPI_IsEnabled+0x1a>
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	0018      	movs	r0, r3
 80036a8:	46bd      	mov	sp, r7
 80036aa:	b002      	add	sp, #8
 80036ac:	bd80      	pop	{r7, pc}

080036ae <LL_SPI_SetCRCPolynomial>:
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	001a      	movs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	611a      	str	r2, [r3, #16]
}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b002      	add	sp, #8
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80036d6:	230f      	movs	r3, #15
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	2201      	movs	r2, #1
 80036dc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	0018      	movs	r0, r3
 80036e2:	f7ff ffd3 	bl	800368c <LL_SPI_IsEnabled>
 80036e6:	1e03      	subs	r3, r0, #0
 80036e8:	d13c      	bne.n	8003764 <LL_SPI_Init+0x98>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a21      	ldr	r2, [pc, #132]	; (8003774 <LL_SPI_Init+0xa8>)
 80036f0:	401a      	ands	r2, r3
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	6819      	ldr	r1, [r3, #0]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4319      	orrs	r1, r3
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	4319      	orrs	r1, r3
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	4319      	orrs	r1, r3
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	4319      	orrs	r1, r3
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	4319      	orrs	r1, r3
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	4319      	orrs	r1, r3
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	4319      	orrs	r1, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	430b      	orrs	r3, r1
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2204      	movs	r2, #4
 8003732:	4393      	bics	r3, r2
 8003734:	001a      	movs	r2, r3
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	0c1b      	lsrs	r3, r3, #16
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	6a1a      	ldr	r2, [r3, #32]
 8003746:	2380      	movs	r3, #128	; 0x80
 8003748:	019b      	lsls	r3, r3, #6
 800374a:	429a      	cmp	r2, r3
 800374c:	d106      	bne.n	800375c <LL_SPI_Init+0x90>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	0011      	movs	r1, r2
 8003756:	0018      	movs	r0, r3
 8003758:	f7ff ffa9 	bl	80036ae <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800375c:	230f      	movs	r3, #15
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	701a      	strb	r2, [r3, #0]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8003764:	230f      	movs	r3, #15
 8003766:	18fb      	adds	r3, r7, r3
 8003768:	781b      	ldrb	r3, [r3, #0]
}
 800376a:	0018      	movs	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	b004      	add	sp, #16
 8003770:	bd80      	pop	{r7, pc}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	ffff0040 	.word	0xffff0040

08003778 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003780:	4b0d      	ldr	r3, [pc, #52]	; (80037b8 <LL_mDelay+0x40>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003786:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3301      	adds	r3, #1
 800378c:	d00c      	beq.n	80037a8 <LL_mDelay+0x30>
  {
    Delay++;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3301      	adds	r3, #1
 8003792:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003794:	e008      	b.n	80037a8 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003796:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <LL_mDelay+0x40>)
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	2380      	movs	r3, #128	; 0x80
 800379c:	025b      	lsls	r3, r3, #9
 800379e:	4013      	ands	r3, r2
 80037a0:	d002      	beq.n	80037a8 <LL_mDelay+0x30>
    {
      Delay--;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	607b      	str	r3, [r7, #4]
  while (Delay)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f3      	bne.n	8003796 <LL_mDelay+0x1e>
    }
  }
}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b004      	add	sp, #16
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	e000e010 	.word	0xe000e010

080037bc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80037c4:	4b03      	ldr	r3, [pc, #12]	; (80037d4 <LL_SetSystemCoreClock+0x18>)
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	601a      	str	r2, [r3, #0]
}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b002      	add	sp, #8
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	20000034 	.word	0x20000034

080037d8 <__libc_init_array>:
 80037d8:	b570      	push	{r4, r5, r6, lr}
 80037da:	2600      	movs	r6, #0
 80037dc:	4d0c      	ldr	r5, [pc, #48]	; (8003810 <__libc_init_array+0x38>)
 80037de:	4c0d      	ldr	r4, [pc, #52]	; (8003814 <__libc_init_array+0x3c>)
 80037e0:	1b64      	subs	r4, r4, r5
 80037e2:	10a4      	asrs	r4, r4, #2
 80037e4:	42a6      	cmp	r6, r4
 80037e6:	d109      	bne.n	80037fc <__libc_init_array+0x24>
 80037e8:	2600      	movs	r6, #0
 80037ea:	f000 f82b 	bl	8003844 <_init>
 80037ee:	4d0a      	ldr	r5, [pc, #40]	; (8003818 <__libc_init_array+0x40>)
 80037f0:	4c0a      	ldr	r4, [pc, #40]	; (800381c <__libc_init_array+0x44>)
 80037f2:	1b64      	subs	r4, r4, r5
 80037f4:	10a4      	asrs	r4, r4, #2
 80037f6:	42a6      	cmp	r6, r4
 80037f8:	d105      	bne.n	8003806 <__libc_init_array+0x2e>
 80037fa:	bd70      	pop	{r4, r5, r6, pc}
 80037fc:	00b3      	lsls	r3, r6, #2
 80037fe:	58eb      	ldr	r3, [r5, r3]
 8003800:	4798      	blx	r3
 8003802:	3601      	adds	r6, #1
 8003804:	e7ee      	b.n	80037e4 <__libc_init_array+0xc>
 8003806:	00b3      	lsls	r3, r6, #2
 8003808:	58eb      	ldr	r3, [r5, r3]
 800380a:	4798      	blx	r3
 800380c:	3601      	adds	r6, #1
 800380e:	e7f2      	b.n	80037f6 <__libc_init_array+0x1e>
 8003810:	08003958 	.word	0x08003958
 8003814:	08003958 	.word	0x08003958
 8003818:	08003958 	.word	0x08003958
 800381c:	0800395c 	.word	0x0800395c

08003820 <memcpy>:
 8003820:	2300      	movs	r3, #0
 8003822:	b510      	push	{r4, lr}
 8003824:	429a      	cmp	r2, r3
 8003826:	d100      	bne.n	800382a <memcpy+0xa>
 8003828:	bd10      	pop	{r4, pc}
 800382a:	5ccc      	ldrb	r4, [r1, r3]
 800382c:	54c4      	strb	r4, [r0, r3]
 800382e:	3301      	adds	r3, #1
 8003830:	e7f8      	b.n	8003824 <memcpy+0x4>

08003832 <memset>:
 8003832:	0003      	movs	r3, r0
 8003834:	1812      	adds	r2, r2, r0
 8003836:	4293      	cmp	r3, r2
 8003838:	d100      	bne.n	800383c <memset+0xa>
 800383a:	4770      	bx	lr
 800383c:	7019      	strb	r1, [r3, #0]
 800383e:	3301      	adds	r3, #1
 8003840:	e7f9      	b.n	8003836 <memset+0x4>
	...

08003844 <_init>:
 8003844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800384a:	bc08      	pop	{r3}
 800384c:	469e      	mov	lr, r3
 800384e:	4770      	bx	lr

08003850 <_fini>:
 8003850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003856:	bc08      	pop	{r3}
 8003858:	469e      	mov	lr, r3
 800385a:	4770      	bx	lr
